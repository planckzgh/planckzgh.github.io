<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>planckgh</title>
  <icon>https://www.gravatar.com/avatar/036b4e7e0d8e7f5b8248d1bce20305d2</icon>
  <subtitle>个人博客</subtitle>
  <link href="https://planckzgh.github.io/atom.xml" rel="self"/>
  
  <link href="https://planckzgh.github.io/"/>
  <updated>2024-12-09T09:55:44.546Z</updated>
  <id>https://planckzgh.github.io/</id>
  
  <author>
    <name>planckgh</name>
    <email>planckgh@gmail.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>常用工具合集</title>
    <link href="https://planckzgh.github.io/2024/12/09/%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E5%90%88%E9%9B%86/"/>
    <id>https://planckzgh.github.io/2024/12/09/%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E5%90%88%E9%9B%86/</id>
    <published>2024-12-09T09:17:03.000Z</published>
    <updated>2024-12-09T09:55:44.546Z</updated>
    
    <content type="html"><![CDATA[<h1 id="tools">Tools</h1><h2 id="vim">vim</h2><h3 id="basic">Basic</h3><ol><li>单词的大小写转换： <code>(visual mode) &lt;U&gt; &amp; &lt;u&gt;</code></li><li><a href="https://segmentfault.com/a/1190000021097211">快速跳转</a>：匹配括号之间跳转 <code>%</code> ，函数头尾跳转 <code>[&#123;</code></li><li>历史位置跳转： <code>&lt;C-o&gt;</code> <code>&lt;C-i&gt;</code> <code>''</code></li><li>启用折叠 <code>zN</code>，禁用折叠 <code>zn</code> ，开关折叠 <code>za</code></li><li>根据路径跳转文件： <code>gf</code></li><li>当需要多次copy而希望剪贴板不被visual模式选择的新内容覆盖时，选用特殊寄存器存储copy的内容： <code>&quot;ay -&gt; v（选择被覆盖的内容） -&gt;&quot;ap -&gt; &quot;ap</code></li><li>标记语法 <code>m&#123;letter&#125;</code>，跳转语法 ``{letter}`<ul><li><code>m[a-z]</code> - 小写字母的, 创建一个可以在当前文件(缓冲区)进行跳转的标签</li><li><code>m[A-Z]</code> - 大写字母的, 创建一个可以全局的标签, 可以在多个文件之前跳转</li></ul></li></ol><h3 id="plugin">Plugin</h3><ol><li>对齐：Tabular</li><li>补全：<a href="https://wulc.me/2015/12/01/vim%E4%B8%ADSuperTab%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/">SuperTab</a></li><li>跳转：ctags 可拓展支持 SystemVerilog<ul><li><a href="https://blog.csdn.net/weixin_44966641/article/details/121942367">基本使用方法</a>：<code>ctags -R .</code></li><li>vim配置： <code>set tags=./tags;/</code> <code>nnoremap &lt;space&gt;n g&lt;C-]&gt;</code></li><li>systemverilog.ctags文件配置：<a href="https://blog.csdn.net/zhajio/article/details/45014837">ctags for systemverilog</a>, <a href="https://coderwall.com/p/fy7stg/vim-and-systemverilog">ctags config for systemverilog</a></li></ul></li><li>跳转：<a href="https://www.vim.org/scripts/script.php?script_id=5494">vtags</a> 基于python强支持verilog/systemverilog</li><li>文件树：<a href="https://blog.csdn.net/somenzz/article/details/120735538">netrw</a></li><li>自动缩进：verilog_systemverilog.vim</li><li>其他自动化操作：<a href="https://automatic-verilog.honk.wang/#/handbook?id=%E6%A0%91%E7%8A%B6%E6%8B%93%E6%89%91-rtltree">automatic-verilog</a></li></ol><h3 id="command">Command</h3><ul><li>删除含有指定pattern的行： <code>:g/pattern/d</code></li><li>区分大小写替换操作： <code>:%s/\Ckey1/key2/g</code></li></ul><h3 id="note">Note</h3><ol><li>vim 语法折叠巨慢，而且切换文件还会恢复折叠，打开大文件不建议使用</li></ol><h2 id="grep">grep</h2><h3 id="basic"><a href="https://blog.csdn.net/LONG_Yi_1994/article/details/131051728">Basic</a></h3><ol><li>文件查找：</li><li>文本查找：</li></ol><h2 id="sed">sed</h2><h3 id="basic"><a href="https://blog.csdn.net/qq_45206551/article/details/104498965">Basic</a></h3><h2 id="verdi">verdi</h2><h3 id="basic">Basic</h3><ul><li><a href="https://blog.csdn.net/cy413026/article/details/124653544#:~:text=%E9%A6%96%E5%85%88%E5%9C%A8%E8%8F%9C%E5%8D%95%E6%A0%8F%20%E7%82%B9%E5%87%BBview-%3EsignalList%E7%AA%97%E5%8F%A3%EF%BC%8C%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E6%89%80%E6%9C%89%E4%BF%A1%E5%8F%B7%E4%BD%8D%E5%AE%BD%E9%83%BD%E6%98%AF%E6%95%B0%E5%AD%97%E7%9A%84%EF%BC%8C%E8%BF%87%E6%BB%A4%E5%87%BA%E8%87%AA%E5%B7%B1%E5%85%B3%E5%BF%83%E7%9A%84%E4%BF%A1%E5%8F%B7%EF%BC%8C%E9%80%89%E4%B8%AD%E8%BF%99%E4%BA%9B%E4%BF%A1%E5%8F%B7%E5%8F%B3%E9%94%AE-%3Esave%20selected%20signals%20to,file%E5%B0%B1%E5%8F%AF%E4%BB%A5%E4%BF%9D%E5%AD%98%E4%B8%BA%E6%96%87%E6%9C%AC%E6%96%87%E4%BB%B6%E3%80%82%202.%E5%B0%86%E6%9F%90%E4%B8%AAHierarchy%E4%B8%8B%E7%9A%84%E6%89%80%E6%9C%89%E5%AE%9E%E4%BE%8B%E5%8C%96%E5%B1%82%E6%AC%A1%E5%AF%BC%E5%87%BA%20%E5%9C%A8instance%E7%AA%97%E5%8F%A3%E9%80%89%E6%8B%A9%E6%9F%90%E4%B8%80%E4%BE%8B%E5%8C%96%E5%B1%82%E6%AC%A1%EF%BC%8C%E5%8F%B3%E9%94%AE-%3E%20Export%20Hierarchy%E5%8D%B3%E5%8F%AF">verdi将rtl中参数信号位宽导出为数字&amp;导出rtl层次_verdi将信号数据存入文件-CSDN博客</a></li></ul><h3 id="install">Install</h3><p><a href="https://bbs.eetop.cn/thread-856230-1-1.html">verdi_vL-2016.06-1百度网盘分享 - IC验证资料 -  EETOP 创芯网论坛 (原名：电子顶级开发网) -</a></p><h3 id="config">Config</h3><p><a href="novas.rc">novas.rc</a></p><h3 id="hotkeys">Hotkeys</h3><ol><li><code>h</code> 在波形窗口查看信号的完整路径</li><li><code>x</code> 在代码窗口查看信号的值和跳变</li><li><code>m</code> 在代码窗口查看宏的展开形式</li></ol><h2 id="tmux">tmux</h2><h3 id="basic"><a href="https://louiszhai.github.io/2017/09/30/tmux/#%E4%BF%AE%E6%94%B9%E6%8C%87%E4%BB%A4%E5%89%8D%E7%BC%80">Basic</a></h3><ul><li>查看快捷键：<code>&lt;prefix&gt; + ?</code></li><li>窗口重命名：<code>&lt;prefix&gt; + $</code></li><li>窗格重命名：<code>&lt;prefix&gt; + ,</code></li><li>调整窗格的分布位置：<code>&lt;prefix&gt; + &lt;C-o&gt;</code></li><li>将水平分割转换为垂直分割： <code>&lt;prefix&gt; + &lt;space&gt;</code></li><li>将窗格独立成一个新窗口： <code>&lt;prefix&gt; + !</code></li><li>多窗格同步：<code>&lt;prefix&gt; + :synchronize-panes</code></li></ul><h3 id="config"><a href="https://geekdaxue.co/read/tao-of-tmux-CN/manuscript-09-status-bar.md">Config</a></h3><ul><li>重新载入当前配置： <code>tmux source ~/.tmux.conf</code></li></ul><h3 id="debug">Debug</h3><ol><li><a href="https://blog.csdn.net/qq_16763983/article/details/130450323">多屏幕打开同一个tmux会产生分辨率冲突的问题</a>：<ul><li>在配置文件中加入 <code>set-window-option -g aggressive-resize</code></li><li>选择最小分辨率：<code>&lt;prefix&gt; + D</code></li></ul></li></ol><h2 id="svn"><a href="https://blog.csdn.net/zhoenet/article/details/122292970">svn</a></h2><ol><li>显示库信息： <code>svn info</code></li><li>文件改动状态： <code>svn st</code>  仅显示当前路径： <code>svn st -N</code></li><li>比较本地与库中的文件： <code>svn diff &lt;file&gt; or &lt;dir&gt;</code></li><li>提交本地文件到库： <code>svn ci [-m &quot;text&quot;] &lt;localfile&gt;</code></li><li>创建的新文件并提交到库： <code>svn add &lt;localfile&gt; or &lt;localpath&gt;</code> → <code>svn ci -m &quot;text&quot; &lt;localfile&gt; or &lt;localpath&gt;</code></li><li>将库文件下载到本地目录： <code>svn co &lt;svn_url&gt; &lt;local_path&gt;</code></li><li>更新到最新版本： <code>svn up &lt;file or dir&gt; [-t xx]</code><ol><li>svn操作文件缩写： <code>U</code> 从服务器更新（update）； <code>A</code> 新增文件； <code>D</code> 删除文件； <code>C</code> 冲突；<a href="https://blog.csdn.net/FlyingKuiKui/article/details/80423035">https://blog.csdn.net/FlyingKuiKui/article/details/80423035</a></li><li>当存在冲突时： <code>tc</code> 以库文件为准； <code>mc</code> 以本地文件为准； <code>p</code> 标记冲突，稍后解决； <a href="https://blog.csdn.net/zhaoshaoyan123/article/details/125394784">https://blog.csdn.net/zhaoshaoyan123/article/details/125394784</a></li><li>解决冲突后，需要标记冲突已解决： <code>svn resolve --accept=working &lt;filename&gt;</code>  <code>svn resolved &lt;filename&gt;</code> 会删除因冲突而创建的相关文件</li><li><a href="https://blog.csdn.net/raoxiaoya/article/details/107963301">https://blog.csdn.net/raoxiaoya/article/details/107963301</a></li></ol></li><li>删除库中的文件： <code>svn delete &lt;filename&gt;     svn ci -m &quot;delete filename&quot;</code>  <a href="https://blog.csdn.net/Morris_/article/details/108746600">https://blog.csdn.net/Morris_/article/details/108746600</a></li><li>查看修改历史： <code>svn log &lt;dir&gt; [-v]</code></li></ol><h2 id="regex">regex</h2><p><a href="https://stackoverflow.org.cn/regexsucha/">正则表达式语法速查|正则教程</a></p><p><a href="https://blog.csdn.net/qq_44273429/article/details/132988625">https://blog.csdn.net/qq_44273429/article/details/132988625</a></p><h2 id="questasim-or-modelsim">questasim or modelsim</h2><ul><li><code>vlog -help all</code></li><li><a href="https://blog.csdn.net/Xminyang/article/details/132781868">https://blog.csdn.net/Xminyang/article/details/132781868</a></li><li><a href="https://blog.csdn.net/Lin_w_x/article/details/125484206">https://blog.csdn.net/Lin_w_x/article/details/125484206</a></li></ul><h2 id="gdb">gdb</h2><h3 id="basic">Basic</h3><ul><li><code>r</code>：重新开始执行程序</li><li><code>c</code>：继续执行程序</li><li><code>s</code>：单步执行且进入函数</li><li><code>n</code>：单步执行但不进入函数</li><li><code>finish</code>：跳出当前函数</li><li><code>p</code>：打印变量或寄存器的值</li><li><code>x</code>：扫描内存</li><li><code>bt</code>：查看调用栈</li><li><code>b</code>：设置断点   <code>b main</code> <code>b 92</code></li><li><code>watch</code>：设置监视点</li><li><code>help xxx</code>：查看<code>xxx</code>命令的帮助</li><li><code>layout src</code>：查看源代码</li><li><code>layout split</code>：查看汇编代码</li><li><code>ctrl + p / n</code>回溯历史命令</li></ul><h3 id="debug">Debug</h3><ul><li>layout模式下容易出现花屏现象，使用 <code>ctrl + l</code> 进行清屏</li></ul><h2 id="cgdb"><a href="https://cgdb.github.io/">cgdb</a></h2><h2 id="pdb"><a href="https://blog.csdn.net/qq_43799400/article/details/122582895">pdb</a></h2><h2 id="bsub">bsub</h2><h3 id="basic">Basic</h3><ul><li><code>busers</code>：查看用户提交的任务的运行、排队情况</li><li><code>bjobs -all &gt; job.log</code>：查看用户正在运行的job记录</li></ul><h2 id="sort"><a href="https://www.runoob.com/linux/linux-comm-sort.html">sort</a></h2><h2 id="uniq"><a href="https://blog.csdn.net/qq_43382735/article/details/121007185">uniq</a></h2><h2 id="pandoc">pandoc</h2><ol><li><a href="https://blog.csdn.net/qq_27464321/article/details/88853270">tex2word</a></li></ol><h2 id="other">other</h2><ol><li><code>gio open xxx.xlsx</code></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;tools&quot;&gt;Tools&lt;/h1&gt;
&lt;h2 id=&quot;vim&quot;&gt;vim&lt;/h2&gt;
&lt;h3 id=&quot;basic&quot;&gt;Basic&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;单词的大小写转换： &lt;code&gt;(visual mode) &amp;lt;U&amp;gt; &amp;amp; &amp;lt;u&amp;gt;&lt;/</summary>
      
    
    
    
    
    <category term="工作" scheme="https://planckzgh.github.io/tags/%E5%B7%A5%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>gdb简明教程</title>
    <link href="https://planckzgh.github.io/2024/08/06/gdb%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B/"/>
    <id>https://planckzgh.github.io/2024/08/06/gdb%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B/</id>
    <published>2024-08-06T06:18:12.000Z</published>
    <updated>2024-08-06T06:21:50.335Z</updated>
    
    <content type="html"><![CDATA[<h1 id="make-gdb"><code>make gdb</code></h1><ul><li><code>x</code>：扫描内存</li><li><code>b</code>：设置断点</li><li><code>c</code>：继续执行程序</li><li><code>r</code>：重新开始执行程序</li><li><code>s</code>：单步执行且进入函数</li><li><code>n</code>：单步执行但不进入函数</li><li><code>p</code>：打印变量或寄存器的值</li><li><code>bt</code>：查看调用栈</li><li><code>watch</code>：设置监视点</li><li><code>finish</code>：跳出当前函数</li><li><code>layout src</code>：查看源代码</li><li><code>layout split</code>：查看汇编代码</li><li><code>ctrl + p / n</code>：回溯历史命令</li><li><code>help xxx</code>：查看<code>xxx</code>命令的帮助</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;make-gdb&quot;&gt;&lt;code&gt;make gdb&lt;/code&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;x&lt;/code&gt;：扫描内存&lt;/li&gt;
&lt;li&gt;&lt;code&gt;b&lt;/code&gt;：设置断点&lt;/li&gt;
&lt;li&gt;&lt;code&gt;c&lt;/code&gt;：继续执行程序&lt;/li&gt;
&lt;</summary>
      
    
    
    
    
    <category term="教程" scheme="https://planckzgh.github.io/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>数字IC试题</title>
    <link href="https://planckzgh.github.io/2024/07/30/%E6%95%B0%E5%AD%97IC%E8%AF%95%E9%A2%98/"/>
    <id>https://planckzgh.github.io/2024/07/30/%E6%95%B0%E5%AD%97IC%E8%AF%95%E9%A2%98/</id>
    <published>2024-07-29T16:18:39.000Z</published>
    <updated>2024-07-29T16:29:42.519Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数字ic笔试模拟题-一">数字IC笔试模拟题（一）</h1><h2 id="选择题">选择题</h2><hr><p><strong>03:</strong> 关于异步处理，以下说法正确的是：</p><p>A． 静态配置信号可以不做异步处理</p><p>B． 异步FIFO采用采用格雷码的原因是提高电路速度</p><p>C． 异步处理需要考虑发送和接送时钟之间的频率关系</p><p>D． 单比特打俩拍后可以避免亚稳态发生</p><p><em><strong>解析</strong></em></p><p>静态信号不变化，即使跨时钟也不变化，不会有亚稳态；<br>异步FIFO采用格雷码的原因是格雷码相邻两位只有一位变化，这样可以方便处理信号；<br>异步处理需要考虑不同时钟域之间的信号传递；<br>单比特打拍可以减少亚稳态发生。</p><p>答案：AC</p><hr><ol start="5"><li>从综合出电路的电路看第一段代码比第二段代码优化的地方是（）</li></ol><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一段代码：</span></span><br><span class="line"><span class="keyword">always</span> @(<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">negedge</span> rst_n) <span class="keyword">begin</span></span><br><span class="line"><span class="keyword">if</span>(!rst_n)</span><br><span class="line">    D &lt;= <span class="number">1&#x27;b0</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(A &amp; B)</span><br><span class="line">    D &lt;= A + B;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">// 第二段代码：</span></span><br><span class="line"><span class="keyword">always</span> @(<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">negedge</span> rst_n) <span class="keyword">begin</span></span><br><span class="line"><span class="keyword">if</span>(!rst_n) </span><br><span class="line">    D &lt;= <span class="number">1&#x27;b0</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(A &amp; B)</span><br><span class="line">    D &lt;= A + B;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    D &lt;= <span class="number">1&#x27;b0</span>;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>A. 第一段代码比第二段代码简练，方便综合</p><p>B. 第一段代码比第二段代码省功耗</p><p>C. 第一段代码比第二段代码电路简单</p><p>D. 第一段代码比第二段代码易于理解和实现</p><p><em><strong>解析</strong></em></p><p>答案：B</p><hr><p><strong>07:</strong> Generate语句中的循环控制变量应该定义为integer类型（）</p><p>A.     正确</p><p>B.     错误</p><p><em><strong>解析</strong></em></p><p>generate 循环的语法与 for 循环语句的语法很相似。但是在使用时必须先在 genvar 声明中声明循环中使用的索引变量名，然后才能使用它。 genvar 声明的索引变量被用作整数用来判断 generate 循环。 genvar 声明可以是 generate 结构的内部或外部区域，并且相同的循环索引变量可以在多个 generate 循环中，只要这些环不嵌套。</p><p>答案：B</p><hr><p><strong>08:</strong> 同步复位需要进行 Recovery 和 Removal 检查，异步复位不需要进行 Recovery 和 Removal 检查</p><p>A.     正确</p><p>B.     错误</p><p><em><strong>解析</strong></em></p><p>异步复位信号具有随机性，它可能会随时出现也会随时消失，这将导致他有可能不满足 recovery 和 removal 检查的问题。一般用异步复位同步释放的方法，这样可以减小亚稳态出现的概率</p><p>答案：B</p><hr><p><strong>11:</strong> 以下说法关于低功耗的说法不正确的是（）</p><p>A.     Clock gating 可以降低芯片功耗</p><p>B.     采用合理的 Power gating 方案可以降低功耗</p><p>C.     通过降低数据的翻转率可以降低功耗</p><p>D.     无论设计大小，一律采用先进工艺</p><p><em><strong>解析</strong></em></p><ul><li>clock gating: 时钟门控技术，用于关闭不需要执行操作时的特定电路的时钟信号，以降低数字电路的功耗；</li><li>power gating: 电源门控技术，用于关闭电路的电源供应以降低功耗；</li></ul><p>前面三种是设计要考虑的降低功耗的方法。第四种情况，并不是说工艺越先进，功耗就越低。</p><p>答案: D</p><hr><p><strong>12:</strong> 下列关于综合的说法哪项是不正确的（）</p><p>A.     综合由translation和mapping两个步骤组成</p><p>B.     综合(synthesis) 简单的说就是将HDL代码转化为门级网表的过程</p><p>C.     Mapping把用GTECH库元件构成的电路映射到某一特定厂家的工艺库上</p><p>D.     Translation是指把HDL语言描述的电路转化为GTECH库元件组成的逻辑电路的过程</p><p><em><strong>解析</strong></em></p><p>逻辑综合的行为是将数字电路的寄存器传输级描述（RTL，Register Transfer Level）“综合”成门级网表（Gate-Level Netlist）。Design Compiler 将 RTL 和根据设计需求编写的约束文件作为输入综合出门级网表，在性能、面积和功耗之间进行 trade-offs。后端 Place &amp; Route 工具（ICC、Innovus）将门级网表作为输入生成 GDSII 文件用于芯片制造。</p><p>逻辑综合的步骤为：翻译-&gt;优化-&gt;映射。其中，read_verilog将RTL翻译成GTECH，compile进行综合，也就是优化和映射成工艺相关的门级网表。</p><p>答案：A</p><hr><p><strong>13：</strong> 以下工艺器件中，电阻值的最大的是（）</p><p>A. AA</p><p>B. Contact</p><p>C. Poly</p><p>D. VIA</p><p><em><strong>解析</strong></em></p><p>AA：有源区，Contact：接触孔；，Poly：栅极；Via：通孔</p><p>答案：C</p><hr><p><strong>15：</strong> 流水线设计的优点是（）</p><p>A.     综合后电路的面积可以更小</p><p>B.     综合后电路的时钟频率可以更高</p><p>C.     综合后电路的复杂度更低</p><p>D.     综合后地哪里的功耗更低</p><p><em><strong>解析</strong></em></p><p>PIPELINE的设计就是将串行操作变成并行操作，这样可以提高吞吐率，提高时钟频率，改善时序。但同时也会导致数据延时，功耗增加，面积可能会增大（也有面积减少的情况），设计变复杂。</p><p>答案：B</p><hr><p><strong>16：</strong> 关于冯诺依曼结构和哈佛结构的描述中，错误的是（）</p><p>A.     冯诺依曼结构的计算机中数据和程序共用一个存储空间</p><p>B.     冯诺依曼结构中程序计数器负责提供程序执行所需要的地址</p><p>C.     哈佛结构的计算机在一个机器周期内可同时获得指令和操作数</p><p><strong>D.     哈佛结构中取指令和执行不能完全重叠</strong></p><p><em><strong>解析</strong></em></p><p>冯诺依曼结构是一种将程序指令存储器和数据存储器合并在一起的存储器结构。取指令和取操作数都在同一总线上，通过分时复用的方式进行；缺点是在高速运行时，不能达到同时取指令和取操作数，从而形成了传输过程的瓶颈。由于程序指令存储地址和数据存储地址指向同一个存储器的不同物理位置，因此程序指令和数据的宽度相同。</p><p>哈佛结构是一种将程序指令存储和数据存储分开的存储器结构，它的主要特点是将程序和数据存储在不同的存储空间中，即程序存储器和数据存储器是两个独立的存储器，每个存储器独立编址、独立访问，目的是为了减轻程序运行时的访存瓶颈。</p><p>答案：D</p><hr><p><strong>17：</strong> 摩尔定律中写道，IC上可容纳晶体管数量约每多少个月增加一倍?</p><p>A、10个月</p><p>B、12个月</p><p>C、18个月</p><p>D、24个月</p><p><em><strong>解析</strong></em></p><p>摩尔定律是英特尔创始人之一戈登·摩尔的经验之谈，其核心内容为：集成电路上可以容纳的晶体管数目在大约每经过18个月便会增加一倍。</p><p>答案：C</p><hr><p><strong>19：</strong> 对于一个芯片而言，如下哪些参数的值越高越好：( )</p><p>A. MTBF<br>B. ATE pattern count<br>C. Fault coverage<br>D. Yield</p><p><em><strong>解析</strong></em></p><p>A选项。MTBF 全程Mean Time Between Failure，为平均无故障工作时间，是衡量电器产品的可靠性指标，单位为小时。它反映了产品的时间质量，是体现产品在规定时间内保持功能的一种能力。A选项正确。</p><p>B选项。ATE 全称Auto Test Equipment。ATE pattern count为集成电路IC测试机台的测试的pattern数量， B选项正确。</p><p>C选项。Fault coverage为故障覆盖率。可以用故障覆盖率的大小来衡量被测芯片测试质量和测试程序的质量。Fault coverage越高，测试结果的失误越小。C选项正确。</p><p>D选项。Yield表示芯片的良率分析，即合格率，是质量指标之一。D选项正确。</p><p>答案：ABCD</p><hr><h2 id="简答题">简答题</h2><p>根据自己的理解列出经典处理器 CPU 执行大致阶段， 以及各阶段的大致行为</p><p>以五级流水线CPU为例，CPU执行大致分为五个阶段：</p><ol><li>取指令（IF）：根据PC的值从存储器取出指令并更新PC。</li><li>指令译码（ID）：产生指令执行所需要的控制信号。</li><li>取操作数（OF）：读取存储器操作数或寄存器操作数。</li><li>执行（EX）：对操作数完成指定操作。</li><li>写回（WB）：将操作数结果写入寄存器或存储器。</li></ol><h1 id="数字ic笔试模拟题-二">数字IC笔试模拟题（二）</h1><p><strong>单选题</strong></p><hr><p><strong>07:</strong>  下面哪个部分不是IC设计前端的FLOW？</p><p>A．  门级验证</p><p>B.   综合</p><p>C.   布局布线</p><p>D．  RTL设计</p><p><em><strong>解析</strong></em></p><p>布局布线属于后端</p><hr><p><strong>08:</strong>  下面哪个是最简单的逻辑门？</p><p>A．   与非门</p><p>B.    与门</p><p>C．   或门</p><p>D．   非门</p><p><em><strong>解析</strong></em></p><p>最简单的逻辑门是非门。如果是CMOS电路，一个非门需要两个晶体管（上NMOS下PMOS）。<br>与非门和或非门每种包含四个晶体管。<br>与门和或门每种包含六个晶体管。</p><p><em><strong>关键考点：逻辑门结构</strong></em></p><hr><p><strong>13:</strong>  7nm工艺中的7nm指的是（）</p><p>A.  芯片中最小晶体管的源极长度.</p><p>B.  芯片中最小晶体管的源极宽度.</p><p>C.  芯片中最小单元的沟道长度.</p><p>D.  芯片中最小单元的源极宽度.</p><p><em><strong>解析</strong></em></p><p>沟道长度 = Channel Length 栅极长度 = Gate Lengh。<br><img src="/imgs/e43345690e9a40afba0a2cf8fed1fcbd.png" alt="0098b20456fdeef128aae76aa13e8001.png"><br>因此我们常听到的7nm芯片指的就是沟道长度，但由于它不容易观测，且栅极长度更直观并近似沟道长度（栅极长度&gt;沟道长度），所以有的题目中会将栅极长度替代为沟道长度。</p><h2 id="关键考点：晶体管结构"><em><strong>关键考点：晶体管结构</strong></em></h2><p><strong>15:</strong>  下列哪种路径可以检测出故障？<br><img src="/imgs/6228a357631d461594820b8685f0ed9d.png" alt="d1055bd7c275ef455bcf8a05a3fbb282.png"></p><p>A.     A=1, B=1, C=0, D=0</p><p>B.     A=1, B=1, C=1, D=1</p><p>C.     A=0, B=0, C=1, D=1</p><p>D.     A=0, B=1, C=0, D=1</p><p><em><strong>解析</strong></em></p><p><strong>对于此道检测故障题，从输出端开始分析</strong>。由于输出端连接了一个OR或门，则路径①与路径②的数值有四种情况：00， 01， 10， 11. 在这些情况中，<strong>只有00输入可以导致Z的值为0.</strong> 对于AND与门，当D的值stuck at 0时，不论C的数值为0还是1，路径②的值为0；当D端无故障时，当C与D的值都为1时，路径②为1。因此可以结合或门与与门的特性对四个端口进行赋值： <strong>使端口①数值为0，这时端口②的数值将会直接影响到输出Z</strong>。因此，A=B=0; <strong>当检测D是否stuck at 0时，我们把它设置为1，C=D=1</strong>。</p><p><strong>观察输出端口Z，如果Z =0，则无故障，如果Z=1，则D端故障。</strong></p><p><em><strong>关键考点：故障路径分析</strong></em></p><hr><p><strong>17：</strong>  对12.918做无损定点化，需要的最小位宽是多少位，位宽选择11位时的量化误差是多少？</p><p>A.  12位，0.0118</p><p>B.  13位，0.0039</p><p>C.  12位，0.0039</p><p>D.  13位，0.0118</p><p><em><strong>解析</strong></em></p><p>量化误差小于量化精度的一半，认为是“无损量化”。对于12.918，需要分别对整数部分与小数部分进行量化。 整数部分12，需要4bits量化（0-15）。<br>小数部分0.918， 如果使用12位量化，可以比较量化误差是否小于量化精度的一半。整数部分已经用去4个bits，还剩12-4=8bits，总共可以表示28=256个刻度，每个刻度的间隔为1/256= 0.00390625，这个值也称作量化精度。这时小数部分需要0.918/(1/256) = 235.008个刻度来表示，取整位235，误差为0.008个刻度，量化误差为0.008 x (1/256) = 0.00003125。此时误差大小明显小于量化精度的一半，因此被认为是无损量化。</p><p>当使用11位量化时，小数部分只能使用7位量化，27=128个刻度，每个刻度的间隔是1/128。这时小数部分需要0.918/(1/128) = 117.504个刻度来表示，取整位118，误差为0.496个刻度，量化误差为0.496 x (1/128) = 0.003875，量化误差大于量化精度的一般，因此不能使用11位位宽来达到无损量化。当使用11位位宽时，量化误差0.003875，<strong>四舍五入后对应选项C</strong> 。</p><p><em><strong>关键考点：量化误差</strong></em></p><hr><p><strong>18：</strong>  关于流水线设计的理解，错误的是：</p><p>A.  流水线设计会消耗较多的组合逻辑资源。</p><p>B.  流水线设计会导致原有通路延时增加。</p><p>C.  流水线设计的思想，是使用面积换取速度。</p><p>D.  关键路径中插入流水线，能够提高系统时钟频率。</p><p><em><strong>解析</strong></em></p><p>流水线通过插入触发器去将延迟比较大的组合逻辑分割成N块，<strong>消耗了更多的触发器，理论上不会消耗更多的组合逻辑资源</strong>，A错。但是由于增加了寄存器，会在原数据通路上增加延时，彼时硬件的面积也会有所增加。但是整体来说，通过流水线设计，可以避免在两个触发器之间出现过大的延时，消除速度瓶颈，这样可以提高电路的工作频率。</p><hr><p><strong>19：</strong> 关于DFT的描述错误的是：</p><p>A.  DFT测试不能覆盖电路时序问题</p><p>B.  DFT测试过程通常会消耗大量的动态功耗</p><p>C.  DFT的主要目的是发现芯片生产过程中出现的缺陷</p><p>D.  寄存器扫描链是一种常用的DFT技术</p><p><em><strong>解析</strong></em></p><ul><li><p>DFT 能够覆盖电路时序问题。DFT 的 Scan Chain 扫描链：针对时序电路，测试寄存器（Flip-Flop）和组合逻辑。</p></li><li><p>DFT 里涉及大量 MUX 选择开关，因此会消耗大量的动态功耗。</p></li><li><p>DFT 是一种为达到故障检测目的所进行的辅助性设计方法，使制作完成后的芯片能达到&quot;可控制性&quot;和&quot;可测试性&quot;两个目的。</p></li><li><p>Scan Chain（扫描链）的插入，目的是将普通寄存器换成扫描寄存器（scan Flip Flop）的过程，是使用最广泛的DFT技术之一。</p></li></ul><hr><p><strong>21:</strong> 对芯片静态功耗影响最大的是哪一项</p><p>A. 工作模式</p><p>B. 频率</p><p>C. 负载</p><p>D. 电压</p><p><em><strong>解析</strong></em></p><p><strong>静态功耗 = 静态工作电流 * 工作电压</strong></p><p>影响静态功耗的主要因素：漏电流与工作电压，其中漏电流与工艺有关。</p><p><em><strong>关键考点：静态功耗计算，注意与动态功耗不要混淆。</strong></em></p><hr><p><strong>22：</strong> 在对信号做降采样前添加滤波器，一般需要添加什么样的滤波器，完成什么功能？</p><p>A.  高通，抗周期延拓</p><p>B.  高通，抗混叠滤波</p><p>C.  低通，抗周期延拓</p><p>D.  低通，抗混叠滤波</p><p><em><strong>解析</strong></em></p><p>对信号进行离散化采集前采用低通滤波滤除高于1、2采样频率的成分，低通滤波器可以抗混叠滤波，也叫抗混叠滤波器。</p><p><strong>关键考点：滤波器分类与功能</strong></p><hr><p><strong>23:</strong>  如下关于“线与”逻辑的描述，错误的是：</p><p>A.  可以使用 OC 门来实现“线与”</p><p>B.  “线与”逻辑必须在输出端加一个下拉电阻</p><p>C.  “线与”逻辑是两个输出信号相连可以实现“与”的功能</p><p>D.  可以使用 OD 门来实现“线与”</p><p><em><strong>解析</strong></em></p><p><strong>线与逻辑是两个输出信号相连可以实现与的功能。在硬件上，要用OC（集电极开路门）门来实现</strong>。同时在输出端口应加一个上拉电阻。</p><hr><p><strong>26:</strong> 新的technology node边长大约是之前的多少%来达到面积缩小一半？( )</p><p>A.    60%</p><p><strong>B.    70%</strong></p><p>C.    50%</p><p>D.    80%</p><p><em><strong>解析</strong></em></p><p>技术节点（也是工艺节点、工艺技术或简单节点）是指具体的半导体制造工艺及其设计规则。一般来说，技术节点越小意味着特征尺寸越小，速度越快，功率效率越高。</p><p>每个节点的接触多晶硅节距（CPP）和最小金属节距（MMP）需要按大约0.7倍的比例缩放。换句话说，缩放比例为(0.7x CPP) x(0.7x MMP)近似等于0.5倍的面积。</p><p><em><strong>关键考点：对先进工艺的了解以及技术节点概念的考察</strong></em></p><hr><p><strong>28：</strong>  对于有符号的4位二进制数运算0101+1000，其十进制结果为( )</p><p>A.  12</p><p><strong>B.  -3</strong></p><p>C.  13</p><p>D.  -4</p><p><em><strong>解析</strong></em></p><p>1000在数电中不表示-0，而是用来表示-8的补码，1111表示-8的反码.因此此题答案为5-8 = -3。</p><p><em><strong>关键知识点：对原码，补码和反码的掌握和转化能力</strong></em></p><hr><p><strong>30：</strong> 下列说法错误的是（）</p><p>A．条件语句，如果无优先级关系，尽量采用case，避免多级else if，影响时序。</p><p>B. if/else语句配对使用，case语句加default项；组合逻辑中在所有条件下都要对信号赋值，如果要保持步便用a=a方式赋值。</p><p>C. 两个向量进行比较操作或加减操作或赋值操作时，两个向量的位宽要相等，避免隐式扩展。</p><p><strong>D.</strong>  <strong>可综合代码中，除了<strong><strong>for</strong></strong>语句中的循环变量可以定义为<strong><strong>integer</strong></strong>型以外，所有变量和信号都只能为<strong><strong>wire</strong></strong>或<strong><strong>reg</strong></strong>型，不能定义为整型，实数型，无符号型，<strong><strong>realtime</strong></strong>型和<strong><strong>time</strong></strong>型。</strong></p><p><em><strong>解析</strong></em></p><p>A正确。优先级条件语句会综合成串联的选择逻辑，时序较差，而case可以综合成并行的选择逻辑。</p><p>B正确。一般情况下if/else要配对使用，case语句要加default，避免综合成latch，个别情况下不需要，小编认为题干应该加上“建议”这个词更为精确。组合逻辑在所有条件下都要对信号进行赋值，否则会综合成latch。</p><p>C正确。两个向量位宽不匹配会隐式拓展高位，如果有操作数定义为wire类型但是作为有符号数使用，隐式拓展会错误高位补0，拓展成无符号数。</p><p>D错误。<strong>integer可以被定义成信号，会综合出32bit的register。但因为位宽固定，一般不这么使用</strong>。另外在verilog-2001中加入了<strong>无符号型和有符号型的reg/wire定义，也属于可综合类型</strong>。</p><h2 id="多选题">多选题</h2><p><strong>01：</strong> 电迁移通常是指在电场作用下使金属离子发生迁移的现象。如下影响电迁移率的因素有（）</p><p>A. 电流密度</p><p><strong>B.</strong> <strong>温度</strong></p><p>C. 芯片面积</p><p><strong>D.</strong> <strong>晶体结构</strong></p><p><em><strong>解析</strong></em></p><p>在恒定电场作用下，电流密度是恒定的，所以与电流密度无关。电迁移通常是指在电场作用下使金属离子发生迁移的现象，影响电迁移率的因素：<strong>温度，晶体结构。</strong></p><hr><p><strong>02：</strong>  在不增加pipeline的情况下，如何解决一条critical path的 setup 时序不满足的问题</p><p><strong>A.</strong> <strong>使用更先进工艺的工艺库</strong></p><p>B. 在这条path上插入寄存器</p><p><strong>C.</strong> <strong>将部分组合逻辑电路搬移到前级<strong><strong>path</strong></strong>上</strong></p><p><strong>D.</strong> <strong>降低时钟频率</strong></p><p><em><strong>解析</strong></em></p><p>不考虑时钟抖动和偏移的情况下，setup的公式为**：**</p><p><strong>Tsetup ≤ Tclk - Tco(max) - Tcomb(max）</strong></p><p>Tclk 是时钟周期，Tco 是寄存器输出的响应时间，Tcomb 是寄存器之间的组合逻辑延时。根据以上公式，如果想要增大setup，可以</p><ul><li>增加Tclk，即增大时钟周期，降低时钟频率，D正确</li><li>减小Tco，减小寄存器输出的响应时间，可以通过使用更先进的工艺解决。A正确</li><li>减小Tcomb，减小寄存器之间的组合逻辑延时，B和C都是正确的解决方法。但是题目强调“不增加pipeline”，因此B的方法不可行，C正确<br><em><strong>关键知识点： 时序违例及解决方法。（包括setup与hold，它们俩是相互影响的，在实际操作中都要考虑进去，但一般来说，hold比setup优先考虑）</strong></em></li></ul><hr><p><strong>05：</strong> 下列优化方法中那些是速度优化方法：</p><p>A.  资源共享</p><p><strong>B.</strong>  <strong>关键路径优化</strong></p><p><strong>C.</strong>  <strong>流水线</strong></p><p>D.  串行化</p><p><em><strong>解析</strong></em></p><p>速度优化方法包括流水线，寄存器配平和关键路径优化等方法。BC正确。</p><p>资源共享，串行化与逻辑优化属于面积优化。</p><hr><p><strong>06：</strong>  下面哪些属于动态验证范畴( )</p><p>A． 形式验证</p><p><strong>B</strong>． Modelsim仿真</p><p><strong>C</strong>． 后仿</p><p>D． STA</p><p><em><strong>解析</strong></em></p><p>A错误。形式验证是一种静态的验证手段，它根据电路结构静态地判断两个设计在功能上是否等价，常用来判断一个设计在修改前和修改后其功能是否保持一致。</p><p>B正确。Modelsim仿真中既可以功能仿真（静态），也可以时序仿真（动态）。</p><p>C正确。动态主要保证逻辑功能真确（前仿真保证RTL逻辑功能真确，后仿保证加入时序信息后，逻辑功能依旧真确），后仿属于动态验证。</p><p>D错误。STA = 静态时序分析</p><p><em><strong><strong>关键知识点：静态验证与动态验证归类</strong></strong></em></p><hr><p><strong>07：</strong>  <strong>芯片的工作条件主要是指（）</strong></p><p><strong>A.</strong>  <strong>工艺</strong></p><p><strong>B.</strong>  <strong>电压</strong></p><p><strong>C.</strong>  <strong>温度</strong></p><p>D.  湿度</p><p><em><strong>解析</strong></em></p><p>工艺对芯片性能有影响，温度对数字IC芯片阈值电压Vt有影响，电压会影响工作速度。芯片供电电压降低后，芯片会变慢。综上所述，芯片的工作条件主要受PVT影响（process, voltage, temperature)。</p><hr><p><strong>10:</strong>  以下描述正确的是（）</p><p><strong>A. 触发器按结构形式分为：基本RS触发器、时钟RS触发器、主从结构触发器、边沿触发器等</strong></p><p><strong>B. 触发器按功能分有：RS触发器、JK触发器、D触发器、T触发器等</strong></p><p><strong>C. 触发器是能够记忆一位二值信号的基本逻辑单元，是构成各种数字系统的基本逻辑单元触发器</strong></p><p>D. 触发器都有保持和反转功能</p><p><em><strong>解析</strong></em></p><p>触发器按逻辑功能不同分为：RS触发器、D触发器、JK触发器、T触发器。按触发方式不同分为：电平触发器、边沿触发器和脉冲触发器。按电路结构不同分为：基本RS触发器和钟控触发器。按存储数据原理不同分为：静态触发器和动态触发器；按构成触发器的基本器件不同分为：双极型触发器和MOS型触发器。选项AB正确。</p><p>触发器是能够记忆与存储一位二值信号的基本单元电路，选项C正确。</p><p><strong>D触发器是一种最简单的触发器，并没有翻转的功能</strong>，D错误。</p><p><em><strong><strong>关键考点：触发器的分类与结构</strong></strong></em></p><h1 id="数字ic笔试模拟题-三">数字IC笔试模拟题（三）</h1><h2 id="知识点总结">知识点总结</h2><ol><li>格雷码的优势</li><li>MUX电路对应的HDL</li><li>SVA语法知识</li><li>静态功耗</li></ol><h2 id="选择题">选择题</h2><p><strong>04：</strong>  异步设计的特点</p><p>A．   无时钟skew问题</p><p>B．   可增值性高</p><p>C．   低电源消耗</p><p>D．   设计可靠性高</p><p><em><strong>解析</strong></em></p><p>异步电路的优点是无时钟偏移（Skew）问题、低电源消耗、平均效能而非最差效能、模块性、可组合和可复用性。异步电路设计的缺点是可靠性差，不容易移植，且不能进行静态时序分析（STA）。</p><p>答案：AC</p><hr><p><strong>06:</strong>  只使用2选1 mux实现异或逻辑，最少需要（）个mux</p><p>A.     4</p><p>B.     3</p><p>C.     1</p><p>D.     2</p><p><em><strong>解析</strong></em></p><ol><li>理解二输入MUX的逻辑表达：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>Z</mi><mo>=</mo><mi>X</mi><mo stretchy="false">?</mo><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo><mo>:</mo><mo stretchy="false">(</mo><mn>0</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Z=X?(1):(0)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">Z</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mclose">?</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">0</span><span class="mclose">)</span></span></span></span></li><li>理解异或门和非门的逻辑表达：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>Y</mi><mo>=</mo><mi>A</mi><mo>⊕</mo><mi>B</mi><mo>=</mo><mi>A</mi><mover accent="true"><mi>B</mi><mo>ˉ</mo></mover><mo>+</mo><mover accent="true"><mi>A</mi><mo>ˉ</mo></mover><mi>B</mi><mo>=</mo><mi>A</mi><mo stretchy="false">?</mo><mo stretchy="false">(</mo><mi>B</mi><mo stretchy="false">)</mo><mo>:</mo><mo stretchy="false">(</mo><mover accent="true"><mi>B</mi><mo>ˉ</mo></mover><mo stretchy="false">)</mo><mo>=</mo><mi>A</mi><mo stretchy="false">?</mo><mo stretchy="false">(</mo><mi>B</mi><mo stretchy="false">)</mo><mo>:</mo><mo stretchy="false">(</mo><mi>B</mi><mo stretchy="false">?</mo><mn>0</mn><mo>:</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Y=A\oplus B=A\bar{B}+\bar{A}B=A?(B):(\bar{B})=A?(B):(B?0:1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.9034399999999999em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">A</span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8201099999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05017em;">B</span></span></span><span style="top:-3.25233em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.16666em;"><span class="mord">ˉ</span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8201099999999999em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8201099999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">A</span></span></span><span style="top:-3.25233em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.11110999999999999em;"><span class="mord">ˉ</span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">A</span><span class="mclose">?</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.07011em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8201099999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05017em;">B</span></span></span><span style="top:-3.25233em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.16666em;"><span class="mord">ˉ</span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">A</span><span class="mclose">?</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mclose">?</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span></li></ol><p>答案：D</p><hr><p><strong>08：</strong>  <strong>异步FIFO中，指针编码应该使用什么编码方式</strong></p><p>A.  One-hot</p><p>B.  One-cold</p><p>C.  Binary</p><p>D.  Gray</p><p><em><strong>解析</strong></em></p><p>异步FIFO读写指针一般用格雷码</p><p>答案：D</p><hr><p><strong>09:</strong>  <strong>在工作过程中，如果芯片过热，需要动态降低功耗开销，下面哪个方法不能实现这个功能</strong></p><p>A.     降低芯片工作电压</p><p>B.     降低芯片工作频率</p><p>C.     增加低功耗cell比率</p><p>D.     使能芯片时钟门控</p><p><em><strong>解析</strong></em></p><p>由 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>P</mi><mrow><mi>s</mi><mi>w</mi><mi>i</mi><mi>t</mi><mi>c</mi><mi>h</mi></mrow></msub><mo>=</mo><mi>α</mi><mi>C</mi><msubsup><mi>V</mi><mrow><mi>D</mi><mi>D</mi></mrow><mn>2</mn></msubsup><mi>f</mi></mrow><annotation encoding="application/x-tex">P_{switch}=\alpha C V_{DD}^2f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">s</span><span class="mord mathdefault mtight" style="margin-right:0.02691em;">w</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">t</span><span class="mord mathdefault mtight">c</span><span class="mord mathdefault mtight">h</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.089439em;vertical-align:-0.275331em;"></span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-2.424669em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">D</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">D</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.275331em;"><span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span></span></span></span> 可知降低芯片工作电压以及芯片工作频率可以降低动态功耗，时钟门控也可以降低动态功耗。</p><p>答案：C</p><hr><p><strong>10：</strong>  以下不是SVA语法的是（）</p><p>A．      $rose</p><p>B．      Property</p><p>C．      Class</p><p>D．      Cover</p><p><em><strong>解析</strong></em></p><p><em><strong>关键知识点：当考点记住就行。</strong></em></p><p>答案：C</p><hr><p><strong>11:</strong>  以下关于false-path，正确的是（）</p><p>A．  一般异步电路可以设置为false path</p><p>B．  一般异步复位可以设置为false path</p><p>C．  一般模拟IP和系统的互联接口都可以设置为false path</p><p>D．  两个不同频率之间的接口一定可以设置为false path</p><p><em><strong>解析</strong></em></p><p><strong>false_path是不希望工具分析的路径</strong>，第一种情况一般是异步路径，即跨时钟域的路径。第二种情况一般是从逻辑上考虑的与电路正常工作不相关的那些路径。</p><p>答案：A</p><hr><p><strong>13：</strong>  使用相同时钟沿的同步数字电路，以下因素和最高工作频率无关的是（）</p><p>A．  逻辑块间互联布线长度</p><p>B．  触发器的建立/保持时间</p><p>C．  D触发器之间最长的组合逻辑</p><p>D．  时钟低电平持续时间</p><p><em><strong>解析</strong></em></p><p>同步数字电路的最高频率主要取决于关键路径是否能够收敛，与逻辑块之间的布线长度，触发器建立/保持时间和D触发器之间最长的组合逻辑都相关。但是时钟的低电平持续时间主要影响到时钟信号的有效性。如果时钟信号可能会造成逻辑功能出错，和最高工作频率无关。</p><p>答案：D</p><hr><p><strong>17：</strong>  下面哪些属于动态验证范畴( ).</p><p>A.  形式验证</p><p>B.  Modelsim仿真</p><p>C.  后仿</p><p>D.  STA</p><p><em><strong>解析</strong></em></p><p>A选项。形式验证是一种静态的验证手段，它根据电路结构判断两个设计在功能上是否等价。</p><p>B选项。Modelsim仿真中既可以静态仿真，也可以动态仿真。</p><p>C选项。后仿真也称为时序仿真，门级仿真，在芯片布局布线后将时序文件SDF反标到网标文件上，针对带有时序信息的网标仿真称为后仿真，<strong>属于动态时序分析</strong>。</p><p>D选项。Sta为静态时序分析。</p><h2 id="简答题">简答题</h2><hr><p><strong>18：</strong>  时序约束中, setup violation和hold violation的常见原因是什么?</p><p><em><strong>解析</strong></em>：<br>建立时间不满足要求通常是因为组合逻辑处理时间太长，保持时间不满足要求通常是因为组合逻辑处理时间太短！</p><p>解决建立时间不满足的方法有如下∶</p><ul><li>加强约束，重新进行综合，对违规的路径进行进一步的优化，但是一般效果可能不是很明显</li><li>降低时钟的频率，但是这个一般是在项目最初的时候决定的，这个时候很难再改变</li><li>拆分组合逻辑，插入寄存器，增加流水线，这个是常用的方法</li><li>优化布局布线，减小传输的延时</li></ul><p>解决保持时间不满足的方法有如下∶</p><ul><li>增加组合逻辑的处理时间，一般就是在后端的时候插入butffer</li><li>减小时钟的延时</li></ul><p><strong>20：</strong>  阈值电压 Vt 对静态功耗有什么影响？对电路速度有什么影响？</p><p><em><strong>解析</strong></em>：</p><ul><li>HVt可以有效地降低静态功耗，但电路的速度会降低。</li><li>LVt可以提高电路的速度，但是静态功耗会增大。</li></ul><h1 id="数字ic笔试模拟题-四">数字IC笔试模拟题（四）</h1><h2 id="总结">总结</h2><ol><li>rtl的综合过程</li><li>浮点数，补码，反码等小数整数负数的表示方法</li><li>verilog 可综合不可综合</li><li>moor和mealy状态机</li></ol><h2 id="选择题">选择题</h2><p><strong>01:</strong>  下面那个功能不是在综合过程中实现的（  ）</p><p>A.     translate</p><p>B.     DFX insert</p><p>C.     retiming</p><p>D.     mapping</p><p><em><strong>解析</strong></em></p><p>translate，retiming，mapping是综合里的步骤</p><ul><li>retiming 是一种优化技术，用于调整电路中的寄存器位置，改善时序性能</li></ul><p>答案：B</p><hr><p><strong>02:</strong>  A、B两个模块属于同一时钟域，分别可以访问一片two-port SRAM的两个端口，当A、B通过两个端口同时访问同一个地址单元，则（）</p><p>A.读写都可能失败</p><p>B.可以正常写入，也可正常读出，但读出的是该单元写入之前的值</p><p>C.可以正常写入，但读出数据可能写入前该单元的数据，也可能是最新的数据</p><p>D.可以正常读出，但不能写入</p><p><em><strong>解析</strong></em></p><p>同时钟域内，双端口SRAM分别被两个模块同时驱动一个地址单元，那么读写都可能失败，因此在设计过程中，我们要避免这种情况。</p><p>答案：A</p><hr><p><strong>03:</strong>  某个状态下，不关心某个寄存器的输出值，<strong>最优的</strong>低功耗设计方法是将其固定为0或1，可以降低动态功耗（）</p><p>A． 正确</p><p>B． 错误</p><p><em><strong>解析</strong></em></p><p>固定 0 或者 1 确实可以减少翻转次数，从而降低动态功耗，但是固定到 1 ，有可能会增加静态功耗。</p><p>答案：B</p><hr><p><strong>04:</strong>  下面哪个FP32数据格式是对的（符号位指数位小数位）（   ）</p><p>A.     1.8.23</p><p>B.     1.5.26</p><p>C.     2.8.22</p><p>D.     2.5.25</p><p><em><strong>解析</strong></em></p><p>参考下图，单精度（FP32）即选A</p><p>答案：A</p><hr><p><strong>07:</strong>  下列总线协议中，支持乱序传输的有</p><p>A.    AHB</p><p>B.    AXI</p><p>C.    APB</p><p><em><strong>解析</strong></em></p><p>AXI协议是支持乱序传输的协议，也就是说master连续发起了两次传输，对于slave的应答顺序和master的发起顺序可以是不同的.</p><p>答案：B</p><hr><p><strong>09:</strong>  以下二进制数字序列，满足偶校验条件的是哪些</p><p>A.    1010 1101 1</p><p>B.    0001 0001 0</p><p>C.    0110 1111 1</p><p>D.    0011 1011 0</p><p><em><strong>解析</strong></em></p><p>奇校验：原始码流+校验位 总共有奇数个1</p><p>偶校验：原始码流+校验位 总共有偶数个1</p><p>答案：A</p><blockquote><p>为什么没有 B ？</p></blockquote><hr><p><strong>12:</strong>  关于功耗，以下描述不正确的是（）</p><p>A.芯片的功耗会受实际信号的影响，所以功耗测试需要结合业务来开展</p><p>B.设计者需要关注平均功耗、峰值功耗、功耗跳变</p><p>C.改变芯片的供电电压和时钟频率都会对芯片功耗产生影响</p><p>D.对于可关断的模块，使用时钟门控即可降低功耗</p><p><em><strong>解析</strong></em></p><p>对于可关断的模块，可以直接掉电处理，不用使用时钟门控。因为使用门控也还有功耗损失。</p><p>答案：D</p><hr><p><strong>13.</strong> 下列优化方法中哪些是速度优化方法</p><p>A.   资源共享</p><p>B.   关键路径优化</p><p>C.   流水线</p><p>D.   单行化</p><p><em><strong>解析</strong></em></p><ul><li>系统进行面积优化主要有以下三种方向：串行化，逻辑优化，资源共享。</li><li>系统进行速度优化主要有以下几种方向：使用流水线，寄存器配平，关键路径优化，并行化，消除代码的优先级</li></ul><p>答案：BC</p><hr><p><strong>17:</strong>  模块只收敛到0.75V，提压到0.85V可以正常工作（）</p><p>A．   正确</p><p>B．   错误</p><p><em><strong>解析</strong></em></p><p>因为提升电压后，要收hold才行。</p><p>答案：B</p><hr><p><strong>18:</strong>  下面关于PLL电路表述正确的是</p><p><strong>A.PLL相对于参考时钟，可以输出分频、倍频、分数频的时钟</strong></p><p>B.PLL属于模拟电路，无法用全数字电路实现</p><p>C.PLL的 jitter 值等于同步数字电路中 clock  uncertainty 的设定值</p><p><strong>D.PLL输入的参考时钟Jitter值，在PLL输出是会变大，也可能变小</strong></p><p><em><strong>解析</strong></em></p><p>PLL 属于模拟电路，又属于数字电路； C 选项中的 clock  uncertainty ，既包含了 jitter 又包含了 skew</p><p>答案：AD</p><h2 id="简答题">简答题</h2><p><strong>19:</strong>  相同面积的cmos与非门和或非门哪个更快？</p><p><em><strong>解析</strong></em>：</p><p>与非门：上并下串，上P下N；<br>或非门：上串下并，上P下N；<br><strong>电子迁移率是空穴的2.5倍（在硅基CMOS工艺中）</strong>，运算就是用这些大大小小的MOS管驱动后一级的负载电容，翻转速度和负载大小一级前级驱动能力相关。</p><p><strong>为了上升延迟和下降延迟相同，PMOS需要做成NMOS两倍多大小</strong>。</p><p>载流子的迁移率，<strong>对PMOS而言，载流子是空穴；对NMOS而言，载流子是电子</strong>。</p><p>PMOS采用空穴导电，NMOS采用电子导电，由于PMOS的载流子的迁移率比NMOS的迁移率小，所以，同样尺寸条件下，PMOS的充电时间要大于NMOS的充电时间长，在互补CMOS电路中，与非门是PMOS管并联，NMOS管串联，而或非门正好相反，所以，同样尺寸条件下，与非门的速度快，所以，在互补CMOS电路中，优先选择与非门。</p><hr><p><strong>20:</strong>  为什么一个标准的倒相器中 <strong>P</strong> 管的宽长比要比 <strong>N</strong> 管的宽长比大?</p><p><strong>解析</strong>：</p><p>P 管是空穴导电，N 管电子导电，电子的迁移率大于空穴。宽长比越大，其导通电流 Id 就越大，因此在同样的电场下，N 管的Id大于 P 管。要增大 P 管的宽长比，这样才能使得P管与N管效率对称，充电放电的时间相等，噪声容限一样。</p><h1 id="数字ic笔试模拟题-五">数字IC笔试模拟题（五）</h1><h2 id="总结">总结</h2><ol><li>Cache知识</li><li>always块内的阻塞赋值与非阻塞赋值</li><li>逻辑运算优先级</li><li>systemverilog的基础知识要牢固：变量，数组，随机</li><li>OC门与OD门</li><li>处理保持时钟、建立时钟违例的方法</li><li>断言</li></ol><h2 id="单选题">单选题</h2><p><strong>01：</strong>  下面有关 Cache 的说法哪一个是不正确的：（ ）。</p><p>A.     设置Cache的目的，是解决CPU和主存之间的速度匹配问题</p><p>B.     设置Cache的理论基础，是程序访问的局部性原理</p><p><strong>C.</strong>  Cache与主存统一编址，Cache的地址空间属于主存的一部分</p><p>D.     Cache的功能均由硬件实现，对程序员是透明的</p><p><em><strong>解析</strong></em></p><p>A正确。Cache设计的背景就是为了解决CPU与主存之间的速度匹配问题，在速度上，CPU&gt;Cache&gt;主存。</p><p>B正确。一个程序在运行的某一时段时访问的代码或数据大部分是集中在某一块区域的。</p><p>C错误。Cache是介于处理器和主存储器之间的高速小容量存储器，<strong>cache地址由计算机硬件自动完成，它不属于主存的一部分</strong>。</p><p>D正确。Cache是由硬件实现，对程序员透明。</p><p>答案：C</p><hr><p><strong>09:</strong>  通常情况下， 芯片工作温度较（）时， 工作电压较（）时的速度最快。</p><p>A． 高，高</p><p>B. 高，低</p><p>C． 低，低</p><p><strong>D</strong>**． 低，高**</p><p><em><strong>解析</strong></em></p><p>温度和芯片供电电压都会影响芯片的速度和性能。温度升高会导致阈值电压Vt下降，Vt下降可以使芯片速度在一定程度上增加。但同时，温度升高会导致迁移率下降，通常这对芯片速度有更大的影响，一般CPU工作温度要控制在90摄氏度以下。在工作温度范围内低温下芯片速度更快。</p><p><strong>芯片供电电压升高时，芯片会变快</strong>：提高供电电压，推动电荷通过电路，提高电路速度，减小晶体管开启和关断时间</p><p>答案：D</p><hr><p><strong>12:</strong>  下列代码的输出为（）</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> test</span><br><span class="line">    <span class="keyword">int</span> alpha,beta;</span><br><span class="line">    <span class="keyword">initial</span> <span class="keyword">begin</span></span><br><span class="line">        alpha  = <span class="number">4</span>             ;</span><br><span class="line">        beta   = <span class="number">3</span>             ;</span><br><span class="line">        beta  &lt;= beta  + alpha ;</span><br><span class="line">        alpha &lt;= alpha + beta  ;</span><br><span class="line">        alpha  = alpha - <span class="number">1</span>     ;</span><br><span class="line">        <span class="built_in">$display</span>(<span class="string">&quot;alpha = %0d beta=%0d&quot;</span>, alpha,beta);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><p>A.    Alpha=7， beta=7</p><p>B.    Alpha=4， beta=3</p><p>C.    Alpha=3，beta=7</p><p><strong>D.</strong>    <strong>Alpha=3，beta=3</strong></p><p><em><strong>解析</strong></em></p><p>由于没有在module块中设置时钟，因此<strong>表示时序的非阻塞赋值在这题可以被忽略</strong>。只考虑阻塞赋值“=”，alpha=beta=3。</p><p>答案：D</p><hr><p><strong>14:</strong>  以下哪些是第三代移动通信标准</p><p>A. EDGE</p><p><strong>B. TD-SCDMA</strong></p><p>C. LTE</p><p>D. WIFI</p><p><em><strong>解析</strong></em></p><p>第三代移动通信的主流技术标准主要有三种：IMT-2000 CDMA-DS(IMT-2000直接扩频CDMA)，即WCDMA，它可以在一个宽达5MHz的频带内直接对信号进行扩频;IMT-2000CDMA-MC(IMT-2000多载波CDMA)，即CDMA2000，这是美国提出的技术，它是由1个或多个1.25MHz的窄带直接扩频系统组成的一个宽带系统；TD-SCDMA(时分同步码分多址)，是由中国提出的</p><p>答案：B</p><hr><p><strong>16：</strong>  在systemverilog中声明随机变量的关键词为（）</p><p>A. randa</p><p><strong>B. randc</strong></p><p>C. randomize</p><p>D. urandom_range</p><p><em><strong>解析</strong></em></p><p>randc声明周期性随机变量</p><p>答案：B</p><hr><p><strong>17：</strong>  EEPROM是指().</p><p>A.随机读写存储器</p><p>B.一次编程的只读存储器</p><p>C.可擦可编程只读存储器</p><p><strong>D.电可擦可编程只读存储器</strong></p><p><em><strong>解析</strong></em></p><p>随机读写存储器：RAM</p><p>一次编程的只读存储器： ROM</p><p>可擦可编程只读存储器：EPROM</p><p>带电可擦可编程只读存储器：EEPROM</p><p>答案：D</p><hr><p><strong>18：</strong>  OC门在使用时须在()之间接一个电阻.</p><p>A.输出与地</p><p>B.输出与电源</p><p>C.输出与输入</p><p><strong>D.输入与电源</strong></p><p><em><strong>解析</strong></em></p><p>答案：D</p><h2 id="多选题">多选题</h2><p><strong>01：</strong> 下面哪个选项无法消除hold time violation</p><p><strong>A.提高时钟频率</strong></p><p>B. 插入buff</p><p><strong>C. 提高电压</strong></p><p><strong>D. 减少时钟频率</strong></p><p><em><strong>解析</strong></em></p><p>修复hold违例的方法有增大launch clock delay，减小capture clock delay，增大data line delay，插 lockup latch。</p><p>答案:ACD</p><hr><p><strong>02：</strong>  与模拟电路相比，数字电路主要的优点有()。</p><p>A.容易设计</p><p><strong>B.通用性强</strong></p><p><strong>C.保密性好</strong></p><p><strong>D.抗干扰能力强</strong></p><p><em><strong>解析</strong></em></p><p>数字电路是离散型信号而模拟电路是连续型信号，数字电路与模拟电路相比具有如下优势：<br>通用性强，密性好，干扰能力强，针对性强</p><p>答案： BCD</p><hr><p><strong>03：</strong> 信号跨时钟域时，会出现亚稳态，其失效性和哪些因素有关（）</p><p><strong>A.信号发射端的寄存器输出信号的翻转率</strong></p><p>B.信号发射端的寄存器时钟频率</p><p><strong>C.信号接收端的寄存器时钟频率</strong></p><p><strong>D.同步寄存器的级数</strong></p><p><em><strong>解析</strong></em></p><p>A正确。翻转时间长会导致容易导致亚稳态的产生。因此需要避免翻转时间很长的输入信号。</p><p>B错误。发送端寄存器的时钟频率与亚稳态无关。</p><p>C正确。接收域时钟频率越高,越容易采集到源信号。</p><p>D：同步级数越多数据越可靠。</p><p>答案： ACD</p><hr><p><strong>05：</strong>  下面哪种方式可以对时序进行检查()</p><p>A. 即时断言</p><p><strong>B. 并发断言</strong></p><p><strong>C. 建立时间约束</strong></p><p><strong>D. 保持时间约束</strong></p><p><em><strong>解析</strong></em></p><p>断言（<strong>assertion</strong>）一般可以放到<strong>RTL</strong>设计代码中，比较方便我们在仿真出现异常时查看它所报警的东西。通常意义上的断言具有：<strong>1</strong>）检查特定条件或事件序列的出现情况，提供功能覆盖。并发断言：基于时钟的，调度区间按<strong>assertion</strong>的调度区间，可以在过程块(always initial),<strong>模块</strong>(module),<strong>接口</strong>(interface),<strong>程序</strong>(program)<strong>中定义</strong>;</p><ul><li>即时断言：基于事件的，本质不是时序关系，会立刻求值。进行检查。*</li></ul><p>答案： BCD</p><hr><p><strong>06：</strong> 下面选项哪些属于衡量数字通信系统传输质量的指标（）</p><p><strong>A.</strong>         <strong>误码率</strong></p><p>B.           信噪比</p><p><strong>C.</strong>         <strong>传输速率</strong></p><p>D.           噪声功率</p><p><em><strong>解析</strong></em></p><p>可靠性和有效性指标与数字通信系统传输质量有关。有效性主要指标为传输速率，可靠性主要指标误码率。</p><p>答案：AC</p><h1 id="数字ic笔试模拟题-六">数字IC笔试模拟题（六）</h1><h2 id="总结">总结</h2><ol><li>有符号数如何计算十进制</li><li>SV的program基础知识复习</li><li>门电路，反相器等基础知识</li><li>数字逻辑运算</li><li>round robin arbiter</li></ol><h2 id="选择题">选择题</h2><p><strong>01:</strong> 根据芯片验证的质量要求，芯片系统验证中的测试点分解活动应该（）</p><p>A． 适当覆盖芯片内部实现</p><p>B． 依靠验证人员对电路实现的充分揣测</p><p>C． 采用全黑盒方式分解以保证规格的正确性</p><p>D． 主要考虑单元电路的设计内容</p><p><em><strong>解析</strong></em></p><p>芯片验证按照设计的规模分为模块验证、集成验证、系统验证。其中：</p><p>模块验证：要覆盖这个模块的所有功能，最终要达到白盒验证的效果。</p><p>集成验证：在IP或者子系统内，多个模块之间的互联，还有常见数据流，有些模块覆盖不到的特性也会提给集成验证来验证。</p><p>系统验证：主要是各个子系统之间的互联，常见数据通路或者应用场景的覆盖，还有CRG、DFT等的测试。当然有一些集成验证或者模块验证不好覆盖的点，也会提交给系统验证，不能完全把DUT当成黑盒，还是要测试一些模块特性的。</p><p>答案：A</p><hr><p><strong>02:</strong> 16bit有符号数0xC6的十进制数是（）</p><p>A.-57</p><p>B.-56</p><p>C.-59</p><p>D.-58</p><p><em><strong>解析</strong></em></p><p>0xC6转为二进制是1100 0110，高位为 1 所以为负数，默认以补码形式存储，<strong>取反加一</strong>得到原码：1011 1010</p><p>答案：D</p><hr><p><strong>05:</strong>  关于类的构造函数，以下说法正确的有（）</p><p>A． 返回类型是void类型</p><p>B． 函数名与其类名完全相同</p><p>C． 不能有形参</p><p>D． 函数体中必须有new语句</p><p><em><strong>解析</strong></em></p><p>systemverilog里面的class(类)，是一个OOP（面向对象）的概念。在定义class的时候，都会有一个new函数，也就是构造函数，如果不显示的定义这个new函数，那么系统会有一个默认的。在实例化一个class的时候，需要调用new函数来产生一个类的句柄。</p><p>我们也可以定义一个有参数的new函数，方便做一些初始化。new函数不能有返回值，也不需要定义返回值类型，因为构造函数总是返回一个指向类对象的句柄，其类型就是类本身。构造函数名称和所在类名称相同。</p><p>答案：B</p><hr><p><strong>07:</strong> 以下关于半导体晶体管基本门电路“反相器”的描述正确的是（）</p><p>A.     体现了数字电路的本质是“反”逻辑</p><p>B.     其输入与输出电平相反</p><p>C.     是最小的三极管电路单元</p><p>D.     是所有数字逻辑电路的基本组成单元</p><p><em><strong>解析</strong></em></p><p>反相器基本概念</p><p>答案：ABCD</p><hr><p><strong>08:</strong> 已知Y=A(~B)+B+(~A)B，下列结果中正确的是（）</p><p>A. Y=B</p><p>B. Y=A</p><p>C. Y=(~A)+(~B)</p><p>D. Y=A+B</p><p><em><strong>解析</strong></em></p><p>Y = A(~B)+B+(~A)B= A(~B)+B(1+(~A))= A(~B)+B = A+B</p><p>答案：D</p><hr><p><strong>09:</strong>  以下哪些设计缺陷会导致芯片STA分析困难（）</p><p>A.     同一模块存在大量异步逻辑</p><p>B.     组合逻辑环</p><p>C.     使用latch锁存器</p><p>D.     将时钟直接作为数据使用</p><p><em><strong>解析</strong></em></p><p>作为STA的知识点记住。</p><p>答案：ABCD</p><hr><p><strong>12.</strong> 无复位寄存器会引入不定态，因此设计中禁止使用无复位寄存器（）</p><p>A． 正确</p><p>B． 错误</p><p><em><strong>解析</strong></em></p><p><strong>无复位寄存器的面积会比带复位端寄存器小，因此在设计中，经常会使用无复位端寄存器，但一定要确保在业务有效时，不会出现X态传播</strong>。所以经常是数据信号，我们会使用无复位端寄存器，因为只要在数据有效时，数据不会出现X态就可以了。控制信号不允许使用无复位的寄存器。</p><p>答案：B</p><hr><p><strong>13:</strong>  reg[7:0] mema[255:0]正确的赋值是（）</p><p>A.mema[5]=3’d0</p><p>B.mema[5][3:0]=4’d1</p><p>C.mema[8][8] = 8’d0</p><p>D.都正确</p><p><em><strong>解析</strong></em></p><p>memory型数据， reg[N-1:0] 存储器名[m-1:0];</p><p>reg[7:0] mema[255:0]; 一个名为mema的存储器，该存储器有256个8为的寄存器，该存储器的地址范围是0-255如果想对memory中的存储单元进行读和写操作，<strong>必须指定该单元在存储器中的地址mema[地址]</strong><br><strong>多维数组的索引必须是一个整体</strong>，无法对其中一个部分进行赋值，所以B错误；</p><p>答案：A</p><hr><p><strong>17:</strong>  关于电路处理说法正确的是：</p><p>A.同步电路系统中可以有一个时钟以及三分频时钟进行驱动；</p><p>B.DFF的setup时间是根据DFF和DFF之间的时序路径分析出来的，把时钟变慢可以增加DFF的setup时间</p><p>C.数字电路设计中是竞争和冒险会带来电路上的毛刺，需要加入RC滤波电路清除</p><p>D.如果DFF的hold时间不满足，通常可以通过时钟运行速度来解决</p><p><em><strong>解析</strong></em></p><p><strong>setup时间是由寄存器内部的结构决定的，与时钟无关</strong>。竞争和冒险是由不同路径的延时不同导致的。由Thold的约束公式得与时钟无关。要加时钟约束，有recovery和removal的check</p><p>答案：A</p><hr><p><strong>18:</strong>  中断是处理器能完成并行性，实时操作的一种重要手段，请选出如下有关中断的正确描述？</p><p>A.以上表述都不对</p><p>B.中断的响应过程中，保护程序计数器的作用是cpu能找到中断处理程序的入口地址</p><p>C.cpu在响应中断期间，原来的程序依然可以执行</p><p>D.中断响应中，断点保护，现场保护由用户编程完成。</p><p><em><strong>解析</strong></em></p><p><strong>B错在是cpu能找到出口地址，而非入口地址</strong>，为了是CPU在执行完中断服务程序时能回到被中断程序的断点处。C:错在：原程序是中止的，不能运行。D:现场保护由系统自动完成</p><p>答案：A</p><hr><p><strong>19：</strong>  设置为高优先级的测试点，包括以下哪几类（）</p><p>A． 设计人员觉得质量风险最大的测试点</p><p>B． 内部调试用的测试计数器等相关测试点</p><p>C． 验证工作量最大的测试点</p><p>D． 最常用功能相关的测试点</p><p><em><strong>解析</strong></em></p><p>高优先级主要是跟基本数据通路相关的，比如常用功能特性。还有就是设计人员觉得质量风险最大的一些测试点。和验证工作量大小没有直接的关系，另外一些DFX特性也不是高优先级的特性，比如一些统计计数器等。</p><p>答案：AD</p><hr><h2 id="简答题">简答题</h2><p>题目：用Verilog实现round robin arbiter</p><p><em><strong>解析</strong></em></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> round_robin_arb #(<span class="keyword">parameter</span> WIDTH = <span class="number">4</span>)</span><br><span class="line">(</span><br><span class="line">  <span class="keyword">input</span>              clk     ,</span><br><span class="line">  <span class="keyword">input</span>              rst_n   ,</span><br><span class="line">  <span class="keyword">input</span>  [WIDTH-<span class="number">1</span>:<span class="number">0</span>] request ,</span><br><span class="line">  <span class="keyword">output</span> [WIDTH-<span class="number">1</span>:<span class="number">0</span>] grant    <span class="comment">// one-hot code</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 存储移位后上一次仲裁结果，每一次仲裁结果都是独热码</span></span><br><span class="line">  <span class="keyword">reg</span> [WIDTH-<span class="number">1</span>:<span class="number">0</span>] last_grant;</span><br><span class="line">  <span class="keyword">always</span>@(<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">negedge</span> rst_n) <span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span>(!rst_n)</span><br><span class="line">      last_grant &lt;= <span class="number">&#x27;b1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(|request) <span class="comment">// 有仲裁请求，根据上一次的仲裁结果，左移1bit后用于控制新的优先级</span></span><br><span class="line">      last_grant &lt;= &#123;grant[WIDTH-<span class="number">2</span>:<span class="number">0</span>], grant[WIDTH-<span class="number">1</span>]&#125;;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      last_grant &lt;= last_grant;  <span class="comment">// 无仲裁请求时，pre_state不更新</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果最左侧几个高优先级主机都未发起仲裁请求，需要从最低位开始轮询。</span></span><br><span class="line">  <span class="comment">// 此处通过两个request拼接，将右侧低位拼接到左侧，即可实现对低位的判断。</span></span><br><span class="line">  <span class="keyword">wire</span> [<span class="number">2</span>*WIDTH-<span class="number">1</span>:<span class="number">0</span>] grant_extern;</span><br><span class="line">  <span class="keyword">assign</span> grant_extern = ~(&#123;request,request&#125; - &#123;&#123;WIDTH&#123;<span class="number">1&#x27;b0</span>&#125;&#125;, last_grant&#125;) &amp; &#123;request,request&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 得到的grant_extern必定为一个独热码，但是置高位可能在代表低位的高4bit中，因此进行求或运算</span></span><br><span class="line">  <span class="keyword">assign</span> grant = grant_extern[WIDTH-<span class="number">1</span>:<span class="number">0</span>] | grant_extern[<span class="number">2</span>*WIDTH-<span class="number">1</span>:WIDTH];</span><br><span class="line"></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;数字ic笔试模拟题-一&quot;&gt;数字IC笔试模拟题（一）&lt;/h1&gt;
&lt;h2 id=&quot;选择题&quot;&gt;选择题&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;03:&lt;/strong&gt; 关于异步处理，以下说法正确的是：&lt;/p&gt;
&lt;p&gt;A． 静态配置信号可以不做异步处理&lt;/p&gt;
&lt;p&gt;B</summary>
      
    
    
    
    
    <category term="秋招" scheme="https://planckzgh.github.io/tags/%E7%A7%8B%E6%8B%9B/"/>
    
  </entry>
  
  <entry>
    <title>无毛刺时钟切换电路</title>
    <link href="https://planckzgh.github.io/2024/07/30/%E6%97%A0%E6%AF%9B%E5%88%BA%E6%97%B6%E9%92%9F%E5%88%87%E6%8D%A2%E7%94%B5%E8%B7%AF/"/>
    <id>https://planckzgh.github.io/2024/07/30/%E6%97%A0%E6%AF%9B%E5%88%BA%E6%97%B6%E9%92%9F%E5%88%87%E6%8D%A2%E7%94%B5%E8%B7%AF/</id>
    <published>2024-07-29T16:10:00.000Z</published>
    <updated>2024-07-29T16:15:19.779Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>参考资料：</p><ul><li><a href="https://www.eetimes.com/techniques-to-make-clock-switching-glitch-free/?utm_source=eetimes&amp;utm_medium=networksearch">Techniques For Glitch Free Clock Switching (MUX)</a></li></ul></blockquote><h1 id="无毛刺时钟切换电路">无毛刺时钟切换电路</h1><h2 id="实时的时钟切换的问题">实时的时钟切换的问题</h2><p>使用 AND-OR 门组成 MUX，可以得到一个时钟切换电路，但是，<strong>当 SELECT 的值发生变化，输出时钟从当前的时钟源切换到下一个时钟源时，可能会产生毛刺。</strong><br><img src="/imgs/ClkSwMUX.png" alt="ClkSwMUX.png"></p><h3 id="存在的问题">存在的问题</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123; signal: [</span><br><span class="line">  &#123; name: &quot;CLK0&quot;,     wave: &quot;p..&quot;,     period: 1 &#125;,</span><br><span class="line">  &#123; name: &quot;CLK1&quot;,     wave: &quot;p......h&quot;, period: 0.3 &#125;, </span><br><span class="line">  &#123; name: &quot;SELECT&quot;,   wave: &quot;0..........1..................&quot; , period: 0.1 &#125;,</span><br><span class="line">  &#123; name: &quot;CLKOUT&quot;,   wave: &quot;h....l....hlh.l.h.l.h.l.h.l.h.&quot; , period: 0.1, node: &#x27;...........ab&#x27;&#125;,</span><br><span class="line">  ],</span><br><span class="line">  config: &#123; hscale: 5 &#125;,</span><br><span class="line">  head:&#123;</span><br><span class="line">   text:&#x27;在 a-b 之间，输出时钟发生了截断，导致毛刺的产生&#x27;,</span><br><span class="line">   tick:0,</span><br><span class="line">   every:1</span><br><span class="line"> &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>SELECT 控制信号至少与其中一个时钟源异步；</li><li>SELECT 控制信号与时钟信号构成<a href="../undefined">门控时钟</a>，为了防止时钟被截断，只能在时钟低电平的时发生改变。</li></ol><h2 id="倍频时钟的无缝切换">倍频时钟的无缝切换</h2><p><strong>解决方法：在每个时钟源的选择路径上，都插入一个下降沿有效的 D 触发器。</strong></p><ul><li>在时钟的每个下降沿寄存选择控制信号 SELECT，并且只有在其他时钟的选择被释放后（无效后）才会使能新的时钟选择，这样对输出毛刺问题进行很好的解决。</li><li>在时钟的下降沿处寄存选择控制信号，保证了控制信号不会在两个时钟源的高电平处进行跳变，这样就防止对输出时钟进行截断（导致毛刺）。</li><li>一个时钟的选择反馈到了另一个时钟（<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>Q</mi><mo>ˉ</mo></mover></mrow><annotation encoding="application/x-tex">\bar{Q}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0145499999999998em;vertical-align:-0.19444em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8201099999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">Q</span></span></span><span style="top:-3.25233em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.16666em;"><span class="mord">ˉ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span></span></span>），这种反馈机制使得门控开关在选择输出下一个时钟之前，必须先取消当前时钟的输出选择，这样避免了任何可能出现的毛刺 Glitch。</li></ul><p>假设此时 SELECT 在适中的高电平处进行了跳变，由于与门作用，需要等待其另一个时钟触发的寄存器输出 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>Q</mi><mo>ˉ</mo></mover></mrow><annotation encoding="application/x-tex">\bar{Q}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0145499999999998em;vertical-align:-0.19444em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8201099999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">Q</span></span></span><span style="top:-3.25233em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.16666em;"><span class="mord">ˉ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span></span></span> 也变化为 1 时，与门的结果  SELECT-1 才会变化，而 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>Q</mi><mo>ˉ</mo></mover></mrow><annotation encoding="application/x-tex">\bar{Q}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0145499999999998em;vertical-align:-0.19444em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8201099999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">Q</span></span></span><span style="top:-3.25233em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.16666em;"><span class="mord">ˉ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span></span></span> 的变化需要等待到时钟的下降沿才会变化，所以经过处理后的 SELECT-1 信号的跳变只发生在时钟的低电平处。</p><p>如图 2-2 的时序图所示为 SELECT 选择信号从 0 到 1 变化时是如何影响的输出 OUT CLOCK 的波形。首先在 CLK0 的下降沿停止 CLK0 在 OUT CLOCK 上的输出，然后在紧接着的 CLK1 的下降沿开始输出 CLK1。<br><img src="/imgs/%E6%97%A0%E6%AF%9B%E5%88%BA%E5%88%87%E6%8D%A2%E5%80%8D%E9%A2%91%E6%97%B6%E9%92%9F%E7%94%B5%E8%B7%AF.png" alt="无毛刺切换倍频时钟电路.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123; signal: [</span><br><span class="line">  &#123; name: &quot;CLK0&quot;,     wave: &quot;p..&quot;,     period: 1 &#125;,</span><br><span class="line">  &#123; name: &quot;CLK1&quot;,     wave: &quot;p......h&quot;, period: 0.3 &#125;, </span><br><span class="line">  &#123; name: &quot;SELECT&quot;,   wave: &quot;l..........h..................&quot; , period: 0.1 &#125;,</span><br><span class="line">  &#123; name: &quot;CLKOUT&quot;,   wave: &quot;h....l....h....l....h.l.h.l.h.&quot; , period: 0.1, node: &#x27;...........a...b..c&#x27;&#125;,</span><br><span class="line">  ],</span><br><span class="line">  config: &#123; hscale: 5 &#125;,</span><br><span class="line">  head:&#123;</span><br><span class="line">   text:&#x27;在 a 处，SELECT 信号变化，在 b 处，时钟 CLK0 关闭，在 c 处，时钟 CLK1 打开&#x27;,</span><br><span class="line">   tick:0,</span><br><span class="line">   every:1</span><br><span class="line"> &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个电路中有 3 条时序路径需要特别考虑：</p><ol><li>SELECT 控制信号到任意一个下降沿有效的触发器 ；</li><li>DFF0 的输出到 DFF1 的输入；</li><li>DFF1 的输出到 DFF0 的输入。</li></ol><p>如果这三条路径中的任一路径上的信号在目的寄存器时钟的捕获沿时发生变化，则寄存器的输出有一定的机会会进入<strong>亚稳态</strong>，这意味着会进入理想的 0 和 1 之间的一个状态。(在此例中，捕获沿均为下降沿)。</p><p>亚稳态经过一段时间后会 随机的 稳定为 0 或者 1，这就导致两个寄存器可能采集到不同的值（一个认为是 0，而另一个认为是 1）。因此，这就要求两个寄存器捕获沿和 对 SELECT 信号的发起沿分开，以避免任何可能的异步接口。由于两个时钟源的时序关系是已知的，所以上述可以通过使用恰当的多周期约束（multi-cylce hold）或者最小延时（minimun delay）约束来实现。</p><p>在芯片的启动时，DFF0 和 DFF1 两个寄存器都应该复位为 “0” 状态，这样在最开始时，两个时钟都没有被选中输出。通过在 “0” 状态下起点两个触发器，时钟开关内置了容错功能。<br>假定在启动时有个错误导致其中一个时钟没有进行翻转。如果使用这个错误时钟的触发器的初始状态是“1”状态，而此时这个触发器由于没有时钟的翻转边沿触发，所以导致该寄存器的输出状态不变，这就阻止了对另一个时钟的选择。通过让两个寄存器都以 “0” 状态开始，那么即使有一个时钟没能正常的工作，另一个正常的时钟也能通过门控输出。</p><h2 id="异步时钟的无缝切换">异步时钟的无缝切换</h2><blockquote><p>当两个时钟源完全不相关时，异步行为可能来自 SELECT，也可能来自另一个时钟域的异步的反馈信号。</p></blockquote><p>如图 3-1 所示，对每个时钟源路径上，各增加一个该时钟源<strong>上升沿</strong>驱动的触发器来避免<strong>亚稳态</strong>。</p><ul><li>上升沿有效的触发器可以减少SELECT信号和异步反馈信号导致的亚稳态现象.</li><li>下降沿有效的触发器可以保证SELECT信号在时钟源的低电平处跳变.</li><li>反馈信号可以保证在输出下一个时钟之前已经取消了上一个时钟的输出.</li></ul><p><img src="/imgs/%E6%97%B6%E9%92%9F%E6%97%A0%E6%AF%9B%E5%88%BA%E5%88%87%E6%8D%A2%E7%94%B5%E8%B7%AF.png" alt="时钟无毛刺切换电路.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123; signal: [</span><br><span class="line">  &#123; name: &quot;CLK0&quot;,     wave: &quot;h....l....h....l....h....l....h....l&quot;,     period: 0.1 &#125;,</span><br><span class="line">  &#123; name: &quot;CLK1&quot;,     wave: &quot;p........&quot;, period: 0.3 &#125;, </span><br><span class="line">  &#123; name: &quot;SELECT&quot;,   wave: &quot;l..........h........................&quot; , period: 0.1 &#125;,</span><br><span class="line">  &#123; name: &quot;CLKOUT&quot;,   wave: &quot;h....l....h....l....h....l......h.l.&quot; , period: 0.1, node: &#x27;...........a........b....c..d.e&#x27;&#125;,</span><br><span class="line">  ],</span><br><span class="line">  config: &#123; hscale: 5 &#125;,</span><br><span class="line">  head:&#123;</span><br><span class="line">   text:&#x27;在 a 处，SELECT 发生变化，在 b 处，时钟 CLK0 上升沿采样，在 c 处，时钟 CLK0 下降沿采样后关闭&#x27;,</span><br><span class="line"> &#125;,</span><br><span class="line"> foot:&#123;</span><br><span class="line">   text:&#x27;在 d 处，时钟 CLK1 上升沿采样，在 e 处，时钟 CLK1 下降沿采样后打开，完成时钟切换。&#x27;,</span><br><span class="line"> &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;参考资料：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.eetimes.com/techniques-to-make-clock-switching-glitch-free/?utm_source=eetimes&amp;amp;u</summary>
      
    
    
    
    
    <category term="数字设计" scheme="https://planckzgh.github.io/tags/%E6%95%B0%E5%AD%97%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>C语言指针总结</title>
    <link href="https://planckzgh.github.io/2024/03/31/C%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88%E6%80%BB%E7%BB%93/"/>
    <id>https://planckzgh.github.io/2024/03/31/C%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88%E6%80%BB%E7%BB%93/</id>
    <published>2024-03-31T13:36:38.000Z</published>
    <updated>2024-03-31T13:44:44.492Z</updated>
    
    <content type="html"><![CDATA[<h2 id="c文件是如何变成可执行文件的">C文件是如何变成可执行文件的</h2><ul><li>预处理：处理所有以#开头的代码（头文件展开，宏定义替换，条件编译）</li><li>编译：语法检查，把C文件翻译成汇编文件</li><li>汇编：把汇编代码翻译成二进制文件</li><li>链接：把所有需要的.o文件合并成一个二进制文件，链接需要用的库。</li></ul><h2 id="pointer-code-10-files">Pointer code 10 files</h2><h3 id="01-指针的基本概念">01 指针的基本概念</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1. 在64位操作系统中，指针占8个字节</span></span><br><span class="line"><span class="comment">2. 定义的时候（前面有类型），表示后面的变量是指针</span></span><br><span class="line"><span class="comment">3. 使用的时候：表示取值（取指针指向的内存空间的值）</span></span><br><span class="line"><span class="comment">4. int * 和 char * 的步长不一样</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> num = <span class="number">1</span>;</span><br><span class="line"><span class="type">char</span> ch = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> *p = &amp;num;</span><br><span class="line"><span class="type">char</span> *q = &amp;ch;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p, %p\n&quot;</span>, p, p + <span class="number">1</span>);<span class="comment">//p指向整数，所以p+1加四个字节</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p, %p\n&quot;</span>, q, q + <span class="number">1</span>);<span class="comment">//q指向字符，所以q+1加一个字节</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="02-指针作为函数参数">02 指针作为函数参数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1. 如果要交换实参的值，必须传递指针</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> *x, <span class="type">int</span> *y)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> temp;</span><br><span class="line">temp = *x;</span><br><span class="line">*x = *y;</span><br><span class="line">*y = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">1</span>, b = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %d, b = %d\n&quot;</span>, a,b);</span><br><span class="line">swap(&amp;a,&amp;b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %d, b = %d\n&quot;</span>, a,b);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="03-指针运算">03 指针运算</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1. *px++ 与 (*px)++的区别：指针++与值++</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">mystrcpy</span><span class="params">(<span class="type">char</span> *dest, <span class="type">const</span> <span class="type">char</span> *src)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>((*dest++ = *src++) != <span class="string">&#x27;\0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> s1[<span class="number">32</span>] = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="type">char</span> s2[<span class="number">32</span>] = <span class="string">&quot;123456789&quot;</span>;</span><br><span class="line">mystrcpy(s2,s1);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, s2);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">f</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> num;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> *p1 = &amp;num;<span class="comment">//const 修饰*p1 即num</span></span><br><span class="line"><span class="comment">// (*p1)++;//error!</span></span><br><span class="line">p1++;</span><br><span class="line"><span class="type">int</span> *<span class="type">const</span> p2 = &amp;num;<span class="comment">//const 修饰p2</span></span><br><span class="line"><span class="comment">// p2++//error!</span></span><br><span class="line">(*p2)++;</span><br><span class="line"></span><br><span class="line"><span class="comment">// const int *const p3 = &amp;num;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="04-空指针和野指针">04 空指针和野指针</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1. *px++ 与 (*px)++的区别：指针++与值++</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">mystrcpy</span><span class="params">(<span class="type">char</span> *dest, <span class="type">const</span> <span class="type">char</span> *src)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>((*dest++ = *src++) != <span class="string">&#x27;\0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> s1[<span class="number">32</span>] = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="type">char</span> s2[<span class="number">32</span>] = <span class="string">&quot;123456789&quot;</span>;</span><br><span class="line">mystrcpy(s2,s1);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, s2);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">f</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> num;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> *p1 = &amp;num;<span class="comment">//const 修饰*p1 即num</span></span><br><span class="line"><span class="comment">// (*p1)++;//error!</span></span><br><span class="line">p1++;</span><br><span class="line"><span class="type">int</span> *<span class="type">const</span> p2 = &amp;num;<span class="comment">//const 修饰p2</span></span><br><span class="line"><span class="comment">// p2++//error!</span></span><br><span class="line">(*p2)++;</span><br><span class="line"></span><br><span class="line"><span class="comment">// const int *const p3 = &amp;num;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="05-指针和数组">05 指针和数组</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1. 通过指针的形式访问数组：a[i] &lt;=&gt; *(a+i)</span></span><br><span class="line"><span class="comment">2. 从使用角度说，指针和数组没有区别</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> *str = <span class="string">&quot;helloworld&quot;</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c\n&quot;</span>, *str);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, str[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="06-指针和数组的区别">06 指针和数组的区别</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">f</span><span class="params">(<span class="type">int</span> a[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 数组名作为参数传递时，变成指针</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(a) / <span class="keyword">sizeof</span>(a[<span class="number">0</span>]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> str[<span class="number">32</span>] = <span class="string">&quot;helloworld&quot;</span>;</span><br><span class="line"><span class="type">char</span> *p = <span class="string">&quot;helloworld&quot;</span>;</span><br><span class="line"></span><br><span class="line">p++;</span><br><span class="line"><span class="comment">// str++;// error!  str不能修改：数组名是常指针</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">str[<span class="number">0</span>] = <span class="string">&#x27;x&#x27;</span>;</span><br><span class="line"><span class="comment">// p[0] = &#x27;x&#x27;;// error!  字符串常量，不能修改</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lu\n&quot;</span>, <span class="keyword">sizeof</span>(str));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lu\n&quot;</span>, <span class="keyword">sizeof</span>(p));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组作为参数</span></span><br><span class="line"><span class="type">int</span> a[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(a) / <span class="keyword">sizeof</span>(a[<span class="number">0</span>]));</span><br><span class="line">f(a);</span><br><span class="line"></span><br><span class="line"><span class="comment">// &amp;a 表示数组的地址 &amp;a + 1表示下一个数组的地址</span></span><br><span class="line"><span class="comment">// a  表示数组首元素的地址 a + 1表示下一个元素的地址</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p %p\n&quot;</span>, &amp;a ,&amp;a + <span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p %p\n&quot;</span>,  a , a + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 当指针遇上数组：指针数组</span></span><br><span class="line"><span class="type">char</span> *pstr[] = &#123;<span class="string">&quot;I love China!&quot;</span>,<span class="string">&quot;I am&quot;</span>&#125;;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, pstr);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s %s\n&quot;</span>, pstr[<span class="number">0</span>],pstr[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="07-指针和函数">07 指针和函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1. 函数名就是该函数所占内存区的首地址</span></span><br><span class="line"><span class="comment">2. 不能返回局部变量的地址</span></span><br><span class="line"><span class="comment">3. 指针函数 int *p() 与函数指针 int(*p)() 的区别</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">f1</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;helloworld\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> *<span class="title function_">init</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// char str[32] = &#123;0&#125;;// 不能返回局部变量的地址</span></span><br><span class="line"><span class="type">char</span> *str = (<span class="type">char</span> *)<span class="built_in">malloc</span>(<span class="number">128</span>);<span class="comment">// 使用堆内存，需要手动释放</span></span><br><span class="line"><span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">int</span> <span class="params">(*T)</span><span class="params">(<span class="type">int</span>,<span class="type">int</span>)</span>;<span class="comment">// 声明一个新的类型T，表示函数指针类型</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">void</span> (*p)();<span class="comment">// 定义函数指针  右左法则</span></span><br><span class="line">p = f1;</span><br><span class="line">p();<span class="comment">// 通过函数指针调用函数，等价于 f1()</span></span><br><span class="line"><span class="comment">// p = add;// error! 类型不兼容</span></span><br><span class="line"><span class="type">int</span> (*q)(<span class="type">int</span>,<span class="type">int</span>) = add;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, q(<span class="number">1</span>,<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">T q1 = add;<span class="comment">// 等价于 int (*q1)(int, int) = add;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 指针函数</span></span><br><span class="line"><span class="type">char</span> *p1 = init();</span><br><span class="line"><span class="built_in">strcpy</span>(p1,<span class="string">&quot;helloworld&quot;</span>);</span><br><span class="line"><span class="built_in">free</span>(p1);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="08-回调函数">08 回调函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">less</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> (a &gt; b) ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">greater</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> (a &lt; b) ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 回调函数：把函数名作为另外一个函数的参数</span></span><br><span class="line"><span class="comment">// 作用：修改函数的功能</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span> *a, <span class="type">int</span> len, <span class="type">int</span> (*p)(<span class="type">int</span>, <span class="type">int</span>))</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; len - <span class="number">1</span> - i; ++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// if (a[j] &lt; a[j + 1])</span></span><br><span class="line"><span class="keyword">if</span> (p(a[j], a[j + <span class="number">1</span>]))<span class="comment">//通过函数指针调用函数</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> num = a[j];</span><br><span class="line">a[j] = a[j + <span class="number">1</span>];</span><br><span class="line">a[j + <span class="number">1</span>] = num;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sort(a, <span class="number">10</span>, greater);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="09-数组指针和指针数组">09 数组指针和指针数组</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1. 二维数组：int a[3][4]</span></span><br><span class="line"><span class="comment">2. a[0]表示首行首元素的地址 4字节</span></span><br><span class="line"><span class="comment">3. a表示数组首行的地址     16字节</span></span><br><span class="line"><span class="comment">4. &amp;a表示数组的地址   48字节</span></span><br><span class="line"><span class="comment">5. 一维数组对应一级地址：元素的地址</span></span><br><span class="line"><span class="comment">6. 二维数组对应二级地址：行地址</span></span><br><span class="line"><span class="comment">7. 三级地址：数组地址</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a[<span class="number">3</span>][<span class="number">4</span>] = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;,&#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;,&#123;<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用数组指针表示二维数组</span></span><br><span class="line"><span class="type">int</span> (*p)[<span class="number">4</span>] = a;<span class="comment">// 指向一维数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// printf(&quot;%d&quot;, p[i][j]);</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, *(*(p + i) + j));<span class="comment">// a[i] &lt;=&gt; *(a+i)</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 用指针数组表示二维数组   右左法则</span></span><br><span class="line"><span class="type">int</span> *q[<span class="number">3</span>] = &#123;a[<span class="number">0</span>], a[<span class="number">1</span>], a[<span class="number">2</span>]&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(a) / <span class="keyword">sizeof</span>(a[<span class="number">0</span>]); ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="keyword">sizeof</span>(a[<span class="number">0</span>]) / <span class="keyword">sizeof</span>(a[<span class="number">0</span>][<span class="number">0</span>]); ++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, q[i][j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用指针表示二维数组</span></span><br><span class="line"><span class="type">int</span> *p1 = a[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">12</span>; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, p1[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10-指针的指针">10 指针的指针</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">init</span><span class="params">(<span class="type">char</span> **s)</span></span><br><span class="line">&#123;</span><br><span class="line">*s = (<span class="type">char</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">char</span>) * <span class="number">128</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> *str = <span class="literal">NULL</span>;</span><br><span class="line">init(&amp;str);<span class="comment">// 如果要修改实参的值，必须传地址</span></span><br><span class="line"><span class="built_in">strcpy</span>(str,<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"><span class="type">char</span> *strtemp = str;</span><br><span class="line"><span class="keyword">while</span>(*str != <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, *str++);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="built_in">free</span>(strtemp);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="命令行参数">命令行参数</h3><ul><li><code>./program arg1 arg2 arg3</code></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; argc; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, argv[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;c文件是如何变成可执行文件的&quot;&gt;C文件是如何变成可执行文件的&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;预处理：处理所有以#开头的代码（头文件展开，宏定义替换，条件编译）&lt;/li&gt;
&lt;li&gt;编译：语法检查，把C文件翻译成汇编文件&lt;/li&gt;
&lt;li&gt;汇编：把汇编代码翻译成二进制文</summary>
      
    
    
    
    
    <category term="总结" scheme="https://planckzgh.github.io/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>LaTex排版笔记</title>
    <link href="https://planckzgh.github.io/2024/03/31/LaTex%E6%8E%92%E7%89%88%E7%AC%94%E8%AE%B0/"/>
    <id>https://planckzgh.github.io/2024/03/31/LaTex%E6%8E%92%E7%89%88%E7%AC%94%E8%AE%B0/</id>
    <published>2024-03-31T12:50:42.000Z</published>
    <updated>2024-03-31T14:35:32.682Z</updated>
    
    <content type="html"><![CDATA[<h1 id="latex-排版笔记"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>LaTeX</mtext></mrow><annotation encoding="application/x-tex">\LaTeX</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.89883em;vertical-align:-0.2155em;"></span><span class="mord text"><span class="mord textrm">L</span><span class="mspace" style="margin-right:-0.36em;"></span><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.68333em;"><span style="top:-2.904999em;"><span class="pstrut" style="height:2.7em;"></span><span class="mord"><span class="mord textrm mtight sizing reset-size6 size3">A</span></span></span></span></span></span><span class="mspace" style="margin-right:-0.15em;"></span><span class="mord text"><span class="mord textrm">T</span><span class="mspace" style="margin-right:-0.1667em;"></span><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.46782999999999997em;"><span style="top:-2.7845em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord textrm">E</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2155em;"><span></span></span></span></span><span class="mspace" style="margin-right:-0.125em;"></span><span class="mord textrm">X</span></span></span></span></span></span> 排版笔记</h1><h2 id="1-习惯篇：">1.  习惯篇：</h2><ul><li>不引用<code>\ref</code>不标记<code>\label</code></li><li>参考文献及时引用<code>\cite</code></li><li>数据尽量以Excel形式保存</li></ul><h2 id="2-宏包篇：">2.  宏包篇：</h2><ul><li>数学宏包：amsmath</li><li>表格宏包：booktabs</li><li>图片宏包：graphicx</li><li>颜色宏包：color &amp; xcolor</li><li>代码宏包：listings</li></ul><h2 id="3-表格篇：">3.  表格篇：</h2><ul><li><a href="https://www.tablesgenerator.com/">在线LaTeX表格生成器</a></li><li><a href="https://tableconvert.com/">表格转换器</a></li><li>Excel插件（LaTeX表格转换器）：<a href="https://github.com/krlmlr/Excel2LaTeX">GitHub项目地址</a></li><li>LaTex表格常用命令：<ul><li>合并单元格：<code>\multicolumn&#123;2&#125;&#123;c&#125;&#123;文字&#125;</code>，<code>\multirow&#123;2&#125;&#123;*&#125;&#123;&#125;</code></li><li>划线：<code>\cline&#123;2-3&#125;</code></li><li>表格底色设置：<br>宏包：<code>\usepackage&#123;colortbl&#125;</code><br>环境：<code>\begin&#123;tabular&#125;\end&#123;tabular&#125;</code><br>命令：<code>\rowcolor&#123;颜色&#125;</code>：用于行开头，为整行设置背景色；<br><code>\columncolor&#123;颜色&#125;</code>：用于tabular环境开头的居中参数设定区内，为整列设定背景色；<br><code>\cellcolor&#123;颜色&#125;</code>：用于每个单元格前，为最小单元格设定颜色。<br>优先级：单元&gt;行设定&gt;列设定</li><li>表格大小设置：<code>\scalebox&#123;0.9&#125;&#123;\begin&#123;tabular&#125;\end&#123;tabular&#125;&#125;</code></li><li>字体大小设置：<code>\tiny \scriptsize \small \normalsize \large \Large \LARGE \huge \Huge</code></li></ul></li></ul><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">% 三线表</span></span><br><span class="line"><span class="keyword">\begin</span>&#123;table&#125;[htbp]</span><br><span class="line">    <span class="keyword">\centering</span></span><br><span class="line">    <span class="keyword">\caption</span>&#123;表注&#125;<span class="keyword">\label</span>&#123;tab:1&#125;</span><br><span class="line">    <span class="keyword">\begin</span>&#123;tabularx&#125;&#123;<span class="keyword">\textwidth</span>&#125;&#123;YY&#125;</span><br><span class="line">        <span class="keyword">\toprule</span></span><br><span class="line">        文字 <span class="built_in">&amp;</span> 文字<span class="keyword">\\</span></span><br><span class="line">        <span class="keyword">\midrule</span></span><br><span class="line">        文字 <span class="built_in">&amp;</span> 文字<span class="keyword">\\</span></span><br><span class="line">        文字 <span class="built_in">&amp;</span> 文字<span class="keyword">\\</span></span><br><span class="line">        <span class="keyword">\bottomrule</span></span><br><span class="line">    <span class="keyword">\end</span>&#123;tabularx&#125;</span><br><span class="line"><span class="keyword">\end</span>&#123;table&#125;</span><br><span class="line"><span class="comment">% 表格样式2</span></span><br><span class="line"><span class="keyword">\begin</span>&#123;table&#125;[htbp]</span><br><span class="line">    <span class="keyword">\centering</span></span><br><span class="line">    <span class="keyword">\caption</span>&#123;表注&#125;</span><br><span class="line">    <span class="keyword">\begin</span>&#123;tabularx&#125;&#123;<span class="keyword">\textwidth</span>&#125;&#123;c@&#123;<span class="keyword">\hspace</span>&#123;1pc&#125;&#125;|X@&#123;<span class="keyword">\hspace</span>&#123;1pc&#125;&#125;&#125;</span><br><span class="line">        <span class="keyword">\Xhline</span>&#123;0.1em&#125;</span><br><span class="line">        符号 <span class="built_in">&amp;</span> <span class="keyword">\multicolumn</span>&#123;1&#125;&#123;c&#125;&#123;符号说明&#125;<span class="keyword">\\</span></span><br><span class="line">        <span class="keyword">\Xhline</span>&#123;0.05em&#125;</span><br><span class="line">        <span class="built_in">$</span><span class="keyword">\int</span><span class="built_in">$</span> <span class="built_in">&amp;</span> 积分符号<span class="keyword">\\</span></span><br><span class="line">        <span class="built_in">$</span><span class="keyword">\int</span><span class="built_in">$</span> <span class="built_in">&amp;</span> 积分符号<span class="keyword">\\</span></span><br><span class="line">        <span class="built_in">$</span><span class="keyword">\int</span><span class="built_in">$</span> <span class="built_in">&amp;</span> 积分符号<span class="keyword">\\</span></span><br><span class="line">        <span class="keyword">\Xhline</span>&#123;0.1em&#125;</span><br><span class="line">    <span class="keyword">\end</span>&#123;tabularx&#125;</span><br><span class="line"><span class="keyword">\end</span>&#123;table&#125;</span><br></pre></td></tr></table></figure><h2 id="4-图片篇：">4. 图片篇：</h2><ul><li>单图插入：</li></ul><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\begin</span>&#123;figure&#125;[htbp]</span><br><span class="line"><span class="keyword">\centering</span></span><br><span class="line"><span class="keyword">\includegraphics</span>[width=0.7<span class="keyword">\textwidth</span>]&#123;example-image-a&#125; </span><br><span class="line"><span class="keyword">\caption</span>&#123;图注&#125;<span class="keyword">\label</span>&#123;fig:1&#125;</span><br><span class="line"><span class="keyword">\end</span>&#123;figure&#125;</span><br></pre></td></tr></table></figure><ul><li>多图插入：</li></ul><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\begin</span>&#123;figure&#125; </span><br><span class="line"><span class="keyword">\begin</span>&#123;minipage&#125;[t]&#123;0.5<span class="keyword">\linewidth</span>&#125; </span><br><span class="line"><span class="keyword">\centering</span> </span><br><span class="line"><span class="keyword">\includegraphics</span>[width=0.7<span class="keyword">\textwidth</span>]&#123;example-image-b&#125; </span><br><span class="line"><span class="keyword">\subcaption</span>&#123;fig1&#125; </span><br><span class="line"><span class="keyword">\label</span>&#123;fig:side:a&#125; </span><br><span class="line"><span class="keyword">\end</span>&#123;minipage&#125;</span><br><span class="line"><span class="keyword">\begin</span>&#123;minipage&#125;[t]&#123;0.5<span class="keyword">\linewidth</span>&#125; </span><br><span class="line"><span class="keyword">\centering</span> </span><br><span class="line"><span class="keyword">\includegraphics</span>[width=0.7<span class="keyword">\textwidth</span>]&#123;example-image-b&#125; </span><br><span class="line"><span class="keyword">\subcaption</span>&#123;fig2&#125; </span><br><span class="line"><span class="keyword">\label</span>&#123;fig:side:b&#125; </span><br><span class="line"><span class="keyword">\end</span>&#123;minipage&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>&#123;minipage&#125;[t]&#123;0.5<span class="keyword">\linewidth</span>&#125; </span><br><span class="line"><span class="keyword">\centering</span> </span><br><span class="line"><span class="keyword">\includegraphics</span>[width=0.7<span class="keyword">\textwidth</span>]&#123;example-image-b&#125; </span><br><span class="line"><span class="keyword">\subcaption</span>&#123;fig1&#125; </span><br><span class="line"><span class="keyword">\label</span>&#123;fig:side:c&#125; </span><br><span class="line"><span class="keyword">\end</span>&#123;minipage&#125;<span class="comment">% </span></span><br><span class="line"><span class="keyword">\begin</span>&#123;minipage&#125;[t]&#123;0.5<span class="keyword">\linewidth</span>&#125; </span><br><span class="line"><span class="keyword">\centering</span> </span><br><span class="line"><span class="keyword">\includegraphics</span>[width=0.7<span class="keyword">\textwidth</span>]&#123;example-image-b&#125;  </span><br><span class="line"><span class="keyword">\subcaption</span>[1]&#123;fig2&#125; </span><br><span class="line"><span class="keyword">\label</span>&#123;fig:side:d&#125; </span><br><span class="line"><span class="keyword">\end</span>&#123;minipage&#125; </span><br><span class="line"><span class="keyword">\caption</span>&#123;图注&#125;</span><br><span class="line"><span class="keyword">\end</span>&#123;figure&#125;</span><br></pre></td></tr></table></figure><ul><li>图文混排：<a href="https://blog.csdn.net/z_feng12489/article/details/90750409">LaTex 图文混排 文字环绕</a></li></ul><h2 id="5-公式篇：">5.  公式篇：</h2><ul><li><a href="https://www.latexlive.com/##">在线图片转代码</a></li><li><a href="https://mathpix.com/">图片转代码软件</a></li><li><a href="https://www.amyxun.com/">公式编辑器转代码软件</a></li><li>LATEX 公式的跨栏显示：对于APS期刊（PRL，PRX，PRB，PRA，PRE…），跨栏长公式再简单不过了，仅需要\begin{widetext}就可以解决，而且格式、编号甚至分割线都自动完成，中间公式部分就用普通的公式输入命令即可，比如eqnarray，非常好用。需在aps双栏环境下，调用lipsum宏包。此方法在APS官网上也有详细说明。</li></ul><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\begin</span>&#123;widetext&#125;  </span><br><span class="line"><span class="keyword">\begin</span>&#123;eqnarray&#125;  </span><br><span class="line">公式内容  </span><br><span class="line"><span class="keyword">\end</span>&#123;eqnarray&#125;  </span><br><span class="line"><span class="keyword">\end</span>&#123;widetext&#125;</span><br></pre></td></tr></table></figure><h2 id="6-列表篇：">6.  列表篇：</h2><ul><li>无序列表：</li></ul><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\begin</span>&#123;itemize&#125;</span><br><span class="line"><span class="keyword">\item</span> </span><br><span class="line"><span class="keyword">\item</span> </span><br><span class="line"><span class="keyword">\item</span> </span><br><span class="line"><span class="keyword">\end</span>&#123;itemize&#125;</span><br></pre></td></tr></table></figure><ul><li>有序列表：</li></ul><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\begin</span>&#123;enumerate&#125;</span><br><span class="line"><span class="keyword">\item</span> </span><br><span class="line"><span class="keyword">\item</span> </span><br><span class="line"><span class="keyword">\item</span> </span><br><span class="line"><span class="keyword">\end</span>&#123;enumerate&#125;</span><br></pre></td></tr></table></figure><ul><li>描述列表：</li></ul><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\begin</span>&#123;description&#125;</span><br><span class="line"><span class="keyword">\item</span>[条目11] </span><br><span class="line"><span class="keyword">\item</span>[条目22] </span><br><span class="line"><span class="keyword">\item</span>[条目22] </span><br><span class="line"><span class="keyword">\end</span>&#123;description&#125;</span><br></pre></td></tr></table></figure><h2 id="9-算法步骤排版：">9.  算法步骤排版：</h2><ul><li>算法步骤代码：</li></ul><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\begin</span>&#123;algorithm&#125;</span><br><span class="line"><span class="keyword">\caption</span>&#123;误差逆传播算法&#125;<span class="keyword">\label</span>&#123;alg1&#125;</span><br><span class="line">    <span class="keyword">\begin</span>&#123;algorithmic&#125;[0]</span><br><span class="line">        <span class="keyword">\Require</span> 训练集<span class="built_in">$</span>D=&#123;(x<span class="built_in">_</span>k,y<span class="built_in">_</span>k)&#125;<span class="built_in">_</span>&#123;k=1&#125;<span class="built_in">^</span>&#123;m&#125;<span class="built_in">$</span>;学习率<span class="built_in">$</span><span class="keyword">\eta</span><span class="built_in">$</span>.</span><br><span class="line">    <span class="keyword">\end</span>&#123;algorithmic&#125;</span><br><span class="line">    <span class="keyword">\begin</span>&#123;algorithmic&#125;[1]</span><br><span class="line">        <span class="keyword">\State</span>&#123;在(0,1)范围内随机初始化网络中所有连接权和阈值&#125;</span><br><span class="line">        <span class="keyword">\Repeat</span></span><br><span class="line">        <span class="keyword">\ForAll</span>&#123;<span class="built_in">$</span>(x<span class="built_in">_</span>k,y<span class="built_in">_</span>k)<span class="keyword">\in</span> D<span class="built_in">$</span>&#125;</span><br><span class="line">        <span class="keyword">\State</span> 根据当前参数和式（5.3）计算当前样本的输出<span class="built_in">$</span><span class="keyword">\hat</span>&#123;y<span class="built_in">_</span>k&#125;<span class="built_in">$</span>;</span><br><span class="line">        <span class="keyword">\State</span> 根据式（5.10）计算输出层神经元的梯度项<span class="built_in">$</span>g<span class="built_in">_</span>j<span class="built_in">$</span>;</span><br><span class="line">        <span class="keyword">\State</span> 根据式（5.15）计算隐层神经元的梯度项<span class="built_in">$</span>e<span class="built_in">_</span>h<span class="built_in">$</span>;</span><br><span class="line">        <span class="keyword">\State</span> 根据式（5.11）-（5.14）更新连接权<span class="built_in">$</span>w<span class="built_in">_</span>&#123;hj&#125;<span class="built_in">$</span>,<span class="built_in">$</span>v<span class="built_in">_</span>&#123;ih&#125;<span class="built_in">$</span>与阈值<span class="built_in">$</span><span class="keyword">\theta</span><span class="built_in">_</span>j,<span class="keyword">\gamma</span><span class="built_in">_</span>h<span class="built_in">$</span></span><br><span class="line">        <span class="keyword">\EndFor</span></span><br><span class="line">        <span class="keyword">\Until</span> 达到停止条件</span><br><span class="line">        <span class="keyword">\Ensure</span> 连接权与阈值确定的多层前馈神经网络 </span><br><span class="line">    <span class="keyword">\end</span>&#123;algorithmic&#125;</span><br><span class="line"><span class="keyword">\end</span>&#123;algorithm&#125;</span><br></pre></td></tr></table></figure><h2 id="10-特殊符号排版">10. 特殊符号排版</h2><ul><li>摄氏度符号：<code>$^&#123;\circ&#125;$C</code></li></ul><h2 id="11-页眉页脚设置">11. 页眉页脚设置</h2><ul><li><a href="https://blog.csdn.net/u012176591/article/details/39925587">LaTeX设置页眉页脚</a></li></ul><h2 id="12-字体更改">12. 字体更改</h2><ul><li>上传字体文件更改特定字体</li></ul><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>&#123;beamer&#125;</span><br><span class="line"><span class="keyword">\usepackage</span>&#123;ctex&#125;</span><br><span class="line"><span class="keyword">\setCJKmainfont</span>&#123;FandolHei&#125;<span class="comment">% 更改为Overleaf支持的字体</span></span><br><span class="line"><span class="keyword">\setCJKmainfont</span>&#123;微软雅黑.ttf&#125;<span class="comment">% 更改为上传的特定字体</span></span><br></pre></td></tr></table></figure><ul><li><a href="https://cn.overleaf.com/learn/latex/Questions/Which_OTF_or_TTF_fonts_are_supported_via_fontspec%3F#Chinese">Overleaf支持的字体</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;latex-排版笔记&quot;&gt;&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mtext&gt;</summary>
      
    
    
    
    
    <category term="教程" scheme="https://planckzgh.github.io/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Git简明教程</title>
    <link href="https://planckzgh.github.io/2024/03/31/Git%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B/"/>
    <id>https://planckzgh.github.io/2024/03/31/Git%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B/</id>
    <published>2024-03-31T11:30:30.000Z</published>
    <updated>2024-08-01T13:08:13.049Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h2 id="参考资料">参考资料</h2><p><a href="https://www.liaoxuefeng.com/wiki/896043488029600">Git教程</a><br><a href="https://rogerdudler.github.io/git-guide/index.zh.html">git - 简明指南</a></p></blockquote><h2 id="个人项目的版本控制流">个人项目的版本控制流</h2><ol><li>下载安装git，进行user.name和user.email的配置</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;Your Name&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;planckgh@gmail.com&quot;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>完成ssh密钥配置</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;planckgh@gmail.com&quot;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>在本地工作目录新建git版本管理库</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><ol start="4"><li>新建工作文件(<code>test.c</code>)</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim test.c</span><br></pre></td></tr></table></figure><ol start="5"><li>添加改动文件至暂存区</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 单个文件</span></span><br><span class="line">git add test.c</span><br><span class="line"><span class="comment"># 所有文件</span></span><br><span class="line">git add .</span><br></pre></td></tr></table></figure><ol start="6"><li>完成阶段性工作后，提交至HEAD</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 无改动提交</span></span><br><span class="line">git commit --allow-empty -m <span class="string">&quot;text&quot;</span></span><br><span class="line"><span class="comment"># 改动提示不长</span></span><br><span class="line">git commit -m <span class="string">&quot;text&quot;</span></span><br><span class="line"><span class="comment"># 改动提示较长</span></span><br><span class="line">git commit</span><br></pre></td></tr></table></figure><p><img src="https://rogerdudler.github.io/git-guide/img/trees.png" alt=""></p><ol start="7"><li>创建分支&amp;跳转分支</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建分支</span></span><br><span class="line">git checkout -b pa2</span><br><span class="line"><span class="comment"># 跳转分支</span></span><br><span class="line">git checkout master</span><br><span class="line"><span class="comment"># 合并分支(将pa2合并到当前分支master)</span></span><br><span class="line">git merge pa2</span><br></pre></td></tr></table></figure><ol start="8"><li>查看版本提交记录</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span></span><br></pre></td></tr></table></figure><ol start="9"><li>回溯版本</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard 版本号</span><br></pre></td></tr></table></figure><ol start="10"><li>查看回溯历史</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reflog</span><br></pre></td></tr></table></figure><ol start="11"><li>推送至远程仓库<ol><li>在github上创建新仓库，获取仓库链接</li><li>将本地仓库与远程仓库进行关联</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin https://github.com/planckzgh/ROIC.git</span><br></pre></td></tr></table></figure><ol start="3"><li>将本地仓库推送至远程仓库</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push (-u) origin master</span><br></pre></td></tr></table></figure><ol start="4"><li>修改本地仓库关联链接</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote set-url origin https://github.com/planckzgh/ROIC.git</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;h2 id=&quot;参考资料&quot;&gt;参考资料&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.liaoxuefeng.com/wiki/896043488029600&quot;&gt;Git教程&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;https://rogerdudle</summary>
      
    
    
    
    
    <category term="教程" scheme="https://planckzgh.github.io/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>建立时间与保持时间</title>
    <link href="https://planckzgh.github.io/2024/03/23/%E5%BB%BA%E7%AB%8B%E6%97%B6%E9%97%B4%E4%B8%8E%E4%BF%9D%E6%8C%81%E6%97%B6%E9%97%B4/"/>
    <id>https://planckzgh.github.io/2024/03/23/%E5%BB%BA%E7%AB%8B%E6%97%B6%E9%97%B4%E4%B8%8E%E4%BF%9D%E6%8C%81%E6%97%B6%E9%97%B4/</id>
    <published>2024-03-23T14:26:05.000Z</published>
    <updated>2024-07-29T16:02:49.069Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>参考资料：</p><ul><li><a href="https://zhuanlan.zhihu.com/p/409230001">建立时间与保持时间</a></li><li><a href="https://zhuanlan.zhihu.com/p/161283550">一文解决关于建立保持时间的困惑</a></li></ul></blockquote><h2 id="理解">理解</h2><ul><li><strong>建立时间</strong>就是时钟触发事件来临之前，数据需要保持稳定的最小时间，以便数据能够被时钟正确的采样。</li><li><strong>保持时间</strong>就是时钟触发事件来临之后，数据需要保持稳定的最小时间，以便数据能够被电路准确的传输。</li></ul><p><img src="/imgs/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF.png" alt="数字电路.png"></p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><msub><mi>T</mi><mrow><mi>h</mi><mi>d</mi></mrow></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>≤</mo><msub><mi>T</mi><mrow><mi>c</mi><mi>q</mi></mrow></msub><mo>−</mo><msub><mi>T</mi><mrow><mi>s</mi><mi>k</mi><mi>e</mi><mi>w</mi></mrow></msub><mo>+</mo><msub><mi>T</mi><mrow><mi>c</mi><mi>o</mi><mi>m</mi><mi>b</mi></mrow></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><msub><mi>T</mi><mrow><mi>s</mi><mi>u</mi></mrow></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>≤</mo><msub><mi>T</mi><mrow><mi>c</mi><mi>l</mi><mi>k</mi></mrow></msub><mo>−</mo><msub><mover accent="true"><mi>T</mi><mo>^</mo></mover><mrow><mi>h</mi><mi>d</mi></mrow></msub></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}T_{hd}&amp;\leq T_{cq}-T_{skew}+T_{comb} \\T_{su}&amp;\leq T_{clk}-\hat{T}_{hd}\end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.10677em;vertical-align:-1.303385em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.803385em;"><span style="top:-3.9633849999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">h</span><span class="mord mathdefault mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.356615em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">s</span><span class="mord mathdefault mtight">u</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.303385em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.803385em;"><span style="top:-3.9633849999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">c</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">q</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">s</span><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight" style="margin-right:0.02691em;">w</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">c</span><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight">b</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.356615em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">c</span><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9467699999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span></span></span><span style="top:-3.25233em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.16666em;"><span class="mord">^</span></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">h</span><span class="mord mathdefault mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.303385em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p><img src="/imgs/su_hd_time.svg" alt="建立时间保持时间"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123; signal: [</span><br><span class="line">  &#123; name: &quot;clk&quot;,      wave: &quot;p..&quot;, node:&#x27;.ab&#x27;&#125;,</span><br><span class="line">  &#123; name: &quot;D1&quot;,       wave: &quot;01.&quot;, phase: 0.5&#125;,</span><br><span class="line">  &#123; name: &quot;Q1&quot;,       wave: &quot;01.&quot; ,phase:-1, node:&#x27;.c&#x27;&#125;,</span><br><span class="line">  &#123; name: &quot;clk_skew&quot;, wave: &quot;p..&quot;, node:&#x27;.de&#x27;, phase:-0.8&#125;,</span><br><span class="line">  &#123; name: &quot;D2&quot;,       wave: &quot;01.&quot;, phase:-3, node:&#x27;.f&#x27;&#125;,</span><br><span class="line">  ],</span><br><span class="line">  config: &#123; hscale: 5 &#125;,</span><br><span class="line">  edge: [&#x27;a-b Tclk&#x27;, &#x27;a-~c Tcq&#x27;, &#x27;c-~f Tcomb&#x27;, &#x27;a~-d Tskew&#x27;,&#x27;b-~e Tskew&#x27;, &#x27;d~-f &gt;Thd&#x27;, &#x27;f-~e &gt;Tsu&#x27;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="例题">例题</h2><p><strong>例1</strong>：考虑线网延迟，某电路各种延迟值（单位：ns）如下，时钟周期为 15ns，请判断该电路的建立时间和保持时间是否存在 violation ？</p><p><img src="/imgs/v2-3e4c3887cb341e4801ced1d4164f7_4ed585f31289403d8.jpg" alt=""></p><blockquote><p>答案：保持时间裕量为  1 ；建立时间 violation，裕量为 -4；<br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>T</mi><mrow><mi>h</mi><mi>d</mi></mrow></msub><mo>≤</mo><mi>min</mi><mo>⁡</mo><mo stretchy="false">(</mo><msub><mi>T</mi><mrow><mi>c</mi><mi>q</mi></mrow></msub><mo>+</mo><msub><mi>T</mi><mrow><mi>c</mi><mi>o</mi><mi>m</mi><mi>p</mi></mrow></msub><mo stretchy="false">)</mo><mo>−</mo><mi>max</mi><mo>⁡</mo><mo stretchy="false">(</mo><msub><mi>T</mi><mrow><mi>s</mi><mi>k</mi><mi>e</mi><mi>w</mi></mrow></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T_{hd} \leq \min(T_{cq}+T_{comp})-\max(T_{skew})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">h</span><span class="mord mathdefault mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mop">min</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">c</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">q</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">c</span><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight">p</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop">max</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">s</span><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight" style="margin-right:0.02691em;">w</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span><br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>T</mi><mrow><mi>s</mi><mi>u</mi></mrow></msub><mo>≤</mo><msub><mi>T</mi><mrow><mi>c</mi><mi>k</mi></mrow></msub><mo>−</mo><mi>max</mi><mo>⁡</mo><mo stretchy="false">(</mo><msub><mi>T</mi><mrow><mi>c</mi><mi>q</mi></mrow></msub><mo>+</mo><msub><mi>T</mi><mrow><mi>c</mi><mi>o</mi><mi>m</mi><mi>p</mi></mrow></msub><mo stretchy="false">)</mo><mo>+</mo><mi>min</mi><mo>⁡</mo><mo stretchy="false">(</mo><msub><mi>T</mi><mrow><mi>s</mi><mi>k</mi><mi>e</mi><mi>w</mi></mrow></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T_{su} \leq T_{ck} -  \max(T_{cq}+T_{comp})+\min(T_{skew})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">s</span><span class="mord mathdefault mtight">u</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">c</span><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mop">max</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">c</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">q</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">c</span><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight">p</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop">min</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">s</span><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight" style="margin-right:0.02691em;">w</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p></blockquote><hr><p><strong>例2</strong>： 一道知名公司的面试题：时钟周期为 T, 第一级触发器 D1 建立时间最大值为 T1max，最小值为 T1min。组合逻辑最大延迟为 T2max, 最小值为 T2min。问：第二级触发器 D2 的建立时间和保持时间应该满足什么条件？</p><blockquote><p>答案：<br>第二级触发器的建立时间与保持时间与第一级的触发器没有直接关系；<br>列出约束关系，并根据已知参数适当取舍，得到简化后的约束关系如下：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><msub><mi>T</mi><mrow><mi>h</mi><mi>d</mi></mrow></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>≤</mo><msub><mi>T</mi><mrow><mn>2</mn><mi>m</mi><mi>i</mi><mi>n</mi></mrow></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><msub><mi>T</mi><mrow><mi>s</mi><mi>u</mi></mrow></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>≤</mo><mi>T</mi><mo>−</mo><msub><mi>T</mi><mrow><mn>2</mn><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msub></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}T_{hd}&amp;\leq T_{2min} \\T_{su}&amp;\leq T-T_{2max}\end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.0000000000000004em;vertical-align:-1.2500000000000002em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.7500000000000002em;"><span style="top:-3.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">h</span><span class="mord mathdefault mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">s</span><span class="mord mathdefault mtight">u</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2500000000000002em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.7500000000000002em;"><span style="top:-3.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2500000000000002em;"><span></span></span></span></span></span></span></span></span></span></span></span></p></blockquote><hr><p><strong>例3</strong>：一种简单的分频电路如下所示。该触发器建立时间为 3ns, 保持时间为 3ns， 逻辑延迟为 6ns，两个反相器延迟为 1ns，连线延迟为 0。则该电路的最高工作频率是多少？<br><img src="/imgs/v2-a38a73c87486b4e4cf75996c60493_b75b5821e19244308.jpg" alt=""></p><blockquote><p>答案：<br>只有一个时钟，一个触发器，没有时钟偏移，clock path 的反相器延迟是迷惑项。<br>最高工作频率为 100MHz</p></blockquote><hr><p><strong>例4</strong>：<br>（1）以下电路<strong>固有的建立时间和保持时间</strong>？<br>（2）该电路最高的工作频率？<br><img src="/imgs/v2-65fe35f45522a25d7be37ec7812a0_ca136a3493e5472d9.jpg" alt=""><br><img src="/imgs/su_hd_time2.svg" alt=""></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123; signal: [</span><br><span class="line">  &#123; name: &quot;Clock&quot;,    wave: &quot;P...&quot;,node: &#x27;.ah&#x27;, phase: 0.8, period:2&#125;,</span><br><span class="line">  &#123;&#125;,</span><br><span class="line">  &#123; name: &quot;Data&quot;,     wave: &quot;====&quot;,node: &#x27;.d.e&#x27;, phase: 3.7, period: 2&#125;,</span><br><span class="line">  &#123;&#125;,</span><br><span class="line">  &#123; name: &quot;CK&quot;,       wave: &quot;P..&quot;, node: &#x27;.bg&#x27;, period: 2 &#125;,</span><br><span class="line">  &#123;&#125;,</span><br><span class="line">  &#123; name: &quot;D&quot;,        wave: &quot;====&quot;,node: &#x27;.c.f&#x27;, phase: 2.15, period: 2&#125;,</span><br><span class="line">  ],</span><br><span class="line">  config: &#123; hscale: 2 &#125;,</span><br><span class="line">  edge: [&#x27;b~-a Tskew&#x27;, &#x27;c-~d Tcomb&#x27;, &#x27;b~-c Tsu&#x27;, &#x27;a-~d 固有建立时间&#x27;,</span><br><span class="line">         &#x27;g~-f Thd&#x27;, &#x27;h-~e 固有保持时间&#x27;, &#x27;e-~f Tcomb&#x27;, &#x27;h~-g Tskew&#x27;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>答案：<br>该电路固有的建立时间为：2.1 + 2 - 1.2 = 2.9ns<br>固有的保持时间为：1.2 + 1.5 - 2.1 = 0.6ns<br>此电路仍然是自身到自身的反馈电路。所以没有时钟偏移，也无需考虑 T1 = 0.9ns 的延迟。所以最高工作频率为： 1 / (1.8 + 1.2 + 2)ns = 200MHz</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;参考资料：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/409230001&quot;&gt;建立时间与保持时间&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://zhuanlan.zhihu.c</summary>
      
    
    
    
    
    <category term="思考" scheme="https://planckzgh.github.io/tags/%E6%80%9D%E8%80%83/"/>
    
  </entry>
  
  <entry>
    <title>【VIM】Verilog开发环境配置</title>
    <link href="https://planckzgh.github.io/2024/02/01/%E3%80%90VIM%E3%80%91Verilog%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    <id>https://planckzgh.github.io/2024/02/01/%E3%80%90VIM%E3%80%91Verilog%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</id>
    <published>2024-02-01T12:55:17.000Z</published>
    <updated>2024-03-27T03:41:37.195Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vim-verilog开发环境配置">【VIM】Verilog开发环境配置</h1><h2 id="代码补全">代码补全</h2><ul><li>snippets</li></ul><h2 id="自动例化">自动例化</h2><ul><li>automatic-verilog</li></ul><h2 id="代码格式化">代码格式化</h2><ul><li>tabular</li></ul><h2 id="语法检查">语法检查</h2><ul><li>ale (linter:verilator)</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;vim-verilog开发环境配置&quot;&gt;【VIM】Verilog开发环境配置&lt;/h1&gt;
&lt;h2 id=&quot;代码补全&quot;&gt;代码补全&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;snippets&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;自动例化&quot;&gt;自动例化&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;aut</summary>
      
    
    
    
    
    <category term="基础设施" scheme="https://planckzgh.github.io/tags/%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD/"/>
    
  </entry>
  
  <entry>
    <title>Vimium简明教程</title>
    <link href="https://planckzgh.github.io/2024/01/31/Vimium%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B/"/>
    <id>https://planckzgh.github.io/2024/01/31/Vimium%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B/</id>
    <published>2024-01-31T04:57:15.000Z</published>
    <updated>2024-01-31T05:42:12.735Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vimium简明教程">Vimium简明教程</h1><h2 id="0-show-help">0. ? Show help</h2><h2 id="1-滚动跳转-j-k-d-u-h-l-gg-g-zh-zl">1. 滚动跳转: j,k,d,u,h,l,gg,G,zH,zL</h2><ul><li>j   Scroll down</li><li>k   Scroll up</li><li>dScroll a half page down</li><li>uScroll a half page up</li><li>hScroll left</li><li>lScroll right</li><li>ggScroll to the top of the page</li><li>GScroll to the bottom of the page</li><li>zHScroll all the way to the left</li><li>zLScroll all the way to the right</li><li>mCreate a new mark</li><li>`Go to a mark</li></ul><h2 id="2-刷新页面：r-x-x">2. 刷新页面：r,x,X</h2><ul><li>r   Reload the page</li><li>xClose current tab</li><li>XRestore closed tab</li></ul><h2 id="3-创建页面：p-p-gu-gu-ge-ge-t-yt">3. 创建页面：p,P,gu,gU,ge,gE,t,yt</h2><ul><li>pOpen the clipboard’s URL in the current tab</li><li>POpen the clipboard’s URL in a new tab</li><li>guGo up the URL hierarchy</li><li>gUGo to root of current URL hierarchy</li><li>geEdit the current URL</li><li>gEEdit the current URL and open in a new tab</li><li>tCreate new tab</li><li>ytDuplicate current tab</li></ul><h2 id="4-点击链接：f-f">4. 点击链接：f,F</h2><ul><li>fOpen a link in the current tab</li><li>FOpen a link in a new tab</li></ul><h2 id="5-复制内容：yy-yf-v-v">5. 复制内容：yy,yf,v,V</h2><ul><li>yyCopy the current URL to the clipboard</li><li>yfCopy a link URL to the clipboard</li><li>vEnter visual mode</li><li>VEnter visual line mode</li></ul><h2 id="6-搜索内容：-n-n-o-o-b-b-t">6. 搜索内容：/,n,N,o,O,b,B,T</h2><ul><li>/Enter find mode</li><li>nCycle forward to the next find match</li><li>NCycle backward to the previous find match</li><li>oOpen URL, bookmark or history entry</li><li>OOpen URL, bookmark or history entry in a new tab</li><li>bOpen a bookmark</li><li>BOpen a bookmark in a new tab</li><li>TSearch through your open tabs</li></ul><h2 id="7-切换页面：j-k-g0-g-h-l">7. 切换页面：J,K,^,g0,g$,H,L</h2><ul><li>J, Go one tab left</li><li>K, Go one tab right</li><li>^Go to previously-visited tab</li><li>g0Go to the first tab</li><li>g$Go to the last tab</li><li>HGo back in history</li><li>LGo forward in history</li></ul><h2 id="8-移动页面：w">8. 移动页面：W,&lt;&lt;,&gt;&gt;</h2><ul><li>W  Move tab to new window</li><li>&lt;&lt;Move tab to the left</li><li>&gt;&gt;Move tab to the right</li></ul><h2 id="9-其他操作：">9. 其他操作：</h2><ul><li>&lt;alt-p&gt;Pin or unpin current tab</li><li>&lt;alt-m&gt;Mute or unmute current tab</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;vimium简明教程&quot;&gt;Vimium简明教程&lt;/h1&gt;
&lt;h2 id=&quot;0-show-help&quot;&gt;0. ? Show help&lt;/h2&gt;
&lt;h2 id=&quot;1-滚动跳转-j-k-d-u-h-l-gg-g-zh-zl&quot;&gt;1. 滚动跳转: j,k,d,u,h,l,gg,</summary>
      
    
    
    
    
    <category term="教程" scheme="https://planckzgh.github.io/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>【vivado】VIO和ILA联合调试小技巧</title>
    <link href="https://planckzgh.github.io/2024/01/16/%E3%80%90vivado%E3%80%91VIO%E5%92%8CILA%E8%81%94%E5%90%88%E8%B0%83%E8%AF%95%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    <id>https://planckzgh.github.io/2024/01/16/%E3%80%90vivado%E3%80%91VIO%E5%92%8CILA%E8%81%94%E5%90%88%E8%B0%83%E8%AF%95%E5%B0%8F%E6%8A%80%E5%B7%A7/</id>
    <published>2024-01-16T05:18:37.000Z</published>
    <updated>2024-01-16T05:30:30.724Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vivado中vio-ip核的使用">Vivado中VIO IP核的使用</h1><h2 id="理解">理解</h2><p>相对于ILA更多的关注波形，VIO则专注于输入和输出关系的描述。个人理解为VIO就是一个便携测试，可以根据输入测试输出。类似于开关和LED仿真，相当于在数字电路中加入LED（输入）和开关(输出）。</p><h2 id="配置">配置</h2><p><img src="/imgs/a81b8328e37470507dcf6ae884e1c089.png" alt="a81b8328e37470507dcf6ae884e1c089.png"><br><img src="/imgs/77b7044ded3c4b5c928b31b28c6f51ce_16246caaad564a55b.png" alt="067d7b172dfa4bc9919a5355c99a66c3.png"><br><img src="/imgs/0ef05f246dc84095b29c22cd6d9d8edb_e1b1f43df33d44b08.png" alt="f03fc80e2b2f4b029e2bbe7dd9fabfb8.png"><br><img src="/imgs/5fef9da18d43478dab4ec902f7c1d533_340bf3662d634a8e8.png" alt="9f39c66459724763abfad713cf80d5b9.png"></p><h2 id="联调">联调</h2><p><img src="/imgs/612334be62f5812c20c374b7f83ef9d3.png" alt="612334be62f5812c20c374b7f83ef9d3.png"><br><img src="/imgs/134db90ff14790def0b904d983b3259e.png" alt="134db90ff14790def0b904d983b3259e.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;vivado中vio-ip核的使用&quot;&gt;Vivado中VIO IP核的使用&lt;/h1&gt;
&lt;h2 id=&quot;理解&quot;&gt;理解&lt;/h2&gt;
&lt;p&gt;相对于ILA更多的关注波形，VIO则专注于输入和输出关系的描述。个人理解为VIO就是一个便携测试，可以根据输入测试输出。类似于开关和L</summary>
      
    
    
    
    
    <category term="教程" scheme="https://planckzgh.github.io/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>win11下wsl2搭建vcs2016+verdi开发环境教程</title>
    <link href="https://planckzgh.github.io/2023/12/19/win11%E4%B8%8Bwsl2%E6%90%AD%E5%BB%BAvcs2016-verdi%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%95%99%E7%A8%8B/"/>
    <id>https://planckzgh.github.io/2023/12/19/win11%E4%B8%8Bwsl2%E6%90%AD%E5%BB%BAvcs2016-verdi%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%95%99%E7%A8%8B/</id>
    <published>2023-12-19T07:15:52.000Z</published>
    <updated>2024-07-14T12:44:35.318Z</updated>
    
    <content type="html"><![CDATA[<h1 id="win11下wsl2搭建vcs2016-verdi开发环境教程">win11下wsl2搭建vcs2016+verdi开发环境教程</h1><h2 id="1-资源获取">1 资源获取</h2><p>链接：<a href="https://pan.baidu.com/s/1SFCxy1CGoOGlp2gwk9imRw">https://pan.baidu.com/s/1SFCxy1CGoOGlp2gwk9imRw</a><br>提取码：1234<br>下载完成后拷贝进wsl2中<br><img src="/imgs/7e500024cee6df4eb326c5a7ce9cdd27.png" alt="文件内容"></p><h2 id="2-安装方法">2 安装方法</h2><h3 id="2-1-具体安装步骤">2.1 具体安装步骤</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 创建安装目录</span></span><br><span class="line">$ <span class="built_in">mkdir</span> vcs2016 verdi2016 scl_v11.9</span><br><span class="line"><span class="comment"># 2. 解压SynopsysInstaller.rar</span></span><br><span class="line">$ unrar x SynopsysInstaller.rar</span><br><span class="line"><span class="comment"># 3. 执行SynopsysInstaller_v3.3.run安装vcs、scl和verdi的安装器</span></span><br><span class="line">$ <span class="built_in">chmod</span> 777 SynopsysInstaller_v3.3.run</span><br><span class="line">$ ./SynopsysInstaller_v3.3.run</span><br><span class="line">$ Please specify installation directory [.]: ./</span><br><span class="line"><span class="comment"># 4. 安装csh</span></span><br><span class="line">$ sudo apt install csh</span><br><span class="line"><span class="comment"># 5. 运行安装器</span></span><br><span class="line">$ ./setup.sh</span><br><span class="line"><span class="comment"># 6. 根据提示依次安装vcs2016、scl_v11.9、verdi2016</span></span><br><span class="line">&lt;next&gt; &lt;选择安装源目录&gt; &lt;next&gt; &lt;next&gt; &lt;next&gt; &lt;选择linux64，next&gt; &lt;选择第1步创建的安装路径&gt; &lt;Accept Install&gt; &lt;Finish&gt; &lt;Dismiss&gt;</span><br><span class="line"><span class="comment"># 7. 获取mac地址（不清楚就百度一下）和hostname</span></span><br><span class="line">$ ifconfig</span><br><span class="line">$ hostname</span><br><span class="line"><span class="comment"># 8. 通过scl_keygen.exe获取许可证文件Synopsys.dat</span></span><br><span class="line"><span class="comment"># 在&lt;HOST Daemon&gt;和&lt;HOST ID Feature&gt;处填入mac地址</span></span><br><span class="line"><span class="comment"># 在&lt;HOST Name&gt;处填入hostname</span></span><br><span class="line"><span class="comment"># 修改&lt;EXPIRE&gt;为12-dec-2030</span></span><br><span class="line"><span class="comment"># 点击&lt;Generate&gt;生成许可证文件Synopsys.dat</span></span><br><span class="line"><span class="comment"># 9. 修改许可证文件第二行，增加snpslmd文件路径</span></span><br><span class="line">$ dos2unix Synopsys.dat</span><br><span class="line">$ vim Synopsys.dat</span><br><span class="line">$ &lt;2G<span class="variable">$a</span>&gt; scl_v11.9/amd64/bin/snpslmd</span><br><span class="line">$ <span class="built_in">mkdir</span> vcs2016/license</span><br><span class="line">$ <span class="built_in">mv</span> Synopsys.dat vcs2016/license/</span><br><span class="line"><span class="comment"># 10. 修改.bashrc文件，添加环境变量</span></span><br><span class="line">$ <span class="comment"># &lt;见下方&gt;</span></span><br><span class="line">$ <span class="built_in">source</span> ~/.bashrc</span><br><span class="line"><span class="comment"># 11. 激活license</span></span><br><span class="line">$ lmli</span><br><span class="line"><span class="comment"># 12. 启动dve和verdi</span></span><br><span class="line">$ dve</span><br><span class="line">$ verdi</span><br><span class="line"><span class="comment"># 其他（Debug）</span></span><br><span class="line">$ <span class="comment"># 下载gcc-4.8 g++-4.8的方法见下方</span></span><br><span class="line">$ sudo apt gcc-4.8 g++-4.8</span><br><span class="line">$ sudo apt install lsb-core libjpeg62</span><br><span class="line">$ <span class="comment"># 将libpng12.so.0拷贝进/usr/lib/x86_64-linux-gnu/目录内</span></span><br><span class="line">$ sudo apt update</span><br><span class="line">$ sudo apt upgrade</span><br><span class="line">$ sudo <span class="built_in">mkdir</span> /usr/tmp/</span><br></pre></td></tr></table></figure><h3 id="2-2-配置环境变量">2.2 配置环境变量</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># .bashrc文件</span></span><br><span class="line"><span class="comment">#vcs2016</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;/home/gh/app/vcs2016/gui/dve/bin:&quot;</span><span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;/home/gh/app/vcs2016/bin:&quot;</span><span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">export</span> VCS_HOME=<span class="string">&quot;/home/gh/app/vcs2016&quot;</span></span><br><span class="line"><span class="built_in">export</span> DVE_HOME=<span class="string">&quot;/home/gh/app/vcs2016/gui/dve&quot;</span></span><br><span class="line"><span class="built_in">export</span> LM_LICENSE_FILE=<span class="string">&quot;/home/gh/app/vcs2016/license/Synopsys.dat&quot;</span></span><br><span class="line"><span class="built_in">export</span> LM_LICENSE_FILE=27000@planckgh</span><br><span class="line"><span class="built_in">export</span> VCS_TARGET_ARCH=<span class="string">&quot;amd64&quot;</span></span><br><span class="line"><span class="built_in">export</span> VCS_ARCH_OVERRIDE=<span class="string">&quot;linux&quot;</span></span><br><span class="line"><span class="built_in">alias</span> verdi=<span class="string">&#x27;verdi -full64 &amp;&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> dve=<span class="string">&#x27;dve -full64 &amp;&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> lmli=<span class="string">&quot;/home/gh/app/scl_v11.9/amd64/bin/lmgrd -c /home/gh/app/vcs2016/license/Synopsys.dat&quot;</span></span><br><span class="line"><span class="comment">#verdi2016</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;/home/gh/app/verdi2016/bin:&quot;</span><span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">export</span> VERDI_HOME=<span class="string">&quot;/home/gh/app/verdi2016&quot;</span></span><br><span class="line"><span class="built_in">export</span> NOVAS_HOME=<span class="string">&quot;/home/gh/app/verdi2016&quot;</span></span><br><span class="line"><span class="comment">#scl_v11.9</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;/home/gh/app/scl_v11.9/amd64/bin:&quot;</span><span class="variable">$PATH</span></span><br></pre></td></tr></table></figure><h3 id="2-3-下载所需文件">2.3 下载所需文件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vim etc/apt/sources.list</span><br><span class="line"># 在文档后面增加</span><br><span class="line">deb http://dk.archive.ubuntu.com/ubuntu/ xenial main</span><br><span class="line">deb http://dk.archive.ubuntu.com/ubuntu/ xenial universe</span><br><span class="line">deb http://cz.archive.ubuntu.com/ubuntu xenial main</span><br><span class="line"># 然后更新镜像源</span><br><span class="line">$ sudo apt update</span><br><span class="line"># 安装gcc-4.8, g++-4.8</span><br><span class="line">sudo apt install gcc-4.8, g++-4.8</span><br></pre></td></tr></table></figure><p>注意，有时update时会报错, 提示GPG error缺少公钥，多见于添加了xenial版本(Ubuntu16)源。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">W: GPG error: http://dk.archive.ubuntu.com/ubuntu xenial InRelease: The following signatures couldn&#x27;t be verified because the public key is not available: NO_PUBKEY 40976EAF437D05B5 NO_PUBKEY 3B4FE6ACC0B21F32</span><br><span class="line">E: The repository &#x27;http://dk.archive.ubuntu.com/ubuntu xenial InRelease&#x27; is not signed.</span><br><span class="line">N: Updating from such a repository can&#x27;t be done securely, and is therefore disabled by default.</span><br><span class="line">N: See apt-secure(8) manpage for repository creation and user configuration details.</span><br><span class="line">W: GPG error: http://cz.archive.ubuntu.com/ubuntu xenial InRelease: The following signatures couldn&#x27;t be verified because the public key is not available: NO_PUBKEY 40976EAF437D05B5 NO_PUBKEY 3B4FE6ACC0B21F32</span><br><span class="line">E: The repository &#x27;http://cz.archive.ubuntu.com/ubuntu xenial InRelease&#x27; is not signed.</span><br><span class="line">N: Updating from such a repository can&#x27;t be done securely, and is therefore disabled by default.</span><br><span class="line">N: See apt-secure(8) manpage for repository creation and user configuration details.</span><br></pre></td></tr></table></figure><p><strong>解决办法</strong>：</p><p>根据报错信息“NO_PUBKEY 40976EAF437D05B5 NO_PUBKEY 3B4FE6ACC0B21F32”，将对应公钥导入即可</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 40976EAF437D05B5</span><br><span class="line">$ sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 3B4FE6ACC0B21F32</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;win11下wsl2搭建vcs2016-verdi开发环境教程&quot;&gt;win11下wsl2搭建vcs2016+verdi开发环境教程&lt;/h1&gt;
&lt;h2 id=&quot;1-资源获取&quot;&gt;1 资源获取&lt;/h2&gt;
&lt;p&gt;链接：&lt;a href=&quot;https://pan.baidu.c</summary>
      
    
    
    
    
    <category term="教程" scheme="https://planckzgh.github.io/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>从Ubuntu真机到WSL2</title>
    <link href="https://planckzgh.github.io/2023/12/03/%E4%BB%8EUbuntu%E7%B3%BB%E7%BB%9F%E5%88%B0WSL2/"/>
    <id>https://planckzgh.github.io/2023/12/03/%E4%BB%8EUbuntu%E7%B3%BB%E7%BB%9F%E5%88%B0WSL2/</id>
    <published>2023-12-03T07:41:51.000Z</published>
    <updated>2023-12-03T08:12:34.405Z</updated>
    
    <content type="html"><![CDATA[<h1 id="从ubuntu真机到wsl2">从Ubuntu真机到WSL2</h1><blockquote><p>记录一次被迫从Ubuntu22.04真机系统迁移到WSL2-Ubuntu22.04虚拟子系统的经历；<br>原因是运行vcs需要gcc4.8.5，与ysyx项目产生冲突，导致ysyx项目无法编译（动态库链接版本问题），使得真机无法继续进行该项目，于是使用wsl2继续进行ysyx，使用win11平台进行verification，好处是两者均位于同一个系统，使用起来切换自如。且win11系统使用体验确实好于Ubuntu系统，拥有丰富的软件支持。</p></blockquote><h2 id="1-wsl2的启用和ubuntu的安装">1 WSL2的启用和Ubuntu的安装</h2><ol><li>手动启用HyperV</li><li>管理员权限打开PowerShell，并运行，以启用虚拟子系统和虚拟化平台；并将wsl默认设置为wsl2</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart</span><br><span class="line">dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart</span><br><span class="line">wsl --set-default-version 2</span><br></pre></td></tr></table></figure><ol start="3"><li>手动更新<a href="https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi">最新Linux内核</a></li><li>Microsoft Store安装Ubuntu</li></ol><h2 id="2-terminal的美化和增强">2 Terminal的美化和增强</h2><h3 id="2-1-换源">2.1 换源</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sed -i &quot;s@http://.*archive.ubuntu.com@http://repo.huaweicloud.com@g&quot; /etc/apt/sources.list</span><br><span class="line">sed -i &quot;s@http://.*security.ubuntu.com@http://repo.huaweicloud.com@g&quot; /etc/apt/sources.list</span><br><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure><h3 id="2-2-美化">2.2 美化</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install zsh</span><br><span class="line">sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot;</span><br></pre></td></tr></table></figure><h3 id="2-3-增强">2.3 增强</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install git</span><br><span class="line">git clone https://github.com/zsh-users/zsh-syntax-highlighting.git</span><br></pre></td></tr></table></figure><h2 id="3-git配置">3 Git配置</h2><h3 id="3-1-安装和配置git">3.1 安装和配置git</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install git</span><br><span class="line">git config --global user.name &quot;your name&quot; # your student ID and name</span><br><span class="line">git config --global user.email &quot;your email&quot;   # your email</span><br><span class="line">git config --global core.editor vim                 # your favorite editor</span><br><span class="line">git config --global color.ui true</span><br></pre></td></tr></table></figure><h3 id="3-2-创建和查看公钥">3.2 创建和查看公钥</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -C &quot;your email&quot; -t rsa</span><br><span class="line">cat ~/.ssh/id_rsa.pub </span><br></pre></td></tr></table></figure><h3 id="3-3-复制公钥到github">3.3 复制公钥到github</h3><p><img src="/imgs/9c3d117a15db45b9b5ef15759a1aac51.png" alt=""><br><img src="/imgs/6527df4981834576b01f35b267aac0cd.png" alt=""></p><h2 id="4-vim配置">4 vim配置</h2><h3 id="4-1-配置-vimrc">4.1 配置.vimrc</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> nocompatible</span><br><span class="line">filetype on</span><br><span class="line"><span class="built_in">set</span> rtp+=~/.vim/bundle/Vundle.vim</span><br><span class="line">call vundle<span class="comment">#begin()</span></span><br><span class="line"><span class="string">&quot; 插件配置 &quot;</span></span><br><span class="line"><span class="string">&quot;</span></span><br><span class="line"><span class="string">&quot;</span> YouCompleteMe:语句补全插件</span><br><span class="line"><span class="built_in">set</span> runtimepath+=~/.vim/bundle/YouCompleteMe</span><br><span class="line">autocmd InsertLeave * <span class="keyword">if</span> pumvisible() == 0|pclose|endif<span class="string">&quot;离开插入模式后自动关闭预览窗口&quot;</span></span><br><span class="line"><span class="built_in">let</span> g:ycm_collect_identifiers_from_tags_files = 1           <span class="string">&quot; 开启 YCM基于标签引擎</span></span><br><span class="line"><span class="string">let g:ycm_collect_identifiers_from_comments_and_strings = 1 &quot;</span> 注释与字符串中的内容也用于补全</span><br><span class="line"><span class="built_in">let</span> g:syntastic_ignore_files=[<span class="string">&quot;.*\.py$&quot;</span>]</span><br><span class="line"><span class="built_in">let</span> g:ycm_seed_identifiers_with_syntax = 1                  <span class="string">&quot; 语法关键字补全</span></span><br><span class="line"><span class="string">let g:ycm_complete_in_comments = 1</span></span><br><span class="line"><span class="string">let g:ycm_confirm_extra_conf = 0                            &quot;</span> 关闭加载.ycm_extra_conf.py提示</span><br><span class="line"><span class="built_in">let</span> g:ycm_key_list_select_completion = [<span class="string">&#x27;&lt;c-n&gt;&#x27;</span>, <span class="string">&#x27;&lt;Down&gt;&#x27;</span>]  <span class="string">&quot; 映射按键,没有这个会拦截掉tab, 导致其他插件的tab不能用.</span></span><br><span class="line"><span class="string">let g:ycm_key_list_previous_completion = [&#x27;&lt;c-p&gt;&#x27;, &#x27;&lt;Up&gt;&#x27;]</span></span><br><span class="line"><span class="string">let g:ycm_complete_in_comments = 1                          &quot;</span> 在注释输入中也能补全</span><br><span class="line"><span class="built_in">let</span> g:ycm_complete_in_strings = 1                           <span class="string">&quot; 在字符串输入中也能补全</span></span><br><span class="line"><span class="string">let g:ycm_collect_identifiers_from_comments_and_strings = 1 &quot;</span> 注释和字符串中的文字也会被收入补全</span><br><span class="line"><span class="built_in">let</span> g:ycm_global_ycm_extra_conf=<span class="string">&#x27;~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py&#x27;</span></span><br><span class="line"><span class="built_in">let</span> g:ycm_show_diagnostics_ui = 0                           <span class="string">&quot; 禁用语法检查</span></span><br><span class="line"><span class="string">inoremap &lt;expr&gt; &lt;CR&gt; pumvisible() ? &quot;</span>\&lt;C-y&gt;<span class="string">&quot; : &quot;</span>\&lt;CR&gt;<span class="string">&quot;             &quot;</span> 回车即选中当前项</span><br><span class="line">nnoremap &lt;c-j&gt; :YcmCompleter GoToDefinitionElseDeclaration&lt;CR&gt;     <span class="string">&quot; 跳转到定义处</span></span><br><span class="line"><span class="string">let g:ycm_min_num_of_chars_for_completion=2                 &quot;</span> 从第2个键入字符就开始罗列匹配项</span><br><span class="line"><span class="string">&quot;</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">&quot;</span> github 仓库中的插件 <span class="string">&quot;</span></span><br><span class="line"><span class="string">Plugin &#x27;VundleVim/Vundle.vim&#x27;</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">Plugin &#x27;vim-airline/vim-airline&#x27;</span></span><br><span class="line"><span class="string">&quot;</span>vim-airline配置:优化vim界面<span class="string">&quot;</span></span><br><span class="line"><span class="string">&quot;</span><span class="built_in">let</span> g:airline<span class="comment">#extensions#tabline#enabled = 1</span></span><br><span class="line"><span class="string">&quot; airline设置</span></span><br><span class="line"><span class="string">&quot;</span> 显示颜色</span><br><span class="line"><span class="built_in">set</span> t_Co=256</span><br><span class="line"><span class="built_in">set</span> background=dark</span><br><span class="line"><span class="built_in">set</span> laststatus=2</span><br><span class="line"><span class="string">&quot; 使用powerline打过补丁的字体</span></span><br><span class="line"><span class="string">let g:airline_powerline_fonts = 1</span></span><br><span class="line"><span class="string">&quot;</span> 开启tabline</span><br><span class="line"><span class="built_in">let</span> g:airline<span class="comment">#extensions#tabline#enabled = 1</span></span><br><span class="line"><span class="string">&quot; tabline中当前buffer两端的分隔字符</span></span><br><span class="line"><span class="string">let g:airline#extensions#tabline#left_sep = &#x27; &#x27;</span></span><br><span class="line"><span class="string">&quot;</span> tabline中未激活buffer两端的分隔字符</span><br><span class="line"><span class="built_in">let</span> g:airline<span class="comment">#extensions#tabline#left_alt_sep = &#x27; &#x27;</span></span><br><span class="line"><span class="string">&quot; tabline中buffer显示编号</span></span><br><span class="line"><span class="string">let g:airline#extensions#tabline#buffer_nr_show = 1</span></span><br><span class="line"><span class="string">&quot;</span> 映射切换buffer的键位</span><br><span class="line">nnoremap [b :bp&lt;CR&gt;</span><br><span class="line">nnoremap ]b :bn&lt;CR&gt;</span><br><span class="line"><span class="string">&quot; 映射&lt;leader&gt;num到num buffer</span></span><br><span class="line"><span class="string">map &lt;leader&gt;1 :b 1&lt;CR&gt;</span></span><br><span class="line"><span class="string">map &lt;leader&gt;2 :b 2&lt;CR&gt;</span></span><br><span class="line"><span class="string">map &lt;leader&gt;3 :b 3&lt;CR&gt;</span></span><br><span class="line"><span class="string">map &lt;leader&gt;4 :b 4&lt;CR&gt;</span></span><br><span class="line"><span class="string">map &lt;leader&gt;5 :b 5&lt;CR&gt;</span></span><br><span class="line"><span class="string">map &lt;leader&gt;6 :b 6&lt;CR&gt;</span></span><br><span class="line"><span class="string">map &lt;leader&gt;7 :b 7&lt;CR&gt;</span></span><br><span class="line"><span class="string">map &lt;leader&gt;8 :b 8&lt;CR&gt;</span></span><br><span class="line"><span class="string">map &lt;leader&gt;9 :b 9&lt;CR&gt;</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">&quot;</span> vim-scripts 中的插件 <span class="string">&quot;</span></span><br><span class="line"><span class="string">Plugin &#x27;taglist.vim&#x27;</span></span><br><span class="line"><span class="string">&quot;</span>ctags 配置:F3快捷键显示程序中的各种tags，包括变量和函数等。</span><br><span class="line">map &lt;F3&gt; :TlistToggle&lt;CR&gt;</span><br><span class="line"><span class="built_in">let</span> Tlist_Use_Right_Window=1</span><br><span class="line"><span class="built_in">let</span> Tlist_Show_One_File=1</span><br><span class="line"><span class="built_in">let</span> Tlist_Exit_OnlyWindow=1</span><br><span class="line"><span class="built_in">let</span> Tlist_WinWidt=25</span><br><span class="line"> </span><br><span class="line">Plugin <span class="string">&#x27;The-NERD-tree&#x27;</span></span><br><span class="line"><span class="string">&quot;NERDTree 配置:F2快捷键显示当前目录树</span></span><br><span class="line"><span class="string">map &lt;F2&gt; :NERDTreeToggle&lt;CR&gt;</span></span><br><span class="line"><span class="string">let NERDTreeWinSize=25 </span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">Plugin &#x27;indentLine.vim&#x27;</span></span><br><span class="line"><span class="string">Plugin &#x27;delimitMate.vim&#x27;</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">&quot;</span> 非 github 仓库的插件<span class="string">&quot;</span></span><br><span class="line"><span class="string">&quot;</span> Plugin <span class="string">&#x27;git://git.wincent.com/command-t.git&#x27;</span></span><br><span class="line"><span class="string">&quot; 本地仓库的插件 &quot;</span></span><br><span class="line"> </span><br><span class="line">call vundle<span class="comment">#end()</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line"><span class="string">&quot;&quot;</span>新文件自动填补</span><br><span class="line"><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="string">&quot;新建.c,.h,.sh,.v文件，自动插入文件头 </span></span><br><span class="line"><span class="string">autocmd BufNewFile *.cpp,*.[chv],*.sv,*.sh, exec &quot;</span>:call SetTitle()<span class="string">&quot; </span></span><br><span class="line"><span class="string">&quot;</span><span class="string">&quot;定义函数SetTitle，自动插入文件头 </span></span><br><span class="line"><span class="string">func SetTitle() </span></span><br><span class="line"><span class="string">  &quot;</span>如果文件类型为.sh文件 </span><br><span class="line">  <span class="keyword">if</span> &amp;filetype == <span class="string">&#x27;sh&#x27;</span> </span><br><span class="line">    call setline(1, <span class="string">&quot;##########################################################################&quot;</span>) </span><br><span class="line">    call append(line(<span class="string">&quot;.&quot;</span>), <span class="string">&quot;# File Name: &quot;</span>.<span class="built_in">expand</span>(<span class="string">&quot;%&quot;</span>)) </span><br><span class="line">    call append(line(<span class="string">&quot;.&quot;</span>)+1, <span class="string">&quot;# Author: planckgh&quot;</span>) </span><br><span class="line">    call append(line(<span class="string">&quot;.&quot;</span>)+2, <span class="string">&quot;# Mail: planckgh@gmail.com&quot;</span>) </span><br><span class="line">    call append(line(<span class="string">&quot;.&quot;</span>)+3, <span class="string">&quot;# Created Time: &quot;</span>.strftime(<span class="string">&quot;%c&quot;</span>)) </span><br><span class="line">    call append(line(<span class="string">&quot;.&quot;</span>)+4, <span class="string">&quot;#########################################################################&quot;</span>) </span><br><span class="line">    call append(line(<span class="string">&quot;.&quot;</span>)+5, <span class="string">&quot;#!/bin/bash&quot;</span>)</span><br><span class="line">    call append(line(<span class="string">&quot;.&quot;</span>)+8, <span class="string">&quot;&quot;</span>)</span><br><span class="line">  <span class="keyword">else</span> </span><br><span class="line">    call setline(1, <span class="string">&quot;/*************************************************************************&quot;</span>) </span><br><span class="line">    call append(line(<span class="string">&quot;.&quot;</span>),   <span class="string">&quot;  &gt; File Name: &quot;</span>.<span class="built_in">expand</span>(<span class="string">&quot;%&quot;</span>)) </span><br><span class="line">    call append(line(<span class="string">&quot;.&quot;</span>)+1, <span class="string">&quot;  &gt; Author: planckgh&quot;</span>) </span><br><span class="line">    call append(line(<span class="string">&quot;.&quot;</span>)+2, <span class="string">&quot;  &gt; Mail: planckgh@gmail.com &quot;</span>) </span><br><span class="line">    call append(line(<span class="string">&quot;.&quot;</span>)+3, <span class="string">&quot;  &gt; Description: &quot;</span>)</span><br><span class="line">    call append(line(<span class="string">&quot;.&quot;</span>)+4, <span class="string">&quot;  &gt; Created Time: &quot;</span>.strftime(<span class="string">&quot;%c&quot;</span>)) </span><br><span class="line">    call append(line(<span class="string">&quot;.&quot;</span>)+5, <span class="string">&quot; ************************************************************************/&quot;</span>) </span><br><span class="line">    call append(line(<span class="string">&quot;.&quot;</span>)+6, <span class="string">&quot;&quot;</span>)</span><br><span class="line">  endif</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> <span class="built_in">expand</span>(<span class="string">&quot;%:e&quot;</span>) == <span class="string">&#x27;cpp&#x27;</span></span><br><span class="line">    call append(line(<span class="string">&quot;.&quot;</span>)+7, <span class="string">&quot;#include&lt;iostream&gt;&quot;</span>)</span><br><span class="line">    call append(line(<span class="string">&quot;.&quot;</span>)+8, <span class="string">&quot;using namespace std;&quot;</span>)</span><br><span class="line">    call append(line(<span class="string">&quot;.&quot;</span>)+9, <span class="string">&quot;int main(int argc, char *argv[])&quot;</span>)</span><br><span class="line">    call append(line(<span class="string">&quot;.&quot;</span>)+10, <span class="string">&quot;&#123;&quot;</span>)</span><br><span class="line">    call append(line(<span class="string">&quot;.&quot;</span>)+11, <span class="string">&quot;&quot;</span>)</span><br><span class="line">    call append(line(<span class="string">&quot;.&quot;</span>)+12, <span class="string">&quot;    return 0;&quot;</span>)</span><br><span class="line">    call append(line(<span class="string">&quot;.&quot;</span>)+13, <span class="string">&quot;&#125;&quot;</span>)</span><br><span class="line">  endif</span><br><span class="line">  <span class="keyword">if</span> <span class="built_in">expand</span>(<span class="string">&quot;%:e&quot;</span>) == <span class="string">&#x27;c&#x27;</span></span><br><span class="line">    call append(line(<span class="string">&quot;.&quot;</span>)+7, <span class="string">&quot;#include&lt;stdio.h&gt;&quot;</span>)</span><br><span class="line">    call append(line(<span class="string">&quot;.&quot;</span>)+8, <span class="string">&quot;int main(int argc, char *argv[])&quot;</span>)</span><br><span class="line">    call append(line(<span class="string">&quot;.&quot;</span>)+9, <span class="string">&quot;&#123;&quot;</span>)</span><br><span class="line">    call append(line(<span class="string">&quot;.&quot;</span>)+10, <span class="string">&quot;&quot;</span>)</span><br><span class="line">    call append(line(<span class="string">&quot;.&quot;</span>)+11, <span class="string">&quot;    return 0;&quot;</span>)</span><br><span class="line">    call append(line(<span class="string">&quot;.&quot;</span>)+12, <span class="string">&quot;&#125;&quot;</span>)</span><br><span class="line">  endif</span><br><span class="line">  <span class="keyword">if</span> <span class="built_in">expand</span>(<span class="string">&quot;%:e&quot;</span>) == <span class="string">&#x27;h&#x27;</span></span><br><span class="line">  call append(line(<span class="string">&quot;.&quot;</span>)+7, <span class="string">&quot;#ifndef __&quot;</span>.toupper(<span class="built_in">expand</span>(<span class="string">&quot;%:r&quot;</span>)).<span class="string">&quot;_H__&quot;</span>)</span><br><span class="line">  call append(line(<span class="string">&quot;.&quot;</span>)+8, <span class="string">&quot;#define __&quot;</span>.toupper(<span class="built_in">expand</span>(<span class="string">&quot;%:r&quot;</span>)).<span class="string">&quot;_H__&quot;</span>)</span><br><span class="line">  call append(line(<span class="string">&quot;.&quot;</span>)+9, <span class="string">&quot;#include&lt;stdio.h&gt;&quot;</span>)</span><br><span class="line">  call append(line(<span class="string">&quot;.&quot;</span>)+10, <span class="string">&quot;&quot;</span>)</span><br><span class="line">  call append(line(<span class="string">&quot;.&quot;</span>)+11, <span class="string">&quot;&quot;</span>)</span><br><span class="line">  call append(line(<span class="string">&quot;.&quot;</span>)+12, <span class="string">&quot;&quot;</span>)</span><br><span class="line">  call append(line(<span class="string">&quot;.&quot;</span>)+13, <span class="string">&quot;&quot;</span>)</span><br><span class="line">  call append(line(<span class="string">&quot;.&quot;</span>)+14, <span class="string">&quot;#endif&quot;</span>)</span><br><span class="line">  endif</span><br><span class="line">  <span class="keyword">if</span> &amp;filetype == <span class="string">&#x27;verilog&#x27;</span></span><br><span class="line">    call append(line(<span class="string">&quot;.&quot;</span>)+7, <span class="string">&quot;module &quot;</span>.<span class="built_in">expand</span>(<span class="string">&quot;%:r&quot;</span>).<span class="string">&quot;(&quot;</span>)</span><br><span class="line">    call append(line(<span class="string">&quot;.&quot;</span>)+8, <span class="string">&quot;    input&quot;</span>)</span><br><span class="line">    call append(line(<span class="string">&quot;.&quot;</span>)+9, <span class="string">&quot;    output&quot;</span>)</span><br><span class="line">    call append(line(<span class="string">&quot;.&quot;</span>)+10, <span class="string">&quot;);&quot;</span>)</span><br><span class="line">    call append(line(<span class="string">&quot;.&quot;</span>)+11, <span class="string">&quot;&quot;</span>)</span><br><span class="line">    call append(line(<span class="string">&quot;.&quot;</span>)+12, <span class="string">&quot;&quot;</span>)</span><br><span class="line">    call append(line(<span class="string">&quot;.&quot;</span>)+13, <span class="string">&quot;&quot;</span>)</span><br><span class="line">  call append(line(<span class="string">&quot;.&quot;</span>)+14, <span class="string">&quot;endmodule&quot;</span>)</span><br><span class="line">  endif</span><br><span class="line"><span class="keyword">if</span> &amp;filetype == <span class="string">&#x27;systemverilog&#x27;</span></span><br><span class="line">    call append(line(<span class="string">&quot;.&quot;</span>)+7, <span class="string">&quot;class &quot;</span>.<span class="built_in">expand</span>(<span class="string">&quot;%:r&quot;</span>).<span class="string">&quot;;&quot;</span>)</span><br><span class="line">    call append(line(<span class="string">&quot;.&quot;</span>)+8, <span class="string">&quot;&quot;</span>)</span><br><span class="line">    call append(line(<span class="string">&quot;.&quot;</span>)+9, <span class="string">&quot;&quot;</span>)</span><br><span class="line">    call append(line(<span class="string">&quot;.&quot;</span>)+10, <span class="string">&quot;&quot;</span>)</span><br><span class="line">    call append(line(<span class="string">&quot;.&quot;</span>)+11, <span class="string">&quot;&quot;</span>)</span><br><span class="line">    call append(line(<span class="string">&quot;.&quot;</span>)+12, <span class="string">&quot;&quot;</span>)</span><br><span class="line">    call append(line(<span class="string">&quot;.&quot;</span>)+13, <span class="string">&quot;&quot;</span>)</span><br><span class="line">call append(line(<span class="string">&quot;.&quot;</span>)+14, <span class="string">&quot;endclass&quot;</span>)</span><br><span class="line">endif</span><br><span class="line"></span><br><span class="line">  <span class="string">&quot;新建文件后，自动定位到文件末尾</span></span><br><span class="line"><span class="string">  autocmd BufNewFile * normal 5G$</span></span><br><span class="line"><span class="string">endfunc </span></span><br><span class="line"><span class="string">&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line"><span class="string">&quot;&quot;</span>键盘命令</span><br><span class="line"><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">nmap &lt;leader&gt;w :w!&lt;cr&gt;</span></span><br><span class="line"><span class="string">nmap &lt;leader&gt;f :find&lt;cr&gt;</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">&quot;</span> 映射全选+复制 ctrl+a</span><br><span class="line">map &lt;C-A&gt; ggVGY</span><br><span class="line">map! &lt;C-A&gt; &lt;Esc&gt;ggVGY</span><br><span class="line">map &lt;F12&gt; gg=G</span><br><span class="line"><span class="string">&quot; 选中状态下 Ctrl+c 复制</span></span><br><span class="line"><span class="string">vmap &lt;C-c&gt; &quot;</span>+y</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">&quot;</span><span class="string">&quot;实用设置</span></span><br><span class="line"><span class="string">&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">&quot;</span> 设置当文件被改动时自动载入</span><br><span class="line"><span class="built_in">set</span> autoread</span><br><span class="line"><span class="string">&quot; quickfix模式</span></span><br><span class="line"><span class="string">autocmd FileType c,cpp map &lt;buffer&gt; &lt;leader&gt;&lt;space&gt; :w&lt;cr&gt;:make&lt;cr&gt;</span></span><br><span class="line"><span class="string">&quot;</span>代码补全 </span><br><span class="line"><span class="built_in">set</span> completeopt=preview,menu </span><br><span class="line"><span class="string">&quot;允许插件  </span></span><br><span class="line"><span class="string">filetype plugin on</span></span><br><span class="line"><span class="string">&quot;</span>共享剪贴板  </span><br><span class="line"><span class="built_in">set</span> clipboard=unnamedplus </span><br><span class="line"><span class="string">&quot;从不备份  </span></span><br><span class="line"><span class="string">set nobackup</span></span><br><span class="line"><span class="string">&quot;</span>make 运行</span><br><span class="line">:<span class="built_in">set</span> makeprg=g++\ -Wall\ \ %</span><br><span class="line"><span class="string">&quot;自动保存</span></span><br><span class="line"><span class="string">set autowrite</span></span><br><span class="line"><span class="string">set ruler                   &quot;</span> 打开状态栏标尺</span><br><span class="line"><span class="string">&quot;set cursorline              &quot;</span> 突出显示当前行</span><br><span class="line"><span class="built_in">set</span> magic                   <span class="string">&quot; 设置魔术</span></span><br><span class="line"><span class="string">set guioptions-=T           &quot;</span> 隐藏工具栏</span><br><span class="line"><span class="built_in">set</span> guioptions-=m           <span class="string">&quot; 隐藏菜单栏</span></span><br><span class="line"><span class="string">&quot;</span><span class="built_in">set</span> statusline=\ %&lt;%F[%1*%M%*%n%R%H]%=\ %y\ %0(%&#123;&amp;fileformat&#125;\ %&#123;&amp;encoding&#125;\ %c:%l/%L%)\</span><br><span class="line"><span class="string">&quot; 设置在状态行显示的信息</span></span><br><span class="line"><span class="string">set foldcolumn=0</span></span><br><span class="line"><span class="string">set foldmethod=indent </span></span><br><span class="line"><span class="string">set foldlevel=3 </span></span><br><span class="line"><span class="string">set foldenable              &quot;</span> 开始折叠</span><br><span class="line"><span class="string">&quot; 不要使用vi的键盘模式，而是vim自己的</span></span><br><span class="line"><span class="string">set nocompatible</span></span><br><span class="line"><span class="string">&quot;</span> 语法高亮</span><br><span class="line"><span class="built_in">set</span> syntax=on</span><br><span class="line"><span class="string">&quot; 去掉输入错误的提示声音</span></span><br><span class="line"><span class="string">set noeb</span></span><br><span class="line"><span class="string">&quot;</span> 在处理未保存或只读文件的时候，弹出确认</span><br><span class="line"><span class="built_in">set</span> confirm</span><br><span class="line"><span class="string">&quot; 自动缩进</span></span><br><span class="line"><span class="string">set autoindent</span></span><br><span class="line"><span class="string">set cindent</span></span><br><span class="line"><span class="string">&quot;</span> Tab键的宽度</span><br><span class="line"><span class="built_in">set</span> tabstop=2</span><br><span class="line"><span class="string">&quot; 统一缩进为2</span></span><br><span class="line"><span class="string">set softtabstop=2</span></span><br><span class="line"><span class="string">set shiftwidth=2</span></span><br><span class="line"><span class="string">&quot;</span> 不要用空格代替制表符</span><br><span class="line"><span class="built_in">set</span> noexpandtab</span><br><span class="line"><span class="string">&quot; 在行和段开始处使用制表符</span></span><br><span class="line"><span class="string">set smarttab</span></span><br><span class="line"><span class="string">&quot;</span> 显示行号</span><br><span class="line"><span class="built_in">set</span> number</span><br><span class="line"><span class="string">&quot; toumingbeijing</span></span><br><span class="line"><span class="string">hi Normal ctermfg=10 ctermbg=none</span></span><br><span class="line"><span class="string">&quot;</span> au GUIEnter * call libcallnr(<span class="string">&quot;vimtweak.dll&quot;</span>, <span class="string">&quot;SetAlpha&quot;</span>, 15)</span><br><span class="line"><span class="string">&quot; 历史记录数</span></span><br><span class="line"><span class="string">set history=1000</span></span><br><span class="line"><span class="string">&quot;</span>禁止生成临时文件</span><br><span class="line"><span class="built_in">set</span> nobackup</span><br><span class="line"><span class="built_in">set</span> noswapfile</span><br><span class="line"><span class="string">&quot;搜索忽略大小写</span></span><br><span class="line"><span class="string">set ignorecase</span></span><br><span class="line"><span class="string">&quot;</span>搜索逐字符高亮</span><br><span class="line"><span class="built_in">set</span> hlsearch</span><br><span class="line"><span class="built_in">set</span> incsearch</span><br><span class="line"><span class="string">&quot;行内替换</span></span><br><span class="line"><span class="string">set gdefault</span></span><br><span class="line"><span class="string">&quot;</span>编码设置</span><br><span class="line"><span class="built_in">set</span> enc=utf-8</span><br><span class="line"><span class="built_in">set</span> fencs=utf-8,ucs-bom,shift-jis,gb18030,gbk,gb2312,cp936</span><br><span class="line"><span class="string">&quot;语言设置</span></span><br><span class="line"><span class="string">set langmenu=zh_CN.UTF-8</span></span><br><span class="line"><span class="string">set helplang=cn</span></span><br><span class="line"><span class="string">&quot;</span> 我的状态行显示的内容（包括文件类型和解码）</span><br><span class="line"><span class="built_in">set</span> statusline=%F%m%r%h%w\ [FORMAT=%&#123;&amp;ff&#125;]\ [TYPE=%Y]\ [POS=%l,%v][%p%%]\ %&#123;strftime(\&quot;%d/%m/%y\ -\ %H:%M\&quot;)&#125;</span><br><span class="line"><span class="built_in">set</span> statusline=[%F]%y%r%m%*%=[Line:%l/%L,Column:%c][%p%%]</span><br><span class="line"><span class="string">&quot; 总是显示状态行</span></span><br><span class="line"><span class="string">set laststatus=2</span></span><br><span class="line"><span class="string">&quot;</span> 命令行（在状态行下）的高度，默认为1，这里是2</span><br><span class="line"><span class="built_in">set</span> cmdheight=2</span><br><span class="line"><span class="string">&quot; 侦测文件类型</span></span><br><span class="line"><span class="string">filetype on</span></span><br><span class="line"><span class="string">&quot;</span> 载入文件类型插件</span><br><span class="line">filetype plugin on</span><br><span class="line"><span class="string">&quot; 为特定文件类型载入相关缩进文件</span></span><br><span class="line"><span class="string">filetype indent on</span></span><br><span class="line"><span class="string">&quot;</span> 保存全局变量</span><br><span class="line"><span class="built_in">set</span> viminfo+=!</span><br><span class="line"><span class="string">&quot; 带有如下符号的单词不要被换行分割</span></span><br><span class="line"><span class="string">set iskeyword+=_,$,@,%,#,-</span></span><br><span class="line"><span class="string">&quot;</span> 字符间插入的像素行数目</span><br><span class="line"><span class="built_in">set</span> linespace=0</span><br><span class="line"><span class="string">&quot; 增强模式中的命令行自动完成操作</span></span><br><span class="line"><span class="string">set wildmenu</span></span><br><span class="line"><span class="string">&quot;</span> 使回格键（backspace）正常处理indent, eol, start等</span><br><span class="line"><span class="built_in">set</span> backspace=2</span><br><span class="line"><span class="string">&quot; 允许backspace和光标键跨越行边界</span></span><br><span class="line"><span class="string">set whichwrap+=&lt;,&gt;,h,l</span></span><br><span class="line"><span class="string">&quot;</span> 可以在buffer的任何地方使用鼠标（类似office中在工作区双击鼠标定位）</span><br><span class="line"><span class="built_in">set</span> mouse=a</span><br><span class="line"><span class="built_in">set</span> selection=exclusive</span><br><span class="line"><span class="built_in">set</span> selectmode=mouse,key</span><br><span class="line"><span class="string">&quot; 通过使用: commands命令，告诉我们文件的哪一行被改变过</span></span><br><span class="line"><span class="string">set report=0</span></span><br><span class="line"><span class="string">&quot;</span> 在被分割的窗口间显示空白，便于阅读</span><br><span class="line"><span class="built_in">set</span> fillchars=vert:\ ,stl:\ ,stlnc:\</span><br><span class="line"><span class="string">&quot; 高亮显示匹配的括号</span></span><br><span class="line"><span class="string">set showmatch</span></span><br><span class="line"><span class="string">&quot;</span> 匹配括号高亮的时间（单位是十分之一秒）</span><br><span class="line"><span class="built_in">set</span> matchtime=1</span><br><span class="line"><span class="string">&quot; 光标移动到buffer的顶部和底部时保持3行距离</span></span><br><span class="line"><span class="string">set scrolloff=3</span></span><br><span class="line"><span class="string">&quot;</span> 为C程序提供自动缩进</span><br><span class="line"><span class="built_in">set</span> smartindent</span><br><span class="line"><span class="string">&quot; 高亮显示普通txt文件（需要txt.vim脚本）</span></span><br><span class="line"><span class="string"> au BufRead,BufNewFile *  setfiletype txt</span></span><br><span class="line"><span class="string">&quot;</span>自动补全</span><br><span class="line">:inoremap ( ()&lt;ESC&gt;i</span><br><span class="line">:inoremap ) &lt;c-r&gt;=ClosePair(<span class="string">&#x27;)&#x27;</span>)&lt;CR&gt;</span><br><span class="line">:inoremap &#123; &#123;&#125;&lt;ESC&gt;i</span><br><span class="line">:inoremap &#125; &lt;c-r&gt;=ClosePair(<span class="string">&#x27;&#125;&#x27;</span>)&lt;CR&gt;</span><br><span class="line">:inoremap [ []&lt;ESC&gt;i</span><br><span class="line">:inoremap ] &lt;c-r&gt;=ClosePair(<span class="string">&#x27;]&#x27;</span>)&lt;CR&gt;</span><br><span class="line"><span class="string">&quot;:inoremap &quot;</span> <span class="string">&quot;&quot;</span>&lt;ESC&gt;i</span><br><span class="line"><span class="string">&quot;:inoremap &#x27; &#x27;&#x27;&lt;ESC&gt;i</span></span><br><span class="line"><span class="string">function! ClosePair(char)</span></span><br><span class="line"><span class="string">  if getline(&#x27;.&#x27;)[col(&#x27;.&#x27;) - 1] == a:char</span></span><br><span class="line"><span class="string">    return &quot;</span>\&lt;Right&gt;<span class="string">&quot;</span></span><br><span class="line"><span class="string">  else</span></span><br><span class="line"><span class="string">    return a:char</span></span><br><span class="line"><span class="string">  endif</span></span><br><span class="line"><span class="string">endfunction</span></span><br><span class="line"><span class="string">filetype plugin indent on </span></span><br><span class="line"><span class="string">&quot;</span>打开文件类型检测, 加了这句才可以用智能补全</span><br><span class="line"><span class="built_in">set</span> completeopt=longest,menu</span><br><span class="line"><span class="string">&quot;set termguicolors</span></span><br></pre></td></tr></table></figure><h3 id="4-2-安装vundle中的插件">4.2 安装Vundle中的插件</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install universal-ctags</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim</span><br><span class="line">vim</span><br><span class="line">:PluginInstall</span><br><span class="line"><span class="comment"># 一直等到左下角出现“Done!&quot;标志</span></span><br></pre></td></tr></table></figure><h2 id="5-hexo构建">5 hexo构建</h2><h3 id="5-1-安装node-js和npm">5.1 安装Node.js和npm</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update  </span><br><span class="line">sudo apt-get install nodejs  npm</span><br></pre></td></tr></table></figure><h3 id="5-2-安装hexo并初始化">5.2 安装hexo并初始化</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir hexo</span><br><span class="line">cd hexo</span><br><span class="line">sudo npm install -g hexo-cli</span><br><span class="line">hexo init</span><br></pre></td></tr></table></figure><h3 id="5-3-安装插件">5.3 安装插件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-index --save  &amp;</span><br><span class="line">npm install hexo-generator-archive --save  &amp;</span><br><span class="line">npm install hexo-generator-category --save  &amp;</span><br><span class="line">npm install hexo-generator-tag --save  &amp;</span><br><span class="line">npm install hexo-server --save  &amp;</span><br><span class="line">npm install hexo-deployer-git --save  &amp;</span><br><span class="line">npm install hexo-deployer-heroku --save  &amp;</span><br><span class="line">npm install hexo-deployer-rsync --save  &amp; </span><br><span class="line">npm install hexo-deployer-openshift --save &amp; </span><br><span class="line">npm install hexo-renderer-marked --save  &amp;</span><br><span class="line">npm install hexo-renderer-stylus --save  &amp;</span><br><span class="line">npm install hexo-generator-feed --save  &amp;</span><br><span class="line">npm install hexo-generator-sitemap --save &amp;</span><br><span class="line">npm install hexo-wordcount --save</span><br></pre></td></tr></table></figure><h3 id="5-4-配置主题">5.4 配置主题</h3><h4 id="5-4-1-修改-config-yml">5.4.1 修改_config.yml</h4><h4 id="5-4-2-修改theme">5.4.2 修改theme</h4><p>选择你喜欢的<a href="https://hexo.io/themes/">主题</a>  ，以<a href="https://hexo.io/themes/">butterfly</a>为例：</p><ol><li>选择<a href="https://butterfly.js.org/posts/21cfbf15/">中文安装和配置手册</a></li><li>根据安装和配置手册进行安装，关键步骤如下：<ul><li>应用主题：修改hexo根目录下的<code>_config.yml</code>文件（<code>theme: butterfly</code>）</li><li>主题配置：修改hexo/theme/butterfly根目录下的<code>_config.yml</code>文件。</li></ul></li></ol><h3 id="5-5-hexo相关命令">5.5 hexo相关命令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo n &quot;文章名称&quot;</span><br><span class="line">hexo g // 本地部署</span><br><span class="line">hexo s // 本地预览</span><br><span class="line">hexo d // 推到远程</span><br></pre></td></tr></table></figure><h2 id="6-ysyx构建">6 YSYX构建</h2><h3 id="6-1-安装pa相关工具">6.1 安装PA相关工具</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install build-essential man gcc-doc gdb git libreadline-dev libsdl2-dev llvm llvm-dev llvm-11 llvm-11-dev ccache</span><br><span class="line">sudo apt install tmux vim</span><br></pre></td></tr></table></figure><h3 id="6-2-获取项目代码">6.2 获取项目代码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git clone -b master git@github.com:OSCPU/ysyx-workbench.git</span><br><span class="line">bash init.sh nemu</span><br><span class="line">bash init.sh abstract-machine</span><br><span class="line">bash init.sh am-kernels</span><br><span class="line">bash init.sh npc</span><br><span class="line"># 打补丁</span><br><span class="line">sudo apt install flex bison help2man</span><br></pre></td></tr></table></figure><h3 id="6-3-安装verilator-v5-008">6.3 安装verilator v5.008</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install git perl python3 make autoconf g++ flex bison ccache</span><br><span class="line">sudo apt-get install libgoogle-perftools-dev numactl perl-doc</span><br><span class="line">sudo apt-get install libfl2 # Ubuntu only (ignore if gives error)</span><br><span class="line">sudo apt-get install libfl-dev # Ubuntu only (ignore if gives error)</span><br><span class="line">sudo apt-get install zlibc zlib1g zlib1g-dev # Ubuntu only (ignore if gives error)</span><br><span class="line">git clone https://github.com/verilator/verilator</span><br><span class="line">unset VERILATOR_ROOT # For bash</span><br><span class="line">cd verilator</span><br><span class="line">git pull # Make sure git repository is up-to-date</span><br><span class="line">git tag # See what versions exist</span><br><span class="line">git checkout v5.008 # Switch to specified release version</span><br><span class="line">autoconf # Create ./configure script</span><br><span class="line">./configure # Configure and create Makefile</span><br><span class="line">make -j \`nproc\` # Build Verilator itself (if error, try just &#x27;make&#x27;)</span><br><span class="line">sudo make install</span><br><span class="line">verilator --version</span><br></pre></td></tr></table></figure><h2 id="7-debug">7 Debug</h2><h3 id="bug1：系统找不到指定的文件">Bug1：系统找不到指定的文件</h3><ol><li><strong>原因一</strong>：安装了VMware，导致注册表发生了改变</li><li><strong>解决方案</strong>：卸载VMware，并使用CleanMyPC软件重新修复注册表</li><li><strong>原因二</strong>：原先安装的Ubuntu卸载之后没有注销</li><li><strong>解决方案</strong>：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wsl --list --all</span><br><span class="line">wsl --unregister Ubuntu-22.04</span><br></pre></td></tr></table></figure><h3 id="bug2：vim打开文件无响应">Bug2：VIM打开文件无响应</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ vim</span><br><span class="line">$ (无响应)</span><br></pre></td></tr></table></figure><ol><li><strong>原因</strong>：安装了vim-gtk3导致的</li><li><strong>解决方案</strong>：卸载掉vim-gtk3</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;从ubuntu真机到wsl2&quot;&gt;从Ubuntu真机到WSL2&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;记录一次被迫从Ubuntu22.04真机系统迁移到WSL2-Ubuntu22.04虚拟子系统的经历；&lt;br&gt;
原因是运行vcs需要gcc4.8.5，与ysyx项</summary>
      
    
    
    
    
    <category term="记录" scheme="https://planckzgh.github.io/tags/%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://planckzgh.github.io/2023/12/03/hello-world/"/>
    <id>https://planckzgh.github.io/2023/12/03/hello-world/</id>
    <published>2023-12-03T06:21:17.855Z</published>
    <updated>2023-12-03T07:38:49.185Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="quick-start">Quick Start</h2><h3 id="create-a-new-post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><h3 id="choose-a-theme">Choose a theme</h3><p>Such as <a href="https://butterfly.js.org/">Butterfly</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
    <category term="其他" scheme="https://planckzgh.github.io/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title>Mermaid简明教程</title>
    <link href="https://planckzgh.github.io/2023/11/19/Mermaid%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B/"/>
    <id>https://planckzgh.github.io/2023/11/19/Mermaid%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B/</id>
    <published>2023-11-19T14:20:33.000Z</published>
    <updated>2023-12-03T07:38:49.185Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>使用教程：<a href="https://zhuanlan.zhihu.com/p/627356428">从入门到精通</a><br>Mermaid 是一种使用文本生成流程图、饼状图、甘特图等图表的描述语言，它可以帮助用户以简单、直观的方式创建各种类型的图表，包括<strong>流程图、时序图、甘特图</strong>等。</p></blockquote><h2 id="1-如何使用-mermaid？">1 如何使用 Mermaid？</h2><ul><li>在 HTML 或 Markdown 文件中引用 Mermaid 库和 Mermaid CSS 样式表。</li><li>使用 Mermaid 的 CLI 工具在命令行中生成图表，或使用 Mermaid 的 API 在自己的应用程序中生成图表。</li></ul><p>具体而言，</p><ul><li>如果只是轻量级、偶尔使用，推荐 <strong>Mermaid 在线渲染编辑器</strong>——<a href="https://mermaid.js.org://mermaid.js.org/">Mermaid Live Editor</a></li><li>推荐使用 <strong>Markdown 编辑器</strong>，比如 <a href="https://typora.io/">Typora</a>，<a href="https://joplinapp.org/">Joplin</a>.</li><li>一些<strong>兼容 Markdown 语法</strong>，支持 Mermaid Code 的现代编辑器，比如 <a href="https://flowus.cn/product">FlowUs 息流</a>.</li><li>流程图工具均支持 Mermaid 语法进行程序绘图。比如，<a href="https://pub.visionon.cn/?c=spike&amp;l=articleid&amp;r=categoryid">VisionOn</a>.</li><li>更多内容，推荐阅读 <a href="https://mermaid.js.org/syntax/timeline.html">Mermaid 官方文档</a>。</li></ul><h2 id="2-mermaid-支持哪些类型的图表？">2 Mermaid 支持哪些类型的图表？</h2><ol><li><strong>流程图</strong>（Flowchart）：展示过程、决策和操作流程。</li><li><strong>序列图</strong>（Sequence Diagram）：展示对象之间的交互顺序。</li><li><strong>甘特图</strong>（Gantt Chart）：展示项目计划和进度。</li><li><strong>类图</strong>（Class Diagram）：展示类的结构和关系。</li><li><strong>饼图</strong>（Pie Chart）：展示数据占比。</li><li><strong>旅程图</strong>（Journey）：展示用户如何与应用程序交互。</li></ol><p>除此之外，Mermaid 还支持其他类型的图表；</p><h2 id="3-mermaid-语法">3 Mermaid 语法</h2><h3 id="3-1-flow-chart">3.1 Flow Chart</h3><h4 id="3-1-1-连线类型">3.1.1 连线类型</h4><h4 id="3-1-2-形状颜色">3.1.2 形状颜色</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">graph TD</span><br><span class="line">subgraph Subgraph A</span><br><span class="line">A --&gt; B -.-&gt; C &lt;---&gt; D</span><br><span class="line">A ==&gt; C1</span><br><span class="line">C1 ----o D1</span><br><span class="line">C1 ----x E1</span><br><span class="line">end</span><br><span class="line">style A fill:#f9c;</span><br><span class="line">  style B stroke:#333,stroke-width:4px;</span><br><span class="line">  style C fill:#f96,stroke:#333,stroke-width:2px;</span><br><span class="line">  style D fill:#fc9,stroke:#f63,stroke-width:4px,stroke-dasharray: 5 5;</span><br></pre></td></tr></table></figure><p><img src="/imgs/mermaid-1.png" alt=""></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">flowchart LR</span><br><span class="line">A[Hard edge] --&gt;|Link text| B(Round edge)</span><br><span class="line">B --&gt; C&#123;Decision&#125;</span><br><span class="line">C --&gt;|One| D[Result one]</span><br><span class="line">C --&gt;|Two| E[Result two]</span><br><span class="line">style A fill:#f9f,stroke:#333,stroke-width:4px</span><br><span class="line">style B fill:#bbf,stroke:#f66,stroke-width:2px,color:#fff,stroke-dasharray: 5</span><br></pre></td></tr></table></figure><p><img src="/imgs/mermaid-2.png" alt=""></p><h3 id="3-2-sequence-diagram">3.2 Sequence Diagram</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">    participant Alice</span><br><span class="line">    participant Bob</span><br><span class="line">    Alice-&gt;&gt;John: Hello John, how are you?</span><br><span class="line">    loop Healthcheck</span><br><span class="line">        John-&gt;&gt;John: Fight against hypochondria</span><br><span class="line">    end</span><br><span class="line">    Note right of John: Rational thoughts &lt;br/&gt;prevail!</span><br><span class="line">    John--&gt;&gt;Alice: Great!</span><br><span class="line">    John-&gt;&gt;Bob: How about you?</span><br><span class="line">    Bob--&gt;&gt;John: Jolly good!</span><br></pre></td></tr></table></figure><p><img src="/imgs/mermaid-3.png" alt=""></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">    participant Alice</span><br><span class="line">    participant John</span><br><span class="line"></span><br><span class="line">    rect rgb(191, 223, 255)</span><br><span class="line">    note right of Alice: Alice calls John.</span><br><span class="line">    Alice-&gt;&gt;+John: Hello John, how are you?</span><br><span class="line">    rect rgb(200, 150, 255)</span><br><span class="line">    Alice-&gt;&gt;+John: John, can you hear me?</span><br><span class="line">    John--&gt;&gt;-Alice: Hi Alice, I can hear you!</span><br><span class="line">    end</span><br><span class="line">    John--&gt;&gt;-Alice: I feel great!</span><br><span class="line">    end</span><br><span class="line">    Alice -&gt;&gt;+ John: Did you want to go to the game tonight?</span><br><span class="line">    John --&gt;&gt;- Alice: Yeah! See you there.</span><br></pre></td></tr></table></figure><p><img src="/imgs/mermaid-4.png" alt=""></p><h3 id="3-3-gantt-chart">3.3 Gantt Chart</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">gantt</span><br><span class="line">dateFormat  YYYY-MM-DD</span><br><span class="line">title Adding GANTT diagram to mermaid</span><br><span class="line">excludes weekdays 2014-01-10</span><br><span class="line"></span><br><span class="line">section A section</span><br><span class="line">Completed task            :done,    des1, 2014-01-06,2014-01-08</span><br><span class="line">Active task               :active,  des2, 2014-01-09, 3d</span><br><span class="line">Future task               :         des3, after des2, 5d</span><br><span class="line">Future task2              :         des4, after des3, 5d</span><br></pre></td></tr></table></figure><p><img src="/imgs/mermaid-5.png" alt=""></p><h3 id="3-4-pie-chart">3.4 Pie Chart</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pie showData</span><br><span class="line">    title Key elements in Product X</span><br><span class="line">    &quot;Calcium&quot; : 42.96</span><br><span class="line">    &quot;Potassium&quot; : 50.06</span><br><span class="line">    &quot;Magnesium&quot; : 10.01</span><br><span class="line">    &quot;Iron&quot; :  5</span><br></pre></td></tr></table></figure><p><img src="/imgs/mermaid-6.png" alt=""></p><h3 id="3-5-class-diagram">3.5 Class diagram</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">classDiagram</span><br><span class="line">Class01 &lt;|-- AveryLongClass : Cool</span><br><span class="line">Class03 *-- Class04</span><br><span class="line">Class05 o-- Class06</span><br><span class="line">Class07 .. Class08</span><br><span class="line">Class09 --&gt; C2 : Where am i?</span><br><span class="line">Class09 --* C3</span><br><span class="line">Class09 --|&gt; Class07</span><br><span class="line">Class07 : equals()</span><br><span class="line">Class07 : Object[] elementData</span><br><span class="line">Class01 : size()</span><br><span class="line">Class01 : int chimp</span><br><span class="line">Class01 : int gorilla</span><br><span class="line">Class08 &lt;--&gt; C2: Cool label</span><br></pre></td></tr></table></figure><p><img src="/imgs/mermaid-7.png" alt=""></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">classDiagram</span><br><span class="line">classA &lt;|-- classB</span><br><span class="line">classC *-- classD</span><br><span class="line">classE o-- classF</span><br><span class="line">classG &lt;-- classH</span><br><span class="line">classI -- classJ</span><br><span class="line">classK &lt;.. classL</span><br><span class="line">classM &lt;|.. classN</span><br><span class="line">classO .. classP</span><br></pre></td></tr></table></figure><p><img src="/imgs/mermaid-8.png" alt=""></p><h3 id="3-6-journey-diagram">3.6 Journey Diagram</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">journey</span><br><span class="line">    title My working day</span><br><span class="line">    section Go to work</span><br><span class="line">      Make tea: 5: Me</span><br><span class="line">      Go upstairs: 3: Me</span><br><span class="line">      Do work: 1: Me, Cat</span><br><span class="line">    section Go home</span><br><span class="line">      Go downstairs: 5: Me</span><br><span class="line">      Sit down: 5: Me</span><br></pre></td></tr></table></figure><p><img src="/imgs/mermaid-9.png" alt=""></p><h3 id="3-7-requirement-diagram">3.7 Requirement Diagram</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">requirementDiagram</span><br><span class="line"></span><br><span class="line">    requirement test_req &#123;</span><br><span class="line">id: 1</span><br><span class="line">text: the test text.</span><br><span class="line">risk: high</span><br><span class="line">verifymethod: test</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    element test_entity &#123;</span><br><span class="line">type: simulation</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    test_entity - satisfies -&gt; test_req</span><br></pre></td></tr></table></figure><p><img src="/imgs/mermaid-10.png" alt=""></p><h3 id="3-8-git-graph">3.8 Git graph</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">gitGraph</span><br><span class="line">   commit</span><br><span class="line">   commit</span><br><span class="line">   branch develop</span><br><span class="line">   commit</span><br><span class="line">   checkout main</span><br><span class="line">   commit</span><br><span class="line">   commit</span><br><span class="line">   merge develop</span><br><span class="line">   commit</span><br><span class="line">   commit</span><br></pre></td></tr></table></figure><p><img src="/imgs/mermaid-11.png" alt=""></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;使用教程：&lt;a href=&quot;https://zhuanlan.zhihu.com/p/627356428&quot;&gt;从入门到精通&lt;/a&gt;&lt;br&gt;
Mermaid 是一种使用文本生成流程图、饼状图、甘特图等图表的描述语言，它可以帮助用户以简单、直观的方式创建</summary>
      
    
    
    
    
    <category term="教程" scheme="https://planckzgh.github.io/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu22-04安装Questasim2021踩坑记录</title>
    <link href="https://planckzgh.github.io/2023/11/08/Ubuntu22-04%E5%AE%89%E8%A3%85Questasim2021%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/"/>
    <id>https://planckzgh.github.io/2023/11/08/Ubuntu22-04%E5%AE%89%E8%A3%85Questasim2021%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/</id>
    <published>2023-11-08T01:31:34.000Z</published>
    <updated>2023-12-03T07:38:49.185Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-资源获取">1 资源获取</h2><p><a href="https://bbs.eetop.cn/forum.php?mod=viewthread&amp;tid=913460&amp;highlight=questasim%2B2021">EETOP Questasim2021</a></p><h2 id="2-安装步骤">2 安装步骤</h2><ol><li>安装依赖</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install libxft2 libxft2:i386 lib32ncurses6  </span><br><span class="line">sudo apt install libxext6  </span><br><span class="line">sudo apt install libxext6:i386  </span><br></pre></td></tr></table></figure><ol start="2"><li>获取license</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python2 mgclicgen.py &lt;hostid&gt;  </span><br></pre></td></tr></table></figure><ol start="3"><li>安装questasim</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./questa_sim-2021.2_1.aol  </span><br></pre></td></tr></table></figure><ol start="3"><li>复制文件<code>pubkey_verify</code>到安装目录下，然后执行</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./pubkey_verify -y</span><br></pre></td></tr></table></figure><p>4, 配置环境变量，然后更新<code>.bashrc</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export PATH=/path/to/questasim/linux_x86_64:$PATH</span><br><span class="line">export PATH=/path/to/questasim/RUVM_2021.2:$PATH</span><br><span class="line">export LM_LICENSE_FILE=/path/to/license.dat:$LM_LICENSE_FILE</span><br></pre></td></tr></table></figure><h2 id="3-补充说明">3 补充说明</h2><ol><li><p><code>&lt;hostid&gt;</code>是什么？<br><img src="/imgs/81a085e1495429d040776f7dfabd8d60.png" alt="81a085e1495429d040776f7dfabd8d60.png"><br>host id 是网卡的物理地址，<strong>不要利用hostid获取</strong>，利用ifconfig获取，且<strong>不要省略掉冒号</strong>，如下图所是。<br><img src="/imgs/91014323dc0595e2ce3c6291eaa3ebc0.png" alt="91014323dc0595e2ce3c6291eaa3ebc0.png"></p></li><li><p>环境变量设置<br>注意将<code>/path/to</code>设置为自己的路径，并查看环境变量名是否与其他环境变量名冲突（有可能与VCS的license环境变量产生冲突。</p></li></ol><h2 id="4-运行questasim-2021">4 运行questasim 2021</h2><p>完成安装与破解后，打开终端输入<code>vsim</code>即可启动questasim</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-资源获取&quot;&gt;1 资源获取&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://bbs.eetop.cn/forum.php?mod=viewthread&amp;amp;tid=913460&amp;amp;highlight=questasim%2B2021&quot;&gt;EETOP Q</summary>
      
    
    
    
    
    <category term="教程" scheme="https://planckzgh.github.io/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu22.04安装VCS2018踩坑记录</title>
    <link href="https://planckzgh.github.io/2023/11/08/Ubuntu22-04%E5%AE%89%E8%A3%85VCS2018%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/"/>
    <id>https://planckzgh.github.io/2023/11/08/Ubuntu22-04%E5%AE%89%E8%A3%85VCS2018%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/</id>
    <published>2023-11-08T01:07:40.000Z</published>
    <updated>2023-12-03T07:38:49.185Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>参考资料：<a href="https://blog.csdn.net/qq_41717683/article/details/122267191">VCS2018在Ubuntu20 18安装步骤</a>、<a href="https://www.cnblogs.com/devindd/articles/17173802.html">VCS compiling error issues - devindd</a>、<a href="https://blog.csdn.net/ZikY_0827/article/details/130430660">Ubuntu22.10安装VCS、Verdi</a></p></blockquote><h2 id="1-资源获取">1 资源获取</h2><p><a href="https://pan.baidu.com/s/19CtwqWcxpv-4wPyAD4_ITw">百度网盘链接</a>  提取码：3pib</p><ul><li>文件内容<ul><li><code>libpng12.so.0：</code>后面可能会需要这个包</li><li><code>scl_keygen_2030：</code>这个是License生成器</li><li><code>scl_v2018.06：</code>这个是SCL安装包，用来</li><li><code>synopsysinstaller_v5.0：</code>这个是安装器</li><li><code>vcs_vO-2018.09-SP2：</code>这个是vcs的安装包</li><li><code>verdi-2018.9：</code>这个是verdi安装包</li></ul></li></ul><h2 id="2-安装步骤">2 安装步骤</h2><h3 id="2-1-建立安装路径-更改权限">2.1 建立安装路径，更改权限</h3><p><img src="/imgs/faa20cece21e49aeba5aeda466505a52_cac9d758dbb9412cb.png" alt="在这里插入图片描述"><br>建立图2的安装目录文件：<strong>Liscen</strong>用来存放license文件，<strong>SCL2018</strong>；<strong>vcs2018</strong>、<strong>verdi</strong>是对应的安装路径；<strong>vcs_install</strong>用来存放安装包好安装器。</p><h3 id="2-2-运行安装器进行安装">2.2 运行安装器进行安装</h3><ol><li><p>进入<code>synopsysinstaller_v5.0</code>文件夹，运行<code>./SynopsysInstaller_v5.0.run</code>，会出现下面界面，提示选择安装器安装路径，直接在本路径下安装即可<br><img src="/imgs/watermark_type_d3F5LXplbmhlaQ_sh_e5039f729d254ad19.jpg" alt="在这里插入图片描述"><br><a href="http://xn--setup-xf6h77jytt8i5c6b4b.sh">安装后出现setup.sh</a><br><img src="/imgs/watermark_type_d3F5LXplbmhlaQ_sh_a4c16d9e4c2446438.jpg" alt="在这里插入图片描述"></p></li><li><p>运行<code>setup.sh</code>，进入安装界面，当前安装器可以依次安装Scl、vcs、verdi。下面以vcs安装为例。</p></li><li><p>安装器安装的详细过程<br><img src="/imgs/watermark_type_d3F5LXplbmhlaQ_sh_1a3ceb9c6f064ec89.png" alt="在这里插入图片描述"><br>选择安装包的路径<br><img src="/imgs/watermark_type_d3F5LXplbmhlaQ_sh_58a1abeff4ea4a7c8.png" alt="在这里插入图片描述"><br>选择要安装的地址，也就是第一步创建的目录<br><img src="/imgs/watermark_type_d3F5LXplbmhlaQ_sh_6b8383095342490ea.png" alt="在这里插入图片描述"><br>点击next，进入下面界面，选择vcs<br><img src="/imgs/watermark_type_d3F5LXplbmhlaQ_sh_0ff2f50c9dc1443cb.png" alt="在这里插入图片描述"><br>一路next，进入下面界面，点击<code>Accept，install</code>，然后等待安装<br><img src="/imgs/watermark_type_d3F5LXplbmhlaQ_sh_70e67e61d9124c358.png" alt="在这里插入图片描述"><br>安装完后会弹出安装失败，不管这个错误，点击<code>OK</code>。<br><img src="/imgs/watermark_type_d3F5LXplbmhlaQ_sh_02489ba07d2e419ea.png" alt="在这里插入图片描述"><br>然后跳转到这个目录，手动运行这个脚本，根据提示选择路径。<br><img src="/imgs/watermark_type_d3F5LXplbmhlaQ_sh_b1c8cb20ce0841fab.png" alt="在这里插入图片描述"><br>出现下面界面，点击<code>Dismiss</code>, vcs安装结束。<br><img src="/imgs/watermark_type_d3F5LXplbmhlaQ_sh_6dd3009859aa49b79.png" alt="在这里插入图片描述"></p></li><li><p>重复第2步和第3步，选择不同的安装包和安装路径，继续安装<code>verdi</code>和<code>scl</code></p></li></ol><h3 id="2-3-生成license文件">2.3 生成License文件</h3><ol><li>在linux系统终端运行<code>ifconfig</code>获取电脑的物理地址和host-name，如下图所示；<br><img src="/imgs/watermark_type_d3F5LXplbmhlaQ_sh_dea01911af2744f5a.png" alt="在这里插入图片描述"></li><li>前往window系统运行这个<code>scl_keygen.exe</code>文件生成License文件<code>Synopsys.dat</code>。<br><img src="/imgs/ae57597e189e49cc93ca661e240a3c6e_f893e050867144688.png" alt="在这里插入图片描述"><br>出现下面界面，图中需要修改三个地方，<br><img src="/imgs/watermark_type_d3F5LXplbmhlaQ_sh_1f1f0f7d05fc4e22a.png" alt="在这里插入图片描述"><br><code>1 2</code>为电脑物理地址，填写物理地址的时候中间的<code>：</code>记得去掉。<code>3</code>为linux的host-name。</li><li>打开<code>Synopsys.dat</code>文件，需要修改的地方有一个<br><img src="/imgs/37f4327eced445d7a78980803a9a8ab5_c721c0b6dc584aa5a.png" alt="在这里插入图片描述"><br>需要在<code>1</code>这个地方添加snpslmd的路径，注意路径记得改成自己的路径，如下图所示<br><img src="/imgs/ff68b70d72e448b096cef6e9888ae20b_c9052d23b9ce47e6a.png" alt="在这里插入图片描述"><br>同时需要注意license有效期的问题，其他的license生成器可能生成的license有效期是2019，需要手动改成2030。本license生成器license有效期为2030，所以不需要改动。如下图所示<br><img src="/imgs/watermark_type_d3F5LXplbmhlaQ_sh_a6bc2adabff84feba.png" alt="在这里插入图片描述"></li><li>修改完毕之后，将<code>Synopsys.dat</code>转移到Linux系统下的Liscen目录中。</li></ol><h3 id="2-4-设置环境变量">2.4 设置环境变量</h3><p>在<strong>根目录</strong>下打开<code>.bashrc</code>，将下面内容复制进去，下面的路径记得改成自己的路径；设置好后运行<code>source .bashrc</code>命令使环境变量生效。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="built_in">export</span> <span class="built_in">export</span> SYNOPSYS=<span class="string">&quot;/usr/software/synopsys&quot;</span></span></span><br><span class="line">export VCS_TARGET_ARCH=&quot;amd64&quot;</span><br><span class="line">export PATH=&quot;/usr/stone/software/vcs2018/vcs/O-2018.09-SP2/gui/dve/bin:&quot;$PATH</span><br><span class="line">export DVE_HOME=&quot;/usr/stone/software/vcs2018/vcs/O-2018.09-SP2/gui/dve&quot;</span><br><span class="line">export PATH=&quot;/usr/stone/software/vcs2018/vcs/O-2018.09-SP2/bin:&quot;$PATH</span><br><span class="line">export VCS_HOME=&quot;/usr/stone/software/vcs2018/vcs/O-2018.09-SP2&quot;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="built_in">export</span> VCS_ARCH_OVERRIDE=<span class="string">&quot;linux&quot;</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">verdi</span></span><br><span class="line">export PATH=&quot;/usr/stone/software/verdi/verdi/Verdi_O-2018.09-SP2/bin:&quot;$PATH</span><br><span class="line">export VERDI_HOME=&quot;/usr/stone/software/verdi/verdi/Verdi_O-2018.09-SP2&quot;</span><br><span class="line">export LD_LIBRARY_PATH=&quot;/usr/stone/software/verdi/verdi/Verdi_O-2018.09-SP2/share/PLI/lib/LINUX64&quot;:$LD_LIBRARY_PATH</span><br><span class="line">export VERDI_DIR=&quot;/usr/stone/software/verdi/verdi/Verdi_O-2018.09-SP2&quot;</span><br><span class="line">export NOVAS_INST_DIR=&quot;/usr/stone/software/verdi/verdi/Verdi_O-2018.09-SP2&quot;</span><br><span class="line">export NPI_PLATFORM=&quot;LINUX64_GNU_472&quot;</span><br><span class="line">export LD_LIBRARY_PATH=&quot;$NOVAS_INST_DIR/share/NPI/lib/LINUX64_GNU_520&quot;:$LD_LIBRARY_PATH</span><br><span class="line">export NOVAS_HOME=&quot;/usr/stone/software/verdi/verdi/Verdi_O-2018.09-SP2&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">LICENSE</span></span><br><span class="line">export SNPSLMD_LICENSE_FILE=&quot;/usr/stone/software/Liscen/Synopsys.dat&quot;</span><br><span class="line">export SNPSLMD_LICENSE_FILE=27000@自己的host-name</span><br><span class="line">export LM_LICENSE_FILE=&quot;/usr/stone/software/Liscen/Synopsys.dat&quot;</span><br><span class="line">alias lmli=&quot;/usr/stone/software/SCL2018/scl/2018.06/linux64/bin/lmgrd -c /usr/stone/software/License/Synopsys.dat&quot;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">SCL</span></span><br><span class="line">export PATH=/usr/stone/software/SCL2018/scl/2018.06/linux64/bin:$PATH</span><br><span class="line">alias dve=&quot;dve -full64 &amp;&quot;</span><br><span class="line">alias vcs64=&quot;vcs -full64&quot;</span><br><span class="line">alias verdi=&quot;verdi -full64 &amp;&quot;</span><br></pre></td></tr></table></figure><h3 id="2-5-验证license">2.5 验证License</h3><p>通过下面命令验证license，直到出现<code>Passed</code>，如下所示。如果多次验证依旧没有出现<code>Passed</code>，那么重新生成license，重新验证</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sssverify 自己的license路径</span><br></pre></td></tr></table></figure><p><img src="/imgs/watermark_type_d3F5LXplbmhlaQ_sh_4d9caa0682354de2b.png" alt="在这里插入图片描述"></p><h3 id="2-6-启动lmgrd">2.6 启动lmgrd</h3><p><code>lmgrd</code>是license管理工具，用于将license运行在后台，使软件正常工作，目前对于lmgrd理解只有这些。由于在环境变量设置了命令，所以输入<code>lmli</code>就可以启动<code>lmgrd</code>。</p><ol><li><strong>问题一：</strong><br>路径明明正确，通过<code>ls</code>也可以看到<code>lmgrd</code>，但它就是找不到lmgrd 。<br><img src="/imgs/65d0053bc6864ec5b9518498ec189bd2_2d244dbe4c71436f8.png" alt="在这里插入图片描述"><br><strong>解决方案：</strong> 这是因为没有32位运行库导致的通过下面命令安装即可。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install lsb</span><br></pre></td></tr></table></figure><ol start="2"><li><p><strong>问题二：</strong><br>再次执行<code>lmli</code>，提示没有/usr/tmp目录和在/usr/local/flexlm/licenses目录下找不到license。这个是肯定的，因为你压根就没有建这些目录<br><img src="/imgs/watermark_type_d3F5LXplbmhlaQ_sh_b476714129d64f8e8.png" alt="在这里插入图片描述"><br><strong>解决方案：</strong> 在/usr建立tmp目录，建立local/flexlm/licenses目录，把Synopsys.dat复制到licenses目录下，并把名字改成<strong>license.bat</strong></p></li><li><p><strong>问题三：</strong><br>提示打不开license，这是因为环境变量<code>SNPSLMD_LICENSE_FILE</code>的问题，在这个环境变量中赋值了两次，第一次是license的位置，第二次是用户。<br><img src="/imgs/watermark_type_d3F5LXplbmhlaQ_sh_e21fc48a06a64178b.png" alt="在这里插入图片描述"><br><strong>解决方案：</strong> 这里需要license的位置，所以先把第二个赋值注释，在后面启动DVE中，又会需要第二次赋值，再把注释打开</p></li><li><p><strong>问题四：</strong><br>由于上面lmgrd没有启动成功，但是端口号他还是占用的。当你再次输入<strong>lmli</strong>，应该会出现下面错误，显示端口号被占用<br><img src="/imgs/3c0d5dca161c487995a46fab2f3a4344_816dbc938bae49ac8.png" alt="在这里插入图片描述"><br><strong>解决方案：</strong> 输入下面命令终止该端口号。首先释放license，显示lmgrd占用的端口号，然后结束这个端口号进程，如下图所示</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lmdown ps auf | grep lmgrd kill -9 2381</span><br></pre></td></tr></table></figure><p><img src="/imgs/104c7525021f44ca9a7b8df1f9b39c1e_58f4aeccdaaa46dca.png" alt="在这里插入图片描述"><br>然后再次输入<code>lmli</code>,启动lmgrd。<br><img src="/imgs/watermark_type_d3F5LXplbmhlaQ_sh_980e1f3be4484235b.png" alt="在这里插入图片描述"></p></li><li><p><strong>问题五：</strong><br>提示verdi语法错误Syntax error: “(“ unexpected<br><img src="/imgs/7e05b497b9ef8075fd878404c3e94aa0.png" alt="7e05b497b9ef8075fd878404c3e94aa0.png"><br><strong>解决方案：</strong> 代码对于标准bash而言没有错，因为Ubuntu为了加快开机速度，用dash代替了传统的bash，是dash在捣鬼，解决方法就是取消dash。</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg-reconfigure dash</span><br></pre></td></tr></table></figure><p><img src="/imgs/fcca05d088a62e2b3ee8f3c480f287c5.png" alt="fcca05d088a62e2b3ee8f3c480f287c5.png"><br>选择no</p></li></ol><h3 id="2-7-验证软件是否安装成功">2.7 验证软件是否安装成功</h3><ol><li>dve<br>输入<code>dve</code>,再次报错，提示<strong>SNPSLMD_LICENSE_FILE</strong>指示错误server。<br><img src="/imgs/f346182cc8c542c88fefc78bb6799bcb_fb38f5b7eb61418b8.png" alt="在这里插入图片描述"><br><strong>解决方案：</strong> 不慌，这个就是咱上面遗留的问题，把上面的注释打开即可。再次输入<code>dve</code>,见证dve的真面目吧！！！<br><img width="1219" height="641" src="/imgs/watermark_type_d3F5LXplbmhlaQ_sh_047ba3d9ba624537a.png"/></li><li>verdi<br>输入<code>verdi</code>，不要慌张，该来的总会来的。提示没有<strong>libpng12.so.0</strong>这个库<br><img src="/imgs/b65d253e28f044748fdce1264ca48335_f23015c7cdc743429.png" alt="在这里插入图片描述"><br><strong>解决方案：</strong> 还记得第一步提到的那个库文件么，这时候就派上用场了。输入下面命令，注意<strong>libpng12.so.0</strong>是文件夹里面的文件，移动整个文件夹无法解决问题 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cp libpng12.so.0  /usr/lib/x86_64-linux-gnu/</span><br></pre></td></tr></table></figure>再次输入<code>verdi</code>,激动吧！<br><img width="1219" height="573" src="/imgs/watermark_type_d3F5LXplbmhlaQ_sh_15cfc5162b954b359.png"/></li><li>VCS<br>输入<code>vcs -help</code>,坚持就是胜利！出现下面错误 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bin/sh:0: illegal option –h</span><br></pre></td></tr></table></figure><strong>解决方案：</strong> 这是因为Ubuntu下默认将<code>sh</code>链接到<code>bash</code>，输入下面命令重新链接。 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -f /bin/sh ln -s /bin/bash /bin/sh</span><br></pre></td></tr></table></figure>输入<code>vcs -help</code>，好了，你的努力不是白费的。<br><img src="/imgs/watermark_type_d3F5LXplbmhlaQ_sh_abaa340ee93742d98.png" alt="在这里插入图片描述"></li></ol><h3 id="2-8-设置开机自启动license">2.8 设置开机自启动License</h3><p>在<code>/etc/profile.d/</code>目录下创建<code>lmli.sh</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/profile.d/  </span><br><span class="line">sudo touch lmli.sh </span><br><span class="line">sudo chmod 777 lmli.sh</span><br></pre></td></tr></table></figure><p>写入下面内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/usr/stone/software/SCL2018/scl/2018.06/linux64/bin/lmgrd -c </span><br><span class="line">/usr/stone/software/License/Synopsys.dat -l </span><br><span class="line">/usr/stone/software/SCL2018/scl/2018.06/linux64/bin/lmgrd.log</span><br></pre></td></tr></table></figure><hr><p>至此，vcs安装结束！</p><h2 id="3-vcs启动过程中的问题">3 VCS启动过程中的问题</h2><h3 id="1-vcs安装license激活的问题">1. VCS安装license激活的问题</h3><p>在VCS安装好后，使用scl工具对license进行激活时，可能会遇到如下错误：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash: /usr/synopsys/scl/scl/linux64/bin/lmgrd: No such file or directory</span><br></pre></td></tr></table></figure><p>该问题的原因是没有lsb库，在保证license文件路径正确的情况下，使用如下命令安装lsb库：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install lsb-core</span><br></pre></td></tr></table></figure><p>安装完成后reboot虚拟机即可解决上述问题，但可能还会出现flexlm文件不存在的问题：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Can&#x27;t make directory /usr/tmp/.flexlm, errno: 2(No such file or directory)</span><br></pre></td></tr></table></figure><p>这个问题比较好解决，直接创建一个flexlm文件就行了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.  sudo mkdir /usr/tmp </span><br><span class="line">2.  sudo touch /usr/tmp/.flexlm</span><br></pre></td></tr></table></figure><h2 id="4-vcs编译仿真中的问题">4 VCS编译仿真中的问题</h2><h3 id="4-1-recipe-for-target-simv-failed问题">4.1 recipe for target ‘simv’ failed问题</h3><p>在临时license授权成功后，就可以对编写的RTL代码编译和运行，但由于系统一开始缺少一些设置，直接运行VCS可能会出现一些问题，一开始会遇到这样的问题：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/bin/sh: 0: Illegal option -h</span><br><span class="line">Makefile:4: recipe for target &#x27;simv&#x27; failed</span><br><span class="line">make: *** [simv] Error 2</span><br></pre></td></tr></table></figure><p>该问题是由于Ubuntu操作系统将sh链接到了dash，手动修改sh链接到bash即可解决该问题：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo mv /bin/sh /bin/sh_bak</span><br><span class="line">sudo ln -s /bin/bash /bin/sh</span><br></pre></td></tr></table></figure><h3 id="4-2-product-timestamp-error问题">4.2 product_timestamp error问题</h3><p>解决上述问题后，可能会遇到product_timestamp error的问题：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Makefile:109: recipe for target &#x27;product_timestamp&#x27; failed</span><br><span class="line">make[1]: *** [product_timestamp] Error 1</span><br><span class="line">make[1]: Leaving directory &#x27;/home/alanwu/Documents/RISCV-SIM/csrc&#x27;</span><br><span class="line">Make exited with status 2</span><br></pre></td></tr></table></figure><p>这是因为操作系统安装的gcc版本太高，VCS调用的版本较低，需要修改VCS启动的变量，将gcc指定为g+±4.8，同时在你的vcs命令中添加如下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">simv:filelist.f</span><br><span class="line">vcs -full64 -cpp g++-4.8 -cc gcc-4.8 -LDFLAGS -Wl,--no-as-needed \</span><br><span class="line">-f filelist.f \</span><br><span class="line">-sverilog \</span><br><span class="line">-debug_access+all \</span><br><span class="line">-kdb \</span><br><span class="line">-timescale=1ns/1ps \</span><br><span class="line">-l com.log</span><br></pre></td></tr></table></figure><p>如果操作系统没有安装gcc 4.8，会报错：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">make[1]: Entering directory &#x27;/home/alanwu/Documents/RISCV-SIM/csrc&#x27;</span><br><span class="line">make[1]: gcc-4.8: Command not found</span><br></pre></td></tr></table></figure><p>安装gcc 4.8即可，这里安装直接从官方下载安装（如下方式）即可，不建议使用安装包的方式完成。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">cd</span><br><span class="line">mkdir install_g++-4.8</span><br><span class="line">cd install_g++-4.8/</span><br><span class="line">sudo apt update</span><br><span class="line">wget http://mirrors.kernel.org/ubuntu/pool/universe/g/gcc-4.8/g++-4.8_4.8.5-4ubuntu8_amd64.deb </span><br><span class="line">wget http://mirrors.kernel.org/ubuntu/pool/universe/g/gcc-4.8/libstdc++-4.8-dev_4.8.5-4ubuntu8_amd64.deb </span><br><span class="line">wget http://mirrors.kernel.org/ubuntu/pool/universe/g/gcc-4.8/gcc-4.8-base_4.8.5-4ubuntu8_amd64.deb </span><br><span class="line">wget http://mirrors.kernel.org/ubuntu/pool/universe/g/gcc-4.8/gcc-4.8_4.8.5-4ubuntu8_amd64.deb </span><br><span class="line">wget http://mirrors.kernel.org/ubuntu/pool/universe/g/gcc-4.8/libgcc-4.8-dev_4.8.5-4ubuntu8_amd64.deb </span><br><span class="line">wget http://mirrors.kernel.org/ubuntu/pool/universe/g/gcc-4.8/cpp-4.8_4.8.5-4ubuntu8_amd64.deb </span><br><span class="line">wget http://mirrors.kernel.org/ubuntu/pool/universe/g/gcc-4.8/libasan0_4.8.5-4ubuntu8_amd64.deb  </span><br><span class="line">sudo apt install ./gcc-4.8_4.8.5-4ubuntu8_amd64.deb ./gcc-4.8-base_4.8.5-4ubuntu8_amd64.deb ./libstdc++-4.8-dev_4.8.5-4ubuntu8_amd64.deb ./cpp-4.8_4.8.5-4ubuntu8_amd64.deb ./libgcc-4.8-dev_4.8.5-4ubuntu8_amd64.deb ./libasan0_4.8.5-4ubuntu8_amd64.deb ./g++-4.8_4.8.5-4ubuntu8_amd64.deb</span><br><span class="line">cd</span><br><span class="line">rm -rf install_g++-4.8</span><br></pre></td></tr></table></figure><h3 id="4-3-g-4-8-unrecognized-command-line-option-no-pie-错误">4.3 g+±4.8 unrecognized command line option '-no-pie’错误</h3><p>这里重点强调下g++的-no-pie错误，在安装好gcc 4.8和g+±4.8以后，可能还会报出g+±4.8: error: unrecognized command line option '-no-pie’的错误：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">g++-4.8: error: unrecognized command line option &#x27;-no-pie&#x27;</span><br><span class="line">Makefile:109: recipe for target &#x27;product_timestamp&#x27; failed</span><br></pre></td></tr></table></figure><p>出现该错误的原因是g++版本较低，VCS的预编译选项中会添加-no-pie标志，但g++不能够识别该命令，在VCS编译完成后的/csrc/Makefile文件中，会增加预编译选项：<br><img width="751" height="268" src="/imgs/f2b2e0f13176479d82c0f2c5fd2ffd28_65dad2919c8e462ea.png"/><br>csrc是个临时文件，真正产生该文件的位置是在安装的VCS路径下面：<br><img width="751" height="138" src="/imgs/07710ad1937a4483b2e946b4177825a4_6dd4725aba2848708.png"/><br>因此，进入VCS安装路径对应的/bin/文件夹下，打开vcs文件，将其中的PRE_LDFLAGS参数后面的-no-pie删除，即可成功解决该问题。<br><img width="751" height="127" src="/imgs/9e6cf1aa0e654b7d8219426de55bea21_1e42c29dbc9248b59.png"/></p><h3 id="4-5-undefined-reference-to-vfs-set-dir-map-问题">4.5 undefined reference to ‘vfs_set_dir_map’问题</h3><p>在vcs编译选项中加入下列语句：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-LDFLAGS -Wl,--no-as-needed</span><br></pre></td></tr></table></figure><h3 id="4-5-undefined-reference-to-pthread-yield问题">4.5 undefined reference to pthread_yield问题</h3><p>原因是：<code>/home/synopsys/vcs_2018.9/vcs/O-2018.09-SP2/linux64/lib/vcs_save_restore_new.o</code> 中的pthread_yield已在最新的glibc放弃使用了。<strong>注意文件夹路径</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 备份 </span></span><br><span class="line"><span class="built_in">mv</span> /home/synopsys/vcs/O-2018.09-SP2/linux64/lib/vcs_save_restore_new.o /home/synopsys/vcs/O-2018.09-SP2/linux64/lib/vcs_save_restore_new.o.bak </span><br><span class="line"><span class="comment"># 2. 替换符号表中的pthread_yield </span></span><br><span class="line">objcopy --redefine-sym pthread_yield=sched_yield /home/synopsys/vcs/O-2018.09-SP2/linux64/lib/vcs_save_restore_new.o.bak /home/synopsys/vcs/O-2018.09-SP2/linux64/lib/vcs_save_restore_new.o</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;参考资料：&lt;a href=&quot;https://blog.csdn.net/qq_41717683/article/details/122267191&quot;&gt;VCS2018在Ubuntu20 18安装步骤&lt;/a&gt;、&lt;a href=&quot;https://www.</summary>
      
    
    
    
    
    <category term="教程" scheme="https://planckzgh.github.io/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>YSYX-PA1学习记录</title>
    <link href="https://planckzgh.github.io/2023/11/05/YSYX-PA1%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    <id>https://planckzgh.github.io/2023/11/05/YSYX-PA1%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</id>
    <published>2023-11-05T06:59:40.000Z</published>
    <updated>2023-12-03T07:38:49.185Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ysyx-pa1学习记录">YSYX-PA1学习记录</h1><h2 id="1-rtfsc">1 RTFSC</h2><p>这一部分最关键的是<strong>反复阅读</strong>源码！<br>不是像读课文一样反复阅读，而是了解源码结构和功能之后，在后面的练习中遇到不懂的反复回看源码。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">ics2023</span><br><span class="line">├── abstract-machine           # 抽象计算机</span><br><span class="line">├── am-kernels                 # 基于抽象计算机开发的应用程序</span><br><span class="line">├── fceux-am                   # 红白机模拟器</span><br><span class="line">├── init.sh                    # 初始化脚本</span><br><span class="line">├── Makefile                   # 用于工程打包提交</span><br><span class="line">├── nemu                       # NEMU</span><br><span class="line">└── README.md</span><br><span class="line">───────────────────────────────────────────────</span><br><span class="line">nemu</span><br><span class="line">├── configs                    # 预先提供的一些配置文件</span><br><span class="line">├── include                    # 存放全局使用的头文件</span><br><span class="line">│   ├── common.h               # 公用的头文件</span><br><span class="line">│   ├── config                 # 配置系统生成的头文件, 用于维护配置选项更新的时间戳</span><br><span class="line">│   ├── cpu</span><br><span class="line">│   │   ├── cpu.h</span><br><span class="line">│   │   ├── decode.h           # 译码相关</span><br><span class="line">│   │   ├── difftest.h</span><br><span class="line">│   │   └── ifetch.h           # 取指相关</span><br><span class="line">│   ├── debug.h                # 一些方便调试用的宏</span><br><span class="line">│   ├── device                 # 设备相关</span><br><span class="line">│   ├── difftest-def.h</span><br><span class="line">│   ├── generated</span><br><span class="line">│   │   └── autoconf.h         # 配置系统生成的头文件, 用于根据配置信息定义相关的宏</span><br><span class="line">│   ├── isa.h                  # ISA相关</span><br><span class="line">│   ├── macro.h                # 一些方便的宏定义</span><br><span class="line">│   ├── memory                 # 访问内存相关</span><br><span class="line">│   └── utils.h</span><br><span class="line">├── Kconfig                    # 配置信息管理的规则</span><br><span class="line">├── Makefile                   # Makefile构建脚本</span><br><span class="line">├── README.md</span><br><span class="line">├── resource                   # 一些辅助资源</span><br><span class="line">├── scripts                    # Makefile构建脚本</span><br><span class="line">│   ├── build.mk</span><br><span class="line">│   ├── config.mk</span><br><span class="line">│   ├── git.mk                 # git版本控制相关</span><br><span class="line">│   └── native.mk</span><br><span class="line">├── src                        # 源文件</span><br><span class="line">│   ├── cpu</span><br><span class="line">│   │   └── cpu-exec.c         # 指令执行的主循环</span><br><span class="line">│   ├── device                 # 设备相关</span><br><span class="line">│   ├── engine</span><br><span class="line">│   │   └── interpreter        # 解释器的实现</span><br><span class="line">│   ├── filelist.mk</span><br><span class="line">│   ├── isa                    # ISA相关的实现</span><br><span class="line">│   │   ├── mips32</span><br><span class="line">│   │   ├── riscv32</span><br><span class="line">│   │   ├── riscv64</span><br><span class="line">│   │   └── x86</span><br><span class="line">│   ├── memory                 # 内存访问的实现</span><br><span class="line">│   ├── monitor</span><br><span class="line">│   │   ├── monitor.c</span><br><span class="line">│   │   └── sdb                # 简易调试器</span><br><span class="line">│   │       ├── expr.c         # 表达式求值的实现</span><br><span class="line">│   │       ├── sdb.c          # 简易调试器的命令处理</span><br><span class="line">│   │       └── watchpoint.c   # 监视点的实现</span><br><span class="line">│   ├── nemu-main.c            # 你知道的...</span><br><span class="line">│   └── utils                  # 一些公共的功能</span><br><span class="line">│       ├── log.c              # 日志文件相关</span><br><span class="line">│       ├── rand.c</span><br><span class="line">│       ├── state.c</span><br><span class="line">│       └── timer.c</span><br><span class="line">└── tools                      # 一些工具</span><br><span class="line">    ├── fixdep                 # 依赖修复, 配合配置系统进行使用</span><br><span class="line">    ├── gen-expr</span><br><span class="line">    ├── kconfig                # 配置系统</span><br><span class="line">    ├── kvm-diff</span><br><span class="line">    ├── qemu-diff</span><br><span class="line">    └── spike-diff</span><br></pre></td></tr></table></figure><h2 id="2-基础设施：简易调试器">2 基础设施：简易调试器</h2><h3 id="2-1-解析命令">2.1 解析命令</h3><p>掌握一些字符串处理函数</p><ol><li><code>man strtok</code>：字符串切分和解析函数</li><li><code>man strncpy</code>：字符串复制函数</li><li><code>man sscanf</code>：字符串解析函数</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">strtok(<span class="type">char</span> *str, <span class="type">const</span> <span class="type">char</span> *delim);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">- 第一次调用时，str需要指定，后续对同一个str解析时，str指定为NULL</span></span><br><span class="line"><span class="comment">- 每次调用，delim可以制定不同的分界符</span></span><br><span class="line"><span class="comment">- 每次调用，strtok都会返回一个指针指向下一个token，直到下一个token为空指向NULL</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">strncpy</span>(<span class="type">char</span> *dest, <span class="type">const</span> <span class="type">char</span> *str, <span class="type">size_t</span> n);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">- 复制str字符串的前n个字节至dest中</span></span><br><span class="line"><span class="comment">- str不足n长，用空字节补全</span></span><br><span class="line"><span class="comment">- 如果str的前n字节无空字节，dest将不会以空字节`\0`结尾</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">sscanf</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *str, <span class="type">const</span> <span class="type">char</span> *format, ...)</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">- sscanf返回成功提取的参数的个数，否则返回0</span></span><br><span class="line"><span class="comment">- format可以自定义解析的格式</span></span><br><span class="line"><span class="comment">- 特殊用法：sscanf(str, &quot;%d %50[^\n]&quot;, &amp;num, expr); 其中%50[^\n]指的是提取宽度为50的字符串并将其解析成字符串（除非遇到换行符\n）</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="2-2-单步执行">2.2 单步执行</h3><p>掌握<code>cpu_exec(n)</code>的作用</p><h3 id="2-3-打印寄存器">2.3 打印寄存器</h3><p>寄存器符号<code>regs[i]</code>和寄存器值<code>cpu.gpr[i]</code><br>别忘了<code>pc</code>寄存器和寄存器值<code>cpu.pc</code></p><h3 id="2-4-扫描内存">2.4 扫描内存</h3><p>掌握<code>sscanf()</code>函数解析字符串</p><h2 id="3-表达式求值">3 表达式求值</h2><h3 id="3-1-利用正则表达式识别token">3.1 利用正则表达式识别token</h3><h3 id="3-2-递归求值-分治法">3.2 递归求值——分治法</h3><h4 id="3-2-1-匹配括号">3.2.1 匹配括号</h4><h4 id="3-2-2-寻找主操作符">3.2.2 寻找主操作符</h4><h3 id="3-3-随机测试">3.3 随机测试</h3><ul><li>[ ] 如何保证表达式进行无符号运算?</li><li>[x] 如何随机插入空格?</li><li>[ ] 如何生成长表达式, 同时不会使buf溢出?</li><li>[x] 如何过滤求值过程中有除0行为的表达式?</li></ul><h2 id="4-监视点">4 监视点</h2><p>单向链表的插入操作：头插法</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ysyx-pa1学习记录&quot;&gt;YSYX-PA1学习记录&lt;/h1&gt;
&lt;h2 id=&quot;1-rtfsc&quot;&gt;1 RTFSC&lt;/h2&gt;
&lt;p&gt;这一部分最关键的是&lt;strong&gt;反复阅读&lt;/strong&gt;源码！&lt;br&gt;
不是像读课文一样反复阅读，而是了解源码结构和功能之后，在后</summary>
      
    
    
    
    
    <category term="总结" scheme="https://planckzgh.github.io/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>YSYX-PA0学习记录</title>
    <link href="https://planckzgh.github.io/2023/11/01/YSYX-PA0%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    <id>https://planckzgh.github.io/2023/11/01/YSYX-PA0%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</id>
    <published>2023-11-01T09:40:30.000Z</published>
    <updated>2023-12-03T07:38:49.185Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ysyx-pa0学习记录">YSYX-PA0学习记录</h1><blockquote><p>写下PA0重新复盘PA0的完成过程，查漏补缺</p></blockquote><h2 id="1-ubuntu的安装">1 Ubuntu的安装</h2><p>由于之前使用的常常是windows系统，此处选择安装双系统，主要参考b站up阿杰的<a href="https://www.bilibili.com/video/BV1554y1n7zv/?spm_id_from=333.337.search-card.all.click&amp;vd_source=1d1cb8cc1e7664d1de1ccb2714b0b9b4">双系统安装教程</a>，关键步骤如下：</p><ol><li>使用rufus制作启动U盘；</li><li>磁盘分区尽量大一些；（如果选择方案二，根挂载点应当给到50GB以上）</li><li>注意系统的时间同步问题；</li></ol><h2 id="2-ubuntu系统的配置">2 Ubuntu系统的配置</h2><ol><li>推荐安装一些常用软件：QQ，网易邮箱，Joplin，clash，onedrive，edge, sublime-text</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dpkg -i *.deb</span><br></pre></td></tr></table></figure><ol start="2"><li>简洁的配置vim和sublime</li></ol><h2 id="3-linux的学习探索">3 Linux的学习探索</h2><blockquote><p>学习资源：<a href="https://101.ustclug.org/">Linux101</a>、<a href="https://www.harley.com/books/sg3.html">HARLEY HAHN’S GUIDE TO UNIX AND LINUX</a>、<a href="https://missing-semester-cn.github.io/">计算机教育中缺失的一课</a>、<a href="http://akaedu.github.io/book/">C语言教程</a>、<a href="https://www.cntofu.com/book/25/index.html">笨办法学C</a>，<a href="https://github.com/search?o=desc&amp;q=dotfiles&amp;s=stars&amp;type=Repositories">dotfiles仓库</a></p></blockquote><h3 id="3-1-常用命令">3.1 常用命令</h3><ol><li>软件安装：<code>sudo apt install file or *.deb</code></li><li>帮助文档<ul><li>全面：<code>man</code></li><li>快速：<code>tldr</code></li></ul></li><li>文件操作<ul><li>查看：<code>cat</code>,<code>less</code>,<code>head</code>,<code>tail</code></li><li>复制：<code>cp</code></li><li>移动：<code>mv</code></li><li>删除：<code>rm</code></li><li>创建：<code>mkdir</code>,<code>touch</code></li><li>压缩：<code>tar</code></li><li>权限：<code>chmod</code></li><li>搜索：<code>find</code>，<code>fd</code>，<code>locate</code></li></ul></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查找所有名称为src的文件夹</span></span><br><span class="line">find . -name src -type d</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查找所有文件夹路径中包含<span class="built_in">test</span>的python文件</span></span><br><span class="line">find . -path &#x27;*/test/*.py&#x27; -type f</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查找前一天修改的所有文件</span></span><br><span class="line">find . -mtime -1</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查找所有大小在500k至10M的tar.gz文件</span></span><br><span class="line">find . -size +500k -size -10M -name &#x27;*.tar.gz&#x27;</span><br></pre></td></tr></table></figure><ol start="4"><li>重定向与管道<ul><li>覆盖：<code>echo &quot;Hello Linux!&quot; &gt; output_file</code></li><li>追加：<code>echo &quot;Hello Linux!&quot; &gt;&gt; output_file</code><ul><li>转义与不转义：<code>echo &quot;$foo&quot;</code> or <code>echo '$foo'</code></li></ul></li><li>管道：<code>|</code>将符号左侧命令的<code>stdout</code>作为符号右侧命令的<code>stdin</code></li></ul></li><li>网络下载：<code>wget</code>,<code>curl</code></li><li>文本处理<ul><li>统计：<code>wc</code></li><li>比较：<code>diff file1 file2</code></li><li>查找：<code>grep</code></li><li>替换：<code>sed</code></li><li>排序：<code>sort</code></li><li>正则表达式</li></ul></li></ol><h3 id="3-2-shell脚本">3.2 Shell脚本</h3><ol><li>变量赋值：<code>foo=bar</code></li><li>变量访问：<code>$foo</code></li><li>字符串：转义<code>&quot;&quot;</code>，原义<code>''</code></li><li>通配符：<ul><li><code>?</code>：匹配一个字符</li><li><code>*</code>：匹配任意个字符</li></ul></li><li>花括号：<code>mv *&#123;.py,.sh&#125; folder</code></li><li>函数：<ol><li>参数：<ul><li><code>$0</code>：脚本名</li><li><code>$1-$9</code>：第1-9个参数</li><li><code>$@</code>：所有参数</li><li><code>$#</code>：参数个数</li><li><code>$?</code>：前一个命令的返回值</li><li><code>$$</code>：当前脚本的进程识别码</li><li><code>!!</code>：完整的上一条命令</li><li><code>$_</code>：上一条命令的最后一个参数</li></ul></li><li>返回值：<code>0</code>：表示正常执行，反之出错</li></ol></li><li>条件语句：<ul><li><code>-z/-n</code> ：空/非空</li><li><code>-eq/-ne</code>：相等/不等</li><li><code>-gt/-lt</code>：大于/小于</li><li><code>-ge/-le</code>：大于等于/小于等于</li></ul></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">if condition1</span><br><span class="line">then</span><br><span class="line">    # 代码块会在条件1为真时执行</span><br><span class="line">elif condition2</span><br><span class="line">then</span><br><span class="line">    # 代码块会在条件2为真时执行</span><br><span class="line">else</span><br><span class="line">    # 如果前面的条件都不为真，执行此代码块</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h3 id="3-3-makefile简明教程">3.3 Makefile简明教程</h3><h3 id="3-4-gdb">3.4 GDB</h3><blockquote><p><a href="https://linuxconfig.org/gdb-debugging-tutorial-for-beginners">small tutorial</a></p></blockquote><h4 id="3-4-1-bug：生成转储文件">3.4.1 BUG：生成转储文件</h4><ol start="0"><li>生成可执行文件：<code>gcc -ggdb test.c -o test.out</code></li><li>查看转储文件生成路径：<code>cat /proc/sys/kernel/core_pattern</code></li><li>修改转储文件输出路径和输出文件名</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 控制core文件的文件名中是否添加pid作为扩展</span><br><span class="line">echo &quot;1&quot; &gt; /proc/sys/kernel/core_uses_pid </span><br><span class="line">// 设置core文件的输出路径和输出文件名，这里我的路径是/home/boy/corefile，文件名就是后面的部分</span><br><span class="line">echo &quot;/home/your_path/core-%e-%p-%t&quot;&gt; /proc/sys/kernel/core_pattern </span><br><span class="line">//参数说明</span><br><span class="line"><span class="meta prompt_">%</span><span class="language-bash">p - insert pid into filename 添加pid</span></span><br><span class="line"><span class="meta prompt_">%</span><span class="language-bash">u - insert current uid into filename 添加当前uid</span></span><br><span class="line"><span class="meta prompt_">%</span><span class="language-bash">g - insert current gid into filename 添加当前gid</span></span><br><span class="line"><span class="meta prompt_">%</span><span class="language-bash">s - insert signal that caused the coredump into the filename 添加导致产生core的信号</span></span><br><span class="line"><span class="meta prompt_">%</span><span class="language-bash">t - insert UNIX time that the coredump occurred into filename 添加core文件生成时的unix时间</span></span><br><span class="line"><span class="meta prompt_">%</span><span class="language-bash">h - insert hostname <span class="built_in">where</span> the coredump happened into filename 添加主机名</span></span><br><span class="line"><span class="meta prompt_">%</span><span class="language-bash">e - insert coredumping executable name into filename 添加程序名</span></span><br></pre></td></tr></table></figure><ol start="3"><li>查看core file size：<code>ulimit -a</code></li><li>修改core file size：<code>ulimit -c unlimited</code></li><li>重新运行可执行文件：<code>./test.out</code></li><li>注意：以上行为可能需要su权限，甚至gdb执行内核转储文件的操作也需要su权限。</li></ol><h4 id="3-4-2-基本操作">3.4.2 基本操作</h4><ol><li>su下使用gdb分析core dump：<code>gdb ./test.out ./core.1341870.1000.8.test.out.1598867712</code></li><li>Backstracing：<code>bt</code></li><li>Frame: <code>f n</code></li><li>List source code: <code>list</code></li><li>Print: <code>p a</code></li><li><code>watch expr</code>：表达式发生变化时暂停运行</li><li><code>awatch expr</code>：表达式被访问、改变是暂停执行</li><li>rwatch <code>expr</code>：表达式被访问时暂停执行</li></ol><h3 id="3-5-tmux简明教程">3.5 <a href="https://planckzgh.github.io/2023/10/23/Tmux%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B/">Tmux简明教程</a></h3><h3 id="3-6-git简明教程">3.6 Git简明教程</h3><blockquote><p><a href="https://missing-semester-cn.github.io/2020/version-control/">git</a><br><a href="https://learngitbranching.js.org/?locale=zh_CN">Learn Git Branching</a></p></blockquote><h3 id="3-7-c语言教程">3.7 C语言教程</h3><blockquote><p>在此总结此后遇到的所有与c语言相关的问题；<br>完成预学习部分的C语言题目</p></blockquote><h3 id="3-8-正则表达式">3.8 正则表达式</h3><p><img src="/imgs/a1.png" alt="正则表达式基本规则.png"></p><h2 id="4-数字电路基础实验">4 数字电路基础实验</h2><blockquote><p><a href="https://nju-projectn.github.io/dlco-lecture-note/exp/01.html">南大数字逻辑与计算机组成课程实验</a></p></blockquote><h3 id="4-1-注意">4.1 注意！</h3><ol><li>强烈建议初学者不要使用行为建模方式设计电路</li><li>One-hot编码的状态机从一个状态到另一个状态的<strong>状态跳转速度非常快</strong>，而顺序二进制编码从一个状态跳转到另外一个状态需要较多次跳转，并且随着状态的增加，速度急剧下降。 在芯片受到干扰时，one-hot编码一般只能跳转到无效状态（如果跳到另一有效状态必须是当前为 1 的为变为 0 ，同时另外一位变成由 0 变为 1 ，这种可能性很小），因此<strong>one-hot编码的状态机稳定性高</strong>。CPLD多使用gray-code，而FPGA多使用one-hot 编码。对于触发器资源非常丰富的FPGA器件，使用one-hot是常用的。</li></ol><hr><p>Verilog一开始并不是为了设计可综合电路而提出的，它的本质是一门基于事件队列模型的电路建模语言。因此，行为建模很容易会让初学者偏离描述电路的初衷: 开发者需要看着电路图，心里想象电路的行为，然后转化成事件队列模型的思考方式，最后再用行为建模方式来描述电路的行为，综合器再来根据这样的描述推导出相应的电路。从这个过程来看，这不仅是没有必要的，而且还很容易引入错误：如果开发者心里本身就已经有电路图，直接描述它是最方便的，如果开发者心里本身就已经有电路图，而开发者对行为建模方式的理解所有偏差，可能会采用了错误的描述方式，从而设计出非预期的电路。如果开发者心里没有电路图，而是期望通过行为建模方式让综合器生成某种行为的电路，这就已经偏离“描述电路”的本质了。大部分同学非常容易犯这样的错误，把行为建模当作过程式的C语言来写，尝试把任意复杂的行为描述映射到电路，最终综合器只会生成出延迟大，面积大，功耗高的低质量电路。所以，直到大家掌握“描述电路”的思维而不被行为建模误导之前，我们强烈建议初学者远离行为建模方式，仅通过数据流建模和结构化建模方式直接描述电路。例如，上文关于if和always的说法从某种程度上来说是正确的，但下面的问题可以帮助大家测试自己是否已经掌握了Verilog的本质：</p><ul><li>在硬件描述语言中，“执行”的精确含义是什么？</li></ul><blockquote><p>答：在仿真器里是模拟电路；在综合器中综合电路；在时序电路中顺序执行，在并行电路中交互执行；</p></blockquote><ul><li>是谁在执行Verilog的语句？ 是电路，综合器，还是其它的？</li></ul><blockquote><p>答：在开发阶段，使用模拟器；在综合阶段，使用综合器；最后在电路上执行。</p></blockquote><ul><li>if的条件满足，就不执行else后的语句，这里的“不执行”又是什么意思？ 和描述电路有什么联系？</li></ul><blockquote><p>都要描述；不执行指跳过执行。</p></blockquote><ul><li>有“并发执行”，又有“顺序执行”，还有“任何一个变量发生变化就立即执行”，以及“在任何情况下都执行”，它们都是如何在设计出来的电路中体现的？</li></ul><blockquote><p>并联和串联的关系；顺序执行可以通过时序和寄存器实现；变化执行可以通过触发器(Flip-Flops)实现；</p></blockquote><p>如果你无法对这些问题作出明确的回答，我们强烈建议你不要使用行为建模方式。如果你真的想弄懂它们，你需要阅读 Verilog标准手册 。</p><p><strong>真正的描述电路 = 实例化 + 连线</strong></p><ul><li>实例化：在电路板上放一个元件/模块，可以是一个门电路，或者是由门电路组成的模块</li><li>连线：用导线将元件/模块的引脚正确地连起来</li></ul><h3 id="4-2-拓展">4.2 拓展</h3><blockquote><p><strong>生成进位加法器</strong><br>先行进位加法器（Carry Look-Ahead Adder，CLA）是一种加法器设计，旨在加快加法操作的速度，特别是在大规模加法操作中。与传统的Ripple Carry Adder相比，CLA具有更高的性能，因为它可以在不等待进位传递的情况下生成和处理进位。<br>CLA加法器的设计基于以下原理：</p><ol><li>生成（G）和传播（P）信号：CLA加法器使用生成和传播信号来确定每个位的进位。生成信号（G）表示两个输入位相加时是否会生成进位（1表示生成，0表示不生成），而传播信号（P）表示输入位是否传播进位到该位（1表示传播，0表示不传播）。</li><li>进位生成：对于每一位i，进位生成（G_i）等于输入A_i和B_i相加的逻辑与（AND）操作。即：G_i = A_i &amp; B_i。</li><li>进位传播：进位传播（P_i）等于输入A_i或B_i的逻辑或（OR）操作。即：P_i = A_i | B_i。</li><li>进位计算：CLA加法器使用生成（G）和传播（P）信号来计算每一位的进位。对于第一位（最低位），进位C0等于G0，然后每一位的进位C_i都通过以下等式计算：C_i = G_i + (P_i &amp; C_(i-1))。</li></ol></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ysyx-pa0学习记录&quot;&gt;YSYX-PA0学习记录&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;写下PA0重新复盘PA0的完成过程，查漏补缺&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;1-ubuntu的安装&quot;&gt;1 Ubuntu的安装&lt;/h2&gt;
&lt;p&gt;由于</summary>
      
    
    
    
    
    <category term="总结" scheme="https://planckzgh.github.io/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>Tmux简明教程</title>
    <link href="https://planckzgh.github.io/2023/10/23/Tmux%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B/"/>
    <id>https://planckzgh.github.io/2023/10/23/Tmux%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B/</id>
    <published>2023-10-23T03:26:59.000Z</published>
    <updated>2024-03-31T12:25:00.722Z</updated>
    
    <content type="html"><![CDATA[<h1 id="tmux简明教程">Tmux简明教程</h1><blockquote><p>参考资料：<a href="https://blog.csdn.net/easylife206/article/details/102713902">可能是东半球最全面易懂的 Tmux 使用教程！( 强烈建议收藏 )</a></p></blockquote><h2 id="tmux简介">Tmux简介</h2><ol><li>会话：用户在终端窗口(进程)中输入命令进行交互，称为一次会话；</li><li>Tmux就是会话与窗口的解绑工具。</li></ol><h2 id="基本操作">基本操作</h2><h3 id="1-前缀键：ctrl-b">1. 前缀键：<code>ctrl+b</code></h3><ol><li><code>+ 方向键</code>：切换窗格</li><li><code>+ alt 方向键</code>：调整窗格大小</li><li><code>+ n</code>：切换窗口</li><li><code>+ s （+ 方向键）</code>：列出所有会话（显示分支结构）</li><li><code>+ x</code>：关闭当前窗格</li><li><code>+ z</code>：全屏当前窗格</li><li><code>+ d</code>：分离当前会话</li><li><code>+ q</code>：显示窗格编号tmux</li></ol><h3 id="2-会话操作">2. 会话操作</h3><blockquote><p>启动，退出，创建，接入，分离，查看，杀死，重命名，切换0</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">tmux # 启动</span><br><span class="line">exit # 退出</span><br><span class="line">tmux new -s &lt;session-name&gt;</span><br><span class="line">tmux attach -t &lt;session-name&gt;</span><br><span class="line">tmux detach </span><br><span class="line">tmux ls</span><br><span class="line">tmux kill-session -t &lt;session-name&gt;</span><br><span class="line">tmux rename-session -t &lt;target-name&gt; &lt;new-name&gt;</span><br><span class="line">tmux switch-session -t &lt;session-name&gt;</span><br></pre></td></tr></table></figure><h3 id="3-窗格操作">3. 窗格操作</h3><blockquote><p>新建，切换，划分，移动，交换</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">tmux new-window -n &lt;window-name&gt;</span><br><span class="line">tmux select-window -t &lt;window-name&gt;</span><br><span class="line">tmux rename-window &lt;new-name&gt;</span><br><span class="line"></span><br><span class="line">tmux split-window    # up-down</span><br><span class="line">tmux split-window -h # left-right</span><br><span class="line"></span><br><span class="line">tmux select-pane -U  # up</span><br><span class="line">tmux select-pane -D  # down</span><br><span class="line">tmux select-pane -L  # left</span><br><span class="line">tmux select-pane -R  # right</span><br><span class="line"></span><br><span class="line">tmux swap-pane   -U  # -D -L -R</span><br></pre></td></tr></table></figure><h3 id="4-我的配置-tmux-conf">4. 我的配置<code>.tmux.conf</code></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">set -g mouse on # 鼠标滚动支持</span><br><span class="line">set -g default-terminal &quot;screen-256color&quot;</span><br><span class="line">set-option -ga terminal-overrides &quot;,*256col*:Tc&quot;</span><br><span class="line">set -g status-right &#x27;%H:%M:%S %b-%d %A&#x27;</span><br><span class="line">set -g status-interval 1 # 状态栏刷新时间</span><br><span class="line">set -g status-style bg=&#x27;#000000&#x27;,fg=white # 底部命令或者状态栏的颜色</span><br><span class="line">set  -g pane-active-border-style fg=red,bg=black # 设置正在使用的窗口的边界颜色，在不同窗口切换时边界颜色会变化</span><br><span class="line">set -sg escape-time 1</span><br><span class="line">set -g status-position bottom</span><br><span class="line">bind | split-window -h -c &#x27;#&#123;pane_current_path&#125;&#x27;</span><br><span class="line">bind - split-window -v -c &#x27;#&#123;pane_current_path&#125;&#x27;</span><br><span class="line">bind-key N run &quot;tmux new-window -c &#x27;#&#123;pane_current_path&#125;&#x27; -t $(($(tmux display-message -p &#x27;#I&#x27;) + 1))&quot;</span><br><span class="line">bind h select-pane -L</span><br><span class="line">bind j select-pane -D</span><br><span class="line">bind k select-pane -U </span><br><span class="line">bind l select-pane -R</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;tmux简明教程&quot;&gt;Tmux简明教程&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;参考资料：&lt;a href=&quot;https://blog.csdn.net/easylife206/article/details/102713902&quot;&gt;可能是东半球最全面易懂的 Tmux</summary>
      
    
    
    
    
    <category term="教程" scheme="https://planckzgh.github.io/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
</feed>
